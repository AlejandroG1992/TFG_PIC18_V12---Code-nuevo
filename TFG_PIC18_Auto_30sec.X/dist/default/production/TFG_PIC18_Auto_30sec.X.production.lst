

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Feb 05 21:31:09 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F26K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    77                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    78  0000                     
    79                           	psect	idataCOMRAM
    80  002ED0                     __pidataCOMRAM:
    81                           	opt stack 0
    82                           
    83                           ;initializer for _present_state
    84  002ED0  41                 	db	65
    85                           
    86                           	psect	idataBANK0
    87  002DFE                     __pidataBANK0:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _Vdd
    91  002DFE  71                 	db	113
    92  002DFF  55                 	db	85
    93  002E00  40                 	db	64
    94                           
    95                           ;initializer for _Vo
    96  002E01  48                 	db	72
    97  002E02  01                 	db	1
    98  002E03  3F                 	db	63
    99                           
   100                           ;initializer for _sensibilidad
   101  002E04  D7                 	db	215
   102  002E05  23                 	db	35
   103  002E06  3C                 	db	60
   104                           
   105                           ;initializer for _postscaler30smax
   106  002E07  1F40               	dw	8000
   107                           
   108                           ;initializer for _postscalermax
   109  002E09  03E8               	dw	1000
   110                           
   111                           ;initializer for _CharTX
   112  002E0B  48                 	db	72
   113  002E0C  65                 	db	101
   114  002E0D  6C                 	db	108
   115  002E0E  6C                 	db	108
   116  002E0F  6F                 	db	111
   117  002E10  20                 	db	32
   118  002E11  57                 	db	87
   119  002E12  6F                 	db	111
   120  002E13  72                 	db	114
   121  002E14  6C                 	db	108
   122  002E15  64                 	db	100
   123  002E16  00                 	db	0
   124                           
   125                           	psect	idataBANK1
   126  002C6C                     __pidataBANK1:
   127                           	opt stack 0
   128                           
   129                           ;initializer for _message1
   130  002C6C  54                 	db	84
   131  002C6D  65                 	db	101
   132  002C6E  6D                 	db	109
   133  002C6F  70                 	db	112
   134  002C70  20                 	db	32
   135  002C71  3D                 	db	61
   136  002C72  20                 	db	32
   137  002C73  30                 	db	48
   138  002C74  30                 	db	48
   139  002C75  2E                 	db	46
   140  002C76  30                 	db	48
   141  002C77  20                 	db	32
   142  002C78  43                 	db	67
   143  002C79  00                 	db	0
   144                           
   145                           ;initializer for _message2
   146  002C7A  52                 	db	82
   147  002C7B  48                 	db	72
   148  002C7C  20                 	db	32
   149  002C7D  20                 	db	32
   150  002C7E  20                 	db	32
   151  002C7F  3D                 	db	61
   152  002C80  20                 	db	32
   153  002C81  30                 	db	48
   154  002C82  30                 	db	48
   155  002C83  2E                 	db	46
   156  002C84  30                 	db	48
   157  002C85  20                 	db	32
   158  002C86  25                 	db	37
   159  002C87  00                 	db	0
   160                           
   161                           ;initializer for _CharTX2
   162  002C88  48                 	db	72
   163  002C89  65                 	db	101
   164  002C8A  6C                 	db	108
   165  002C8B  6C                 	db	108
   166  002C8C  6F                 	db	111
   167  002C8D  20                 	db	32
   168  002C8E  57                 	db	87
   169  002C8F  6F                 	db	111
   170  002C90  72                 	db	114
   171  002C91  6C                 	db	108
   172  002C92  64                 	db	100
   173  002C93  00                 	db	0
   174                           
   175                           	psect	mediumconst
   176  00FDFA                     __pmediumconst:
   177                           	opt stack 0
   178  00FDFA  00                 	db	0
   179  00FDFB                     _dpowers:
   180                           	opt stack 0
   181  00FDFB  0001               	dw	1
   182  00FDFD  0000               	dw	0
   183  00FDFF  000A               	dw	10
   184  00FE01  0000               	dw	0
   185  00FE03  0064               	dw	100
   186  00FE05  0000               	dw	0
   187  00FE07  03E8               	dw	1000
   188  00FE09  0000               	dw	0
   189  00FE0B  2710               	dw	10000
   190  00FE0D  0000               	dw	0
   191  00FE0F  86A0               	dw	34464
   192  00FE11  0001               	dw	1
   193  00FE13  4240               	dw	16960
   194  00FE15  000F               	dw	15
   195  00FE17  9680               	dw	38528
   196  00FE19  0098               	dw	152
   197  00FE1B  E100               	dw	57600
   198  00FE1D  05F5               	dw	1525
   199  00FE1F  CA00               	dw	51712
   200  00FE21  3B9A               	dw	15258
   201  00FE23                     __end_of_dpowers:
   202                           	opt stack 0
   203  00FE23                     __npowers_:
   204                           	opt stack 0
   205  00FE23  00                 	db	0
   206  00FE24  80                 	db	128
   207  00FE25  3F                 	db	63
   208  00FE26  CD                 	db	205
   209  00FE27  CC                 	db	204
   210  00FE28  3D                 	db	61
   211  00FE29  D7                 	db	215
   212  00FE2A  23                 	db	35
   213  00FE2B  3C                 	db	60
   214  00FE2C  12                 	db	18
   215  00FE2D  83                 	db	131
   216  00FE2E  3A                 	db	58
   217  00FE2F  B7                 	db	183
   218  00FE30  D1                 	db	209
   219  00FE31  38                 	db	56
   220  00FE32  C6                 	db	198
   221  00FE33  27                 	db	39
   222  00FE34  37                 	db	55
   223  00FE35  38                 	db	56
   224  00FE36  86                 	db	134
   225  00FE37  35                 	db	53
   226  00FE38  C0                 	db	192
   227  00FE39  D6                 	db	214
   228  00FE3A  33                 	db	51
   229  00FE3B  CC                 	db	204
   230  00FE3C  2B                 	db	43
   231  00FE3D  32                 	db	50
   232  00FE3E  70                 	db	112
   233  00FE3F  89                 	db	137
   234  00FE40  30                 	db	48
   235  00FE41  E7                 	db	231
   236  00FE42  DB                 	db	219
   237  00FE43  2E                 	db	46
   238  00FE44  E5                 	db	229
   239  00FE45  3C                 	db	60
   240  00FE46  1E                 	db	30
   241  00FE47  42                 	db	66
   242  00FE48  A2                 	db	162
   243  00FE49  0D                 	db	13
   244  00FE4A                     __end_of__npowers_:
   245                           	opt stack 0
   246  00FE4A                     __powers_:
   247                           	opt stack 0
   248  00FE4A  00                 	db	0
   249  00FE4B  80                 	db	128
   250  00FE4C  3F                 	db	63
   251  00FE4D  00                 	db	0
   252  00FE4E  20                 	db	32
   253  00FE4F  41                 	db	65
   254  00FE50  00                 	db	0
   255  00FE51  C8                 	db	200
   256  00FE52  42                 	db	66
   257  00FE53  00                 	db	0
   258  00FE54  7A                 	db	122
   259  00FE55  44                 	db	68
   260  00FE56  40                 	db	64
   261  00FE57  1C                 	db	28
   262  00FE58  46                 	db	70
   263  00FE59  50                 	db	80
   264  00FE5A  C3                 	db	195
   265  00FE5B  47                 	db	71
   266  00FE5C  24                 	db	36
   267  00FE5D  74                 	db	116
   268  00FE5E  49                 	db	73
   269  00FE5F  97                 	db	151
   270  00FE60  18                 	db	24
   271  00FE61  4B                 	db	75
   272  00FE62  BC                 	db	188
   273  00FE63  BE                 	db	190
   274  00FE64  4C                 	db	76
   275  00FE65  6B                 	db	107
   276  00FE66  6E                 	db	110
   277  00FE67  4E                 	db	78
   278  00FE68  03                 	db	3
   279  00FE69  15                 	db	21
   280  00FE6A  50                 	db	80
   281  00FE6B  79                 	db	121
   282  00FE6C  AD                 	db	173
   283  00FE6D  60                 	db	96
   284  00FE6E  F3                 	db	243
   285  00FE6F  49                 	db	73
   286  00FE70  71                 	db	113
   287  00FE71                     __end_of__powers_:
   288                           	opt stack 0
   289  00FE71                     log@coeff:
   290                           	opt stack 0
   291  00FE71  00                 	db	0
   292  00FE72  00                 	db	0
   293  00FE73  00                 	db	0
   294  00FE74  00                 	db	0
   295  00FE75  80                 	db	128
   296  00FE76  3F                 	db	63
   297  00FE77  F0                 	db	240
   298  00FE78  FF                 	db	255
   299  00FE79  BE                 	db	190
   300  00FE7A  E2                 	db	226
   301  00FE7B  A9                 	db	169
   302  00FE7C  3E                 	db	62
   303  00FE7D  83                 	db	131
   304  00FE7E  76                 	db	118
   305  00FE7F  BE                 	db	190
   306  00FE80  AE                 	db	174
   307  00FE81  2B                 	db	43
   308  00FE82  3E                 	db	62
   309  00FE83  3C                 	db	60
   310  00FE84  C3                 	db	195
   311  00FE85  BD                 	db	189
   312  00FE86  D2                 	db	210
   313  00FE87  13                 	db	19
   314  00FE88  3D                 	db	61
   315  00FE89  78                 	db	120
   316  00FE8A  D3                 	db	211
   317  00FE8B  BB                 	db	187
   318  00FE8C                     __end_oflog@coeff:
   319                           	opt stack 0
   320  0000                     _ADRES	set	4035
   321  0000                     _ADCON0bits	set	4034
   322  0000                     _INTCON2bits	set	4081
   323  0000                     _INTCONbits	set	4082
   324  0000                     _LATA	set	3977
   325  0000                     _LATB	set	3978
   326  0000                     _LATC	set	3979
   327  0000                     _OSCCON	set	4051
   328  0000                     _PIE1bits	set	3997
   329  0000                     _PIR1bits	set	3998
   330  0000                     _PORTA	set	3968
   331  0000                     _PORTB	set	3969
   332  0000                     _PORTBbits	set	3969
   333  0000                     _PORTC	set	3970
   334  0000                     _RCREG	set	4014
   335  0000                     _RCSTA	set	4011
   336  0000                     _RCSTAbits	set	4011
   337  0000                     _SPBRG	set	4015
   338  0000                     _SPBRGH	set	4016
   339  0000                     _SSPADD	set	4040
   340  0000                     _SSPBUF	set	4041
   341  0000                     _SSPCON1	set	4038
   342  0000                     _SSPCON1bits	set	4038
   343  0000                     _SSPCON2	set	4037
   344  0000                     _SSPCON2bits	set	4037
   345  0000                     _SSPSTAT	set	4039
   346  0000                     _SSPSTATbits	set	4039
   347  0000                     _T2CON	set	4042
   348  0000                     _T2CONbits	set	4042
   349  0000                     _T3CON	set	4017
   350  0000                     _T3CONbits	set	4017
   351  0000                     _TMR2	set	4044
   352  0000                     _TMR3H	set	4019
   353  0000                     _TMR3L	set	4018
   354  0000                     _TRISA	set	3986
   355  0000                     _TRISB	set	3987
   356  0000                     _TRISBbits	set	3987
   357  0000                     _TRISC	set	3988
   358  0000                     _TRISCbits	set	3988
   359  0000                     _TXREG	set	4013
   360  0000                     _TXSTA	set	4012
   361  0000                     _TXSTAbits	set	4012
   362  0000                     _ADFM	set	32263
   363  0000                     _ADON	set	32272
   364  0000                     _DONE	set	32273
   365  0000                     _GIE	set	32663
   366  0000                     _GO	set	32273
   367  0000                     _INT0IF	set	32657
   368  0000                     _PEIE	set	32662
   369  0000                     _RBIE	set	32659
   370  0000                     _RBIP	set	32648
   371  0000                     _RCIF	set	31989
   372  0000                     _TMR2IE	set	31977
   373  0000                     _TMR2IF	set	31985
   374  0000                     _TMR2ON	set	32338
   375  0000                     _TMR3IE	set	32001
   376  0000                     _TMR3IF	set	32009
   377  00FE8C                     STR_8:
   378  00FE8C  43                 	db	67	;'C'
   379  00FE8D  68                 	db	104	;'h'
   380  00FE8E  65                 	db	101	;'e'
   381  00FE8F  63                 	db	99	;'c'
   382  00FE90  6B                 	db	107	;'k'
   383  00FE91  73                 	db	115	;'s'
   384  00FE92  75                 	db	117	;'u'
   385  00FE93  6D                 	db	109	;'m'
   386  00FE94  20                 	db	32
   387  00FE95  45                 	db	69	;'E'
   388  00FE96  72                 	db	114	;'r'
   389  00FE97  72                 	db	114	;'r'
   390  00FE98  6F                 	db	111	;'o'
   391  00FE99  72                 	db	114	;'r'
   392  00FE9A  21                 	db	33
   393  00FE9B  20                 	db	32
   394  00FE9C  20                 	db	32
   395  00FE9D  20                 	db	32
   396  00FE9E  54                 	db	84	;'T'
   397  00FE9F  72                 	db	114	;'r'
   398  00FEA0  79                 	db	121	;'y'
   399  00FEA1  69                 	db	105	;'i'
   400  00FEA2  6E                 	db	110	;'n'
   401  00FEA3  67                 	db	103	;'g'
   402  00FEA4  20                 	db	32
   403  00FEA5  41                 	db	65	;'A'
   404  00FEA6  67                 	db	103	;'g'
   405  00FEA7  61                 	db	97	;'a'
   406  00FEA8  69                 	db	105	;'i'
   407  00FEA9  6E                 	db	110	;'n'
   408  00FEAA  20                 	db	32
   409  00FEAB  2E                 	db	46
   410  00FEAC  2E                 	db	46
   411  00FEAD  2E                 	db	46
   412  00FEAE  20                 	db	32
   413  00FEAF  00                 	db	0
   414  00FEB0                     STR_15:
   415  00FEB0  4E                 	db	78	;'N'
   416  00FEB1  6F                 	db	111	;'o'
   417  00FEB2  20                 	db	32
   418  00FEB3  72                 	db	114	;'r'
   419  00FEB4  65                 	db	101	;'e'
   420  00FEB5  73                 	db	115	;'s'
   421  00FEB6  70                 	db	112	;'p'
   422  00FEB7  6F                 	db	111	;'o'
   423  00FEB8  6E                 	db	110	;'n'
   424  00FEB9  73                 	db	115	;'s'
   425  00FEBA  65                 	db	101	;'e'
   426  00FEBB  20                 	db	32
   427  00FEBC  20                 	db	32
   428  00FEBD  66                 	db	102	;'f'
   429  00FEBE  72                 	db	114	;'r'
   430  00FEBF  6F                 	db	111	;'o'
   431  00FEC0  6D                 	db	109	;'m'
   432  00FEC1  20                 	db	32
   433  00FEC2  74                 	db	116	;'t'
   434  00FEC3  68                 	db	104	;'h'
   435  00FEC4  65                 	db	101	;'e'
   436  00FEC5  20                 	db	32
   437  00FEC6  73                 	db	115	;'s'
   438  00FEC7  65                 	db	101	;'e'
   439  00FEC8  6E                 	db	110	;'n'
   440  00FEC9  73                 	db	115	;'s'
   441  00FECA  6F                 	db	111	;'o'
   442  00FECB  72                 	db	114	;'r'
   443  00FECC  20                 	db	32
   444  00FECD  44                 	db	68	;'D'
   445  00FECE  48                 	db	72	;'H'
   446  00FECF  54                 	db	84	;'T'
   447  00FED0  32                 	db	50	;'2'
   448  00FED1  32                 	db	50	;'2'
   449  00FED2  00                 	db	0
   450  00FED3                     STR_4:
   451  00FED3  44                 	db	68	;'D'
   452  00FED4  41                 	db	65	;'A'
   453  00FED5  54                 	db	84	;'T'
   454  00FED6  41                 	db	65	;'A'
   455  00FED7  20                 	db	32
   456  00FED8  41                 	db	65	;'A'
   457  00FED9  4E                 	db	78	;'N'
   458  00FEDA  41                 	db	65	;'A'
   459  00FEDB  4C                 	db	76	;'L'
   460  00FEDC  4F                 	db	79	;'O'
   461  00FEDD  47                 	db	71	;'G'
   462  00FEDE  20                 	db	32
   463  00FEDF  3A                 	db	58	;':'
   464  00FEE0  54                 	db	84	;'T'
   465  00FEE1  65                 	db	101	;'e'
   466  00FEE2  6D                 	db	109	;'m'
   467  00FEE3  70                 	db	112	;'p'
   468  00FEE4  65                 	db	101	;'e'
   469  00FEE5  72                 	db	114	;'r'
   470  00FEE6  61                 	db	97	;'a'
   471  00FEE7  74                 	db	116	;'t'
   472  00FEE8  75                 	db	117	;'u'
   473  00FEE9  72                 	db	114	;'r'
   474  00FEEA  65                 	db	101	;'e'
   475  00FEEB  20                 	db	32
   476  00FEEC  3D                 	db	61	;'='
   477  00FEED  20                 	db	32
   478  00FEEE  25                 	db	37
   479  00FEEF  2E                 	db	46
   480  00FEF0  31                 	db	49	;'1'
   481  00FEF1  66                 	db	102	;'f'
   482  00FEF2  20                 	db	32
   483  00FEF3  43                 	db	67	;'C'
   484  00FEF4  00                 	db	0
   485  00FEF5                     STR_5:
   486  00FEF5  44                 	db	68	;'D'
   487  00FEF6  41                 	db	65	;'A'
   488  00FEF7  54                 	db	84	;'T'
   489  00FEF8  41                 	db	65	;'A'
   490  00FEF9  20                 	db	32
   491  00FEFA  44                 	db	68	;'D'
   492  00FEFB  48                 	db	72	;'H'
   493  00FEFC  54                 	db	84	;'T'
   494  00FEFD  32                 	db	50	;'2'
   495  00FEFE  32                 	db	50	;'2'
   496  00FEFF  20                 	db	32
   497  00FF00  3A                 	db	58	;':'
   498  00FF01  54                 	db	84	;'T'
   499  00FF02  65                 	db	101	;'e'
   500  00FF03  6D                 	db	109	;'m'
   501  00FF04  70                 	db	112	;'p'
   502  00FF05  65                 	db	101	;'e'
   503  00FF06  72                 	db	114	;'r'
   504  00FF07  61                 	db	97	;'a'
   505  00FF08  74                 	db	116	;'t'
   506  00FF09  75                 	db	117	;'u'
   507  00FF0A  72                 	db	114	;'r'
   508  00FF0B  65                 	db	101	;'e'
   509  00FF0C  20                 	db	32
   510  00FF0D  3D                 	db	61	;'='
   511  00FF0E  20                 	db	32
   512  00FF0F  2D                 	db	45
   513  00FF10  25                 	db	37
   514  00FF11  2E                 	db	46
   515  00FF12  31                 	db	49	;'1'
   516  00FF13  66                 	db	102	;'f'
   517  00FF14  20                 	db	32
   518  00FF15  43                 	db	67	;'C'
   519  00FF16  00                 	db	0
   520  00FF17                     STR_6:
   521  00FF17  44                 	db	68	;'D'
   522  00FF18  41                 	db	65	;'A'
   523  00FF19  54                 	db	84	;'T'
   524  00FF1A  41                 	db	65	;'A'
   525  00FF1B  20                 	db	32
   526  00FF1C  44                 	db	68	;'D'
   527  00FF1D  48                 	db	72	;'H'
   528  00FF1E  54                 	db	84	;'T'
   529  00FF1F  32                 	db	50	;'2'
   530  00FF20  32                 	db	50	;'2'
   531  00FF21  20                 	db	32
   532  00FF22  3A                 	db	58	;':'
   533  00FF23  54                 	db	84	;'T'
   534  00FF24  65                 	db	101	;'e'
   535  00FF25  6D                 	db	109	;'m'
   536  00FF26  70                 	db	112	;'p'
   537  00FF27  65                 	db	101	;'e'
   538  00FF28  72                 	db	114	;'r'
   539  00FF29  61                 	db	97	;'a'
   540  00FF2A  74                 	db	116	;'t'
   541  00FF2B  75                 	db	117	;'u'
   542  00FF2C  72                 	db	114	;'r'
   543  00FF2D  65                 	db	101	;'e'
   544  00FF2E  20                 	db	32
   545  00FF2F  3D                 	db	61	;'='
   546  00FF30  20                 	db	32
   547  00FF31  25                 	db	37
   548  00FF32  2E                 	db	46
   549  00FF33  31                 	db	49	;'1'
   550  00FF34  66                 	db	102	;'f'
   551  00FF35  20                 	db	32
   552  00FF36  43                 	db	67	;'C'
   553  00FF37  00                 	db	0
   554  00FF38                     STR_2:
   555  00FF38  44                 	db	68	;'D'
   556  00FF39  41                 	db	65	;'A'
   557  00FF3A  54                 	db	84	;'T'
   558  00FF3B  41                 	db	65	;'A'
   559  00FF3C  20                 	db	32
   560  00FF3D  41                 	db	65	;'A'
   561  00FF3E  4E                 	db	78	;'N'
   562  00FF3F  41                 	db	65	;'A'
   563  00FF40  4C                 	db	76	;'L'
   564  00FF41  4F                 	db	79	;'O'
   565  00FF42  47                 	db	71	;'G'
   566  00FF43  20                 	db	32
   567  00FF44  3A                 	db	58	;':'
   568  00FF45  48                 	db	72	;'H'
   569  00FF46  75                 	db	117	;'u'
   570  00FF47  6D                 	db	109	;'m'
   571  00FF48  65                 	db	101	;'e'
   572  00FF49  64                 	db	100	;'d'
   573  00FF4A  61                 	db	97	;'a'
   574  00FF4B  64                 	db	100	;'d'
   575  00FF4C  20                 	db	32
   576  00FF4D  54                 	db	84	;'T'
   577  00FF4E  49                 	db	73	;'I'
   578  00FF4F  45                 	db	69	;'E'
   579  00FF50  52                 	db	82	;'R'
   580  00FF51  52                 	db	82	;'R'
   581  00FF52  41                 	db	65	;'A'
   582  00FF53  20                 	db	32
   583  00FF54  3D                 	db	61	;'='
   584  00FF55  20                 	db	32
   585  00FF56  25                 	db	37
   586  00FF57  64                 	db	100	;'d'
   587  00FF58  00                 	db	0
   588  00FF59                     STR_7:
   589  00FF59  44                 	db	68	;'D'
   590  00FF5A  41                 	db	65	;'A'
   591  00FF5B  54                 	db	84	;'T'
   592  00FF5C  41                 	db	65	;'A'
   593  00FF5D  20                 	db	32
   594  00FF5E  44                 	db	68	;'D'
   595  00FF5F  48                 	db	72	;'H'
   596  00FF60  54                 	db	84	;'T'
   597  00FF61  32                 	db	50	;'2'
   598  00FF62  32                 	db	50	;'2'
   599  00FF63  20                 	db	32
   600  00FF64  3A                 	db	58	;':'
   601  00FF65  48                 	db	72	;'H'
   602  00FF66  75                 	db	117	;'u'
   603  00FF67  6D                 	db	109	;'m'
   604  00FF68  69                 	db	105	;'i'
   605  00FF69  64                 	db	100	;'d'
   606  00FF6A  69                 	db	105	;'i'
   607  00FF6B  74                 	db	116	;'t'
   608  00FF6C  79                 	db	121	;'y'
   609  00FF6D  20                 	db	32
   610  00FF6E  3D                 	db	61	;'='
   611  00FF6F  20                 	db	32
   612  00FF70  25                 	db	37
   613  00FF71  2E                 	db	46
   614  00FF72  31                 	db	49	;'1'
   615  00FF73  66                 	db	102	;'f'
   616  00FF74  20                 	db	32
   617  00FF75  25                 	db	37
   618  00FF76  25                 	db	37
   619  00FF77  00                 	db	0
   620  00FF78                     STR_9:
   621  00FF78  44                 	db	68	;'D'
   622  00FF79  41                 	db	65	;'A'
   623  00FF7A  54                 	db	84	;'T'
   624  00FF7B  41                 	db	65	;'A'
   625  00FF7C  20                 	db	32
   626  00FF7D  49                 	db	73	;'I'
   627  00FF7E  32                 	db	50	;'2'
   628  00FF7F  43                 	db	67	;'C'
   629  00FF80  20                 	db	32
   630  00FF81  3A                 	db	58	;':'
   631  00FF82  54                 	db	84	;'T'
   632  00FF83  65                 	db	101	;'e'
   633  00FF84  6D                 	db	109	;'m'
   634  00FF85  70                 	db	112	;'p'
   635  00FF86  65                 	db	101	;'e'
   636  00FF87  72                 	db	114	;'r'
   637  00FF88  61                 	db	97	;'a'
   638  00FF89  74                 	db	116	;'t'
   639  00FF8A  75                 	db	117	;'u'
   640  00FF8B  72                 	db	114	;'r'
   641  00FF8C  65                 	db	101	;'e'
   642  00FF8D  20                 	db	32
   643  00FF8E  3D                 	db	61	;'='
   644  00FF8F  20                 	db	32
   645  00FF90  25                 	db	37
   646  00FF91  2E                 	db	46
   647  00FF92  31                 	db	49	;'1'
   648  00FF93  66                 	db	102	;'f'
   649  00FF94  20                 	db	32
   650  00FF95  43                 	db	67	;'C'
   651  00FF96  00                 	db	0
   652  00FF97                     STR_11:
   653  00FF97  44                 	db	68	;'D'
   654  00FF98  41                 	db	65	;'A'
   655  00FF99  54                 	db	84	;'T'
   656  00FF9A  41                 	db	65	;'A'
   657  00FF9B  20                 	db	32
   658  00FF9C  4C                 	db	76	;'L'
   659  00FF9D  44                 	db	68	;'D'
   660  00FF9E  52                 	db	82	;'R'
   661  00FF9F  20                 	db	32
   662  00FFA0  3A                 	db	58	;':'
   663  00FFA1  56                 	db	86	;'V'
   664  00FFA2  61                 	db	97	;'a'
   665  00FFA3  6C                 	db	108	;'l'
   666  00FFA4  6F                 	db	111	;'o'
   667  00FFA5  72                 	db	114	;'r'
   668  00FFA6  20                 	db	32
   669  00FFA7  41                 	db	65	;'A'
   670  00FFA8  6E                 	db	110	;'n'
   671  00FFA9  61                 	db	97	;'a'
   672  00FFAA  6C                 	db	108	;'l'
   673  00FFAB  6F                 	db	111	;'o'
   674  00FFAC  67                 	db	103	;'g'
   675  00FFAD  20                 	db	32
   676  00FFAE  3D                 	db	61	;'='
   677  00FFAF  20                 	db	32
   678  00FFB0  25                 	db	37
   679  00FFB1  64                 	db	100	;'d'
   680  00FFB2  00                 	db	0
   681  00FFB3                     STR_1:
   682  00FFB3  41                 	db	65	;'A'
   683  00FFB4  6E                 	db	110	;'n'
   684  00FFB5  61                 	db	97	;'a'
   685  00FFB6  6C                 	db	108	;'l'
   686  00FFB7  6F                 	db	111	;'o'
   687  00FFB8  67                 	db	103	;'g'
   688  00FFB9  20                 	db	32
   689  00FFBA  4D                 	db	77	;'M'
   690  00FFBB  6F                 	db	111	;'o'
   691  00FFBC  64                 	db	100	;'d'
   692  00FFBD  65                 	db	101	;'e'
   693  00FFBE  20                 	db	32
   694  00FFBF  41                 	db	65	;'A'
   695  00FFC0  63                 	db	99	;'c'
   696  00FFC1  71                 	db	113	;'q'
   697  00FFC2  75                 	db	117	;'u'
   698  00FFC3  69                 	db	105	;'i'
   699  00FFC4  72                 	db	114	;'r'
   700  00FFC5  69                 	db	105	;'i'
   701  00FFC6  6E                 	db	110	;'n'
   702  00FFC7  67                 	db	103	;'g'
   703  00FFC8  00                 	db	0
   704  00FFC9                     STR_3:
   705  00FFC9  49                 	db	73	;'I'
   706  00FFCA  32                 	db	50	;'2'
   707  00FFCB  43                 	db	67	;'C'
   708  00FFCC  20                 	db	32
   709  00FFCD  4D                 	db	77	;'M'
   710  00FFCE  6F                 	db	111	;'o'
   711  00FFCF  64                 	db	100	;'d'
   712  00FFD0  65                 	db	101	;'e'
   713  00FFD1  20                 	db	32
   714  00FFD2  41                 	db	65	;'A'
   715  00FFD3  63                 	db	99	;'c'
   716  00FFD4  71                 	db	113	;'q'
   717  00FFD5  75                 	db	117	;'u'
   718  00FFD6  69                 	db	105	;'i'
   719  00FFD7  72                 	db	114	;'r'
   720  00FFD8  69                 	db	105	;'i'
   721  00FFD9  6E                 	db	110	;'n'
   722  00FFDA  67                 	db	103	;'g'
   723  00FFDB  00                 	db	0
   724  00FFDC                     STR_13:
   725  00FFDC  49                 	db	73	;'I'
   726  00FFDD  64                 	db	100	;'d'
   727  00FFDE  6C                 	db	108	;'l'
   728  00FFDF  65                 	db	101	;'e'
   729  00FFE0  20                 	db	32
   730  00FFE1  6D                 	db	109	;'m'
   731  00FFE2  6F                 	db	111	;'o'
   732  00FFE3  64                 	db	100	;'d'
   733  00FFE4  65                 	db	101	;'e'
   734  00FFE5  20                 	db	32
   735  00FFE6  4F                 	db	79	;'O'
   736  00FFE7  4E                 	db	78	;'N'
   737  00FFE8  00                 	db	0
   738  00FFE9                     STR_10:
   739  00FFE9  4C                 	db	76	;'L'
   740  00FFEA  44                 	db	68	;'D'
   741  00FFEB  52                 	db	82	;'R'
   742  00FFEC  20                 	db	32
   743  00FFED  6D                 	db	109	;'m'
   744  00FFEE  6F                 	db	111	;'o'
   745  00FFEF  64                 	db	100	;'d'
   746  00FFF0  65                 	db	101	;'e'
   747  00FFF1  20                 	db	32
   748  00FFF2  4F                 	db	79	;'O'
   749  00FFF3  4E                 	db	78	;'N'
   750  00FFF4  00                 	db	0
   751  00FFF5                     STR_12:
   752  00FFF5  53                 	db	83	;'S'
   753  00FFF6  6C                 	db	108	;'l'
   754  00FFF7  65                 	db	101	;'e'
   755  00FFF8  65                 	db	101	;'e'
   756  00FFF9  70                 	db	112	;'p'
   757  00FFFA  20                 	db	32
   758  00FFFB  38                 	db	56	;'8'
   759  00FFFC  73                 	db	115	;'s'
   760  00FFFD  00                 	db	0
   761  0000                     
   762                           ; #config settings
   763  00FFFE  00                 	db	0	; dummy byte at the end
   764  0000                     
   765                           	psect	cinit
   766  002878                     __pcinit:
   767                           	opt stack 0
   768  002878                     start_initialization:
   769                           	opt stack 0
   770  002878                     __initialization:
   771                           	opt stack 0
   772                           
   773                           ; Clear objects allocated to BANK0 (66 bytes)
   774  002878  EE00  F0A4         	lfsr	0,__pbssBANK0
   775  00287C  0E42               	movlw	66
   776  00287E                     clear_0:
   777  00287E  6AEE               	clrf	postinc0,c
   778  002880  06E8               	decf	wreg,f,c
   779  002882  E1FD               	bnz	clear_0
   780                           
   781                           ; Clear objects allocated to COMRAM (14 bytes)
   782  002884  EE00  F041         	lfsr	0,__pbssCOMRAM
   783  002888  0E0E               	movlw	14
   784  00288A                     clear_1:
   785  00288A  6AEE               	clrf	postinc0,c
   786  00288C  06E8               	decf	wreg,f,c
   787  00288E  E1FD               	bnz	clear_1
   788                           
   789                           ; Initialize objects allocated to BANK1 (40 bytes)
   790                           ; load TBLPTR registers with __pidataBANK1
   791  002890  0E6C               	movlw	low __pidataBANK1
   792  002892  6EF6               	movwf	tblptrl,c
   793  002894  0E2C               	movlw	high __pidataBANK1
   794  002896  6EF7               	movwf	tblptrh,c
   795  002898  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   796  00289A  6EF8               	movwf	tblptru,c
   797  00289C  EE01  F000         	lfsr	0,__pdataBANK1
   798  0028A0  EE10 F028          	lfsr	1,40
   799  0028A4                     copy_data0:
   800  0028A4  0009               	tblrd		*+
   801  0028A6  CFF5 FFEE          	movff	tablat,postinc0
   802  0028AA  50E5               	movf	postdec1,w,c
   803  0028AC  50E1               	movf	fsr1l,w,c
   804  0028AE  E1FA               	bnz	copy_data0
   805                           
   806                           ; Initialize objects allocated to BANK0 (25 bytes)
   807                           ; load TBLPTR registers with __pidataBANK0
   808  0028B0  0EFE               	movlw	low __pidataBANK0
   809  0028B2  6EF6               	movwf	tblptrl,c
   810  0028B4  0E2D               	movlw	high __pidataBANK0
   811  0028B6  6EF7               	movwf	tblptrh,c
   812  0028B8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   813  0028BA  6EF8               	movwf	tblptru,c
   814  0028BC  EE00  F0E6         	lfsr	0,__pdataBANK0
   815  0028C0  EE10 F019          	lfsr	1,25
   816  0028C4                     copy_data1:
   817  0028C4  0009               	tblrd		*+
   818  0028C6  CFF5 FFEE          	movff	tablat,postinc0
   819  0028CA  50E5               	movf	postdec1,w,c
   820  0028CC  50E1               	movf	fsr1l,w,c
   821  0028CE  E1FA               	bnz	copy_data1
   822                           
   823                           ; Initialize objects allocated to COMRAM (1 bytes)
   824                           ; load TBLPTR registers with __pidataCOMRAM
   825  0028D0  0ED0               	movlw	low __pidataCOMRAM
   826  0028D2  6EF6               	movwf	tblptrl,c
   827  0028D4  0E2E               	movlw	high __pidataCOMRAM
   828  0028D6  6EF7               	movwf	tblptrh,c
   829  0028D8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   830  0028DA  6EF8               	movwf	tblptru,c
   831  0028DC  0009               	tblrd		*+	;fetch initializer
   832  0028DE  CFF5 F04F          	movff	tablat,__pdataCOMRAM
   833  0028E2                     end_of_initialization:
   834                           	opt stack 0
   835  0028E2                     __end_of__initialization:
   836                           	opt stack 0
   837  0028E2  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   838  0028E4  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   839  0028E6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   840  0028E8  6EF8               	movwf	tblptru,c
   841  0028EA  0100               	movlb	0
   842  0028EC  EF4A  F016         	goto	_main	;jump to C main() function
   843                           tblptru	equ	0xFF8
   844                           tblptrh	equ	0xFF7
   845                           tblptrl	equ	0xFF6
   846                           tablat	equ	0xFF5
   847                           postinc0	equ	0xFEE
   848                           wreg	equ	0xFE8
   849                           postdec1	equ	0xFE5
   850                           fsr1l	equ	0xFE1
   851                           
   852                           	psect	bssCOMRAM
   853  000041                     __pbssCOMRAM:
   854                           	opt stack 0
   855  000041                     _TOUT:
   856                           	opt stack 0
   857  000041                     	ds	2
   858  000043                     _Trigger:
   859                           	opt stack 0
   860  000043                     	ds	2
   861  000045                     _check:
   862                           	opt stack 0
   863  000045                     	ds	2
   864  000047                     _i:
   865                           	opt stack 0
   866  000047                     	ds	2
   867  000049                     _temp:
   868                           	opt stack 0
   869  000049                     	ds	2
   870  00004B                     _CharRX:
   871                           	opt stack 0
   872  00004B                     	ds	1
   873  00004C                     _USART_Status:
   874                           	opt stack 0
   875  00004C                     	ds	1
   876  00004D                     _dataI2C_Hum:
   877                           	opt stack 0
   878  00004D                     	ds	1
   879  00004E                     _dataI2C_Tem:
   880                           	opt stack 0
   881  00004E                     	ds	1
   882                           tblptru	equ	0xFF8
   883                           tblptrh	equ	0xFF7
   884                           tblptrl	equ	0xFF6
   885                           tablat	equ	0xFF5
   886                           postinc0	equ	0xFEE
   887                           wreg	equ	0xFE8
   888                           postdec1	equ	0xFE5
   889                           fsr1l	equ	0xFE1
   890                           
   891                           	psect	dataCOMRAM
   892  00004F                     __pdataCOMRAM:
   893                           	opt stack 0
   894  00004F                     _present_state:
   895                           	opt stack 0
   896  00004F                     	ds	1
   897                           tblptru	equ	0xFF8
   898                           tblptrh	equ	0xFF7
   899                           tblptrl	equ	0xFF6
   900                           tablat	equ	0xFF5
   901                           postinc0	equ	0xFEE
   902                           wreg	equ	0xFE8
   903                           postdec1	equ	0xFE5
   904                           fsr1l	equ	0xFE1
   905                           
   906                           	psect	bssBANK0
   907  0000A4                     __pbssBANK0:
   908                           	opt stack 0
   909  0000A4                     _I2C_Hum:
   910                           	opt stack 0
   911  0000A4                     	ds	4
   912  0000A8                     _I2C_Tem:
   913                           	opt stack 0
   914  0000A8                     	ds	4
   915  0000AC                     _I2C_HumFormula:
   916                           	opt stack 0
   917  0000AC                     	ds	3
   918  0000AF                     _I2C_TemFormula:
   919                           	opt stack 0
   920  0000AF                     	ds	3
   921  0000B2                     _Value_pot:
   922                           	opt stack 0
   923  0000B2                     	ds	3
   924  0000B5                     _Value_rhdht22:
   925                           	opt stack 0
   926  0000B5                     	ds	3
   927  0000B8                     _Value_tempdht22:
   928                           	opt stack 0
   929  0000B8                     	ds	3
   930  0000BB                     ADC@Value_AD:
   931                           	opt stack 0
   932  0000BB                     	ds	2
   933  0000BD                     _CheckSum:
   934                           	opt stack 0
   935  0000BD                     	ds	2
   936  0000BF                     _I2C_dev:
   937                           	opt stack 0
   938  0000BF                     	ds	2
   939  0000C1                     _I2C_manu:
   940                           	opt stack 0
   941  0000C1                     	ds	2
   942  0000C3                     _RH_Byte1:
   943                           	opt stack 0
   944  0000C3                     	ds	2
   945  0000C5                     _RH_Byte2:
   946                           	opt stack 0
   947  0000C5                     	ds	2
   948  0000C7                     _SerialInterrupt_flag:
   949                           	opt stack 0
   950  0000C7                     	ds	2
   951  0000C9                     _T_Byte1:
   952                           	opt stack 0
   953  0000C9                     	ds	2
   954  0000CB                     _T_Byte2:
   955                           	opt stack 0
   956  0000CB                     	ds	2
   957  0000CD                     	ds	2
   958  0000CF                     _Value_AN0:
   959                           	opt stack 0
   960  0000CF                     	ds	2
   961  0000D1                     _Value_AN9:
   962                           	opt stack 0
   963  0000D1                     	ds	2
   964  0000D3                     _errno:
   965                           	opt stack 0
   966  0000D3                     	ds	2
   967  0000D5                     _postscaler:
   968                           	opt stack 0
   969  0000D5                     	ds	2
   970  0000D7                     _postscaler30s:
   971                           	opt stack 0
   972  0000D7                     	ds	2
   973  0000D9                     _postscalerflag:
   974                           	opt stack 0
   975  0000D9                     	ds	2
   976  0000DB                     _postscalerflag30s:
   977                           	opt stack 0
   978  0000DB                     	ds	2
   979  0000DD                     _rh:
   980                           	opt stack 0
   981  0000DD                     	ds	2
   982  0000DF                     _sign:
   983                           	opt stack 0
   984  0000DF                     	ds	2
   985  0000E1                     _Value_temp:
   986                           	opt stack 0
   987  0000E1                     	ds	3
   988  0000E4                     _Value_AN1:
   989                           	opt stack 0
   990  0000E4                     	ds	2
   991                           tblptru	equ	0xFF8
   992                           tblptrh	equ	0xFF7
   993                           tblptrl	equ	0xFF6
   994                           tablat	equ	0xFF5
   995                           postinc0	equ	0xFEE
   996                           wreg	equ	0xFE8
   997                           postdec1	equ	0xFE5
   998                           fsr1l	equ	0xFE1
   999                           
  1000                           	psect	dataBANK0
  1001  0000E6                     __pdataBANK0:
  1002                           	opt stack 0
  1003  0000E6                     	ds	3
  1004  0000E9                     	ds	3
  1005  0000EC                     	ds	3
  1006  0000EF                     _postscaler30smax:
  1007                           	opt stack 0
  1008  0000EF                     	ds	2
  1009  0000F1                     _postscalermax:
  1010                           	opt stack 0
  1011  0000F1                     	ds	2
  1012  0000F3                     _CharTX:
  1013                           	opt stack 0
  1014  0000F3                     	ds	12
  1015                           tblptru	equ	0xFF8
  1016                           tblptrh	equ	0xFF7
  1017                           tblptrl	equ	0xFF6
  1018                           tablat	equ	0xFF5
  1019                           postinc0	equ	0xFEE
  1020                           wreg	equ	0xFE8
  1021                           postdec1	equ	0xFE5
  1022                           fsr1l	equ	0xFE1
  1023                           
  1024                           	psect	dataBANK1
  1025  000100                     __pdataBANK1:
  1026                           	opt stack 0
  1027  000100                     _message1:
  1028                           	opt stack 0
  1029  000100                     	ds	14
  1030  00010E                     _message2:
  1031                           	opt stack 0
  1032  00010E                     	ds	14
  1033  00011C                     _CharTX2:
  1034                           	opt stack 0
  1035  00011C                     	ds	12
  1036                           tblptru	equ	0xFF8
  1037                           tblptrh	equ	0xFF7
  1038                           tblptrl	equ	0xFF6
  1039                           tablat	equ	0xFF5
  1040                           postinc0	equ	0xFEE
  1041                           wreg	equ	0xFE8
  1042                           postdec1	equ	0xFE5
  1043                           fsr1l	equ	0xFE1
  1044                           
  1045                           	psect	cstackBANK1
  1046  000128                     __pcstackBANK1:
  1047                           	opt stack 0
  1048  000128                     ??_output_logic:
  1049                           
  1050                           ; 0 bytes @ 0x0
  1051  000128                     	ds	2
  1052  00012A                     output_logic@error:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x2
  1056  00012A                     	ds	1
  1057  00012B                     _output_logic$2539:
  1058                           	opt stack 0
  1059                           
  1060                           ; 3 bytes @ 0x3
  1061  00012B                     	ds	3
  1062  00012E                     _output_logic$2540:
  1063                           	opt stack 0
  1064                           
  1065                           ; 3 bytes @ 0x6
  1066  00012E                     	ds	3
  1067  000131                     _output_logic$2541:
  1068                           	opt stack 0
  1069                           
  1070                           ; 3 bytes @ 0x9
  1071  000131                     	ds	3
  1072                           tblptru	equ	0xFF8
  1073                           tblptrh	equ	0xFF7
  1074                           tblptrl	equ	0xFF6
  1075                           tablat	equ	0xFF5
  1076                           postinc0	equ	0xFEE
  1077                           wreg	equ	0xFE8
  1078                           postdec1	equ	0xFE5
  1079                           fsr1l	equ	0xFE1
  1080                           
  1081                           	psect	cstackBANK0
  1082  000060                     __pcstackBANK0:
  1083                           	opt stack 0
  1084  000060                     ___ftmul@exp:
  1085                           	opt stack 0
  1086                           
  1087                           ; 1 bytes @ 0x0
  1088  000060                     	ds	1
  1089  000061                     ___ftmul@f3_as_product:
  1090                           	opt stack 0
  1091                           
  1092                           ; 3 bytes @ 0x1
  1093  000061                     	ds	3
  1094  000064                     ___ftmul@cntr:
  1095                           	opt stack 0
  1096                           
  1097                           ; 1 bytes @ 0x4
  1098  000064                     	ds	1
  1099  000065                     ___ftmul@sign:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x5
  1103  000065                     	ds	1
  1104  000066                     ?_eval_poly:
  1105                           	opt stack 0
  1106  000066                     ?_fround:
  1107                           	opt stack 0
  1108  000066                     ?_scale:
  1109                           	opt stack 0
  1110  000066                     ?___ftneg:
  1111                           	opt stack 0
  1112  000066                     ___ftneg@f1:
  1113                           	opt stack 0
  1114  000066                     eval_poly@x:
  1115                           	opt stack 0
  1116                           
  1117                           ; 3 bytes @ 0x6
  1118  000066                     	ds	3
  1119  000069                     ?_ReadByte_I2C:
  1120                           	opt stack 0
  1121  000069                     ReadByte_I2C@RegisterAddress:
  1122                           	opt stack 0
  1123  000069                     eval_poly@d:
  1124                           	opt stack 0
  1125  000069                     _fround$2543:
  1126                           	opt stack 0
  1127  000069                     _scale$2544:
  1128                           	opt stack 0
  1129                           
  1130                           ; 3 bytes @ 0x9
  1131  000069                     	ds	2
  1132  00006B                     eval_poly@n:
  1133                           	opt stack 0
  1134                           
  1135                           ; 2 bytes @ 0xB
  1136  00006B                     	ds	1
  1137  00006C                     scale@scl:
  1138                           	opt stack 0
  1139  00006C                     ReadByte_I2C@tmp:
  1140                           	opt stack 0
  1141  00006C                     _fround$2542:
  1142                           	opt stack 0
  1143                           
  1144                           ; 3 bytes @ 0xC
  1145  00006C                     	ds	1
  1146  00006D                     ??_eval_poly:
  1147  00006D                     ?___fttol:
  1148                           	opt stack 0
  1149  00006D                     ___fttol@f1:
  1150                           	opt stack 0
  1151                           
  1152                           ; 3 bytes @ 0xD
  1153  00006D                     	ds	1
  1154  00006E                     _ReadByte_I2C$2538:
  1155                           	opt stack 0
  1156                           
  1157                           ; 3 bytes @ 0xE
  1158  00006E                     	ds	1
  1159  00006F                     fround@prec:
  1160                           	opt stack 0
  1161  00006F                     eval_poly@res:
  1162                           	opt stack 0
  1163                           
  1164                           ; 3 bytes @ 0xF
  1165  00006F                     	ds	2
  1166  000071                     ??___fttol:
  1167  000071                     ReadByte_I2C@Temperature:
  1168                           	opt stack 0
  1169                           
  1170                           ; 3 bytes @ 0x11
  1171  000071                     	ds	1
  1172  000072                     ?_log:
  1173                           	opt stack 0
  1174  000072                     log@x:
  1175                           	opt stack 0
  1176                           
  1177                           ; 3 bytes @ 0x12
  1178  000072                     	ds	2
  1179  000074                     ReadByte_I2C@ReadAddressIC:
  1180                           	opt stack 0
  1181                           
  1182                           ; 1 bytes @ 0x14
  1183  000074                     	ds	1
  1184  000075                     ReadByte_I2C@LowerByte:
  1185                           	opt stack 0
  1186  000075                     log@exponent:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x15
  1190  000075                     	ds	1
  1191  000076                     ReadByte_I2C@UpperByte:
  1192                           	opt stack 0
  1193  000076                     ___fttol@sign1:
  1194                           	opt stack 0
  1195                           
  1196                           ; 1 bytes @ 0x16
  1197  000076                     	ds	1
  1198  000077                     ___fttol@lval:
  1199                           	opt stack 0
  1200                           
  1201                           ; 4 bytes @ 0x17
  1202  000077                     	ds	4
  1203  00007B                     ___fttol@exp1:
  1204                           	opt stack 0
  1205                           
  1206                           ; 1 bytes @ 0x1B
  1207  00007B                     	ds	1
  1208  00007C                     ?_sprintf:
  1209                           	opt stack 0
  1210  00007C                     sprintf@sp:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x1C
  1214  00007C                     	ds	2
  1215  00007E                     sprintf@f:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x1E
  1219  00007E                     	ds	5
  1220  000083                     ??_sprintf:
  1221                           
  1222                           ; 0 bytes @ 0x23
  1223  000083                     	ds	6
  1224  000089                     _sprintf$2545:
  1225                           	opt stack 0
  1226                           
  1227                           ; 3 bytes @ 0x29
  1228  000089                     	ds	3
  1229  00008C                     sprintf@cp:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0x2C
  1233  00008C                     	ds	2
  1234  00008E                     sprintf@len:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x2E
  1238  00008E                     	ds	2
  1239  000090                     sprintf@ap:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x30
  1243  000090                     	ds	2
  1244  000092                     sprintf@flag:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x32
  1248  000092                     	ds	2
  1249  000094                     sprintf@exp:
  1250                           	opt stack 0
  1251                           
  1252                           ; 2 bytes @ 0x34
  1253  000094                     	ds	2
  1254  000096                     sprintf@tmpval:
  1255                           	opt stack 0
  1256                           
  1257                           ; 4 bytes @ 0x36
  1258  000096                     	ds	4
  1259  00009A                     sprintf@val:
  1260                           	opt stack 0
  1261                           
  1262                           ; 4 bytes @ 0x3A
  1263  00009A                     	ds	4
  1264  00009E                     sprintf@fval:
  1265                           	opt stack 0
  1266                           
  1267                           ; 3 bytes @ 0x3E
  1268  00009E                     	ds	3
  1269  0000A1                     sprintf@prec:
  1270                           	opt stack 0
  1271                           
  1272                           ; 2 bytes @ 0x41
  1273  0000A1                     	ds	2
  1274  0000A3                     sprintf@c:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x43
  1278  0000A3                     	ds	1
  1279                           tblptru	equ	0xFF8
  1280                           tblptrh	equ	0xFF7
  1281                           tblptrl	equ	0xFF6
  1282                           tablat	equ	0xFF5
  1283                           postinc0	equ	0xFEE
  1284                           wreg	equ	0xFE8
  1285                           postdec1	equ	0xFE5
  1286                           fsr1l	equ	0xFE1
  1287                           
  1288                           	psect	cstackCOMRAM
  1289  000001                     __pcstackCOMRAM:
  1290                           	opt stack 0
  1291  000001                     ReadUSART@data:
  1292                           	opt stack 0
  1293                           
  1294                           ; 1 bytes @ 0x0
  1295  000001                     	ds	1
  1296  000002                     ??_IntServe:
  1297                           
  1298                           ; 0 bytes @ 0x1
  1299  000002                     	ds	14
  1300  000010                     ??_IdleI2C:
  1301  000010                     ??_isdigit:
  1302  000010                     ??_start_signal:
  1303  000010                     ?_GetSampleADC:
  1304                           	opt stack 0
  1305  000010                     ?_check_response:
  1306                           	opt stack 0
  1307  000010                     ?_read_byte:
  1308                           	opt stack 0
  1309  000010                     ?___awmod:
  1310                           	opt stack 0
  1311  000010                     ?___ftpack:
  1312                           	opt stack 0
  1313  000010                     ?_frexp:
  1314                           	opt stack 0
  1315  000010                     ?__tdiv_to_l_:
  1316                           	opt stack 0
  1317  000010                     ?__div_to_l_:
  1318                           	opt stack 0
  1319  000010                     ?___lldiv:
  1320                           	opt stack 0
  1321  000010                     state_logic@error:
  1322                           	opt stack 0
  1323  000010                     WriteUSART@data:
  1324                           	opt stack 0
  1325  000010                     OpenI2C@slew:
  1326                           	opt stack 0
  1327  000010                     SelectChannelADC@channel:
  1328                           	opt stack 0
  1329  000010                     OpenUSART@spbrg:
  1330                           	opt stack 0
  1331  000010                     ___awmod@dividend:
  1332                           	opt stack 0
  1333  000010                     __div_to_l_@f1:
  1334                           	opt stack 0
  1335  000010                     ___ftpack@arg:
  1336                           	opt stack 0
  1337  000010                     __tdiv_to_l_@f1:
  1338                           	opt stack 0
  1339  000010                     ___ftge@ff1:
  1340                           	opt stack 0
  1341  000010                     frexp@value:
  1342                           	opt stack 0
  1343  000010                     ___lldiv@dividend:
  1344                           	opt stack 0
  1345                           
  1346                           ; 4 bytes @ 0xF
  1347  000010                     	ds	1
  1348  000011                     OpenI2C@sync_mode:
  1349                           	opt stack 0
  1350  000011                     WriteI2C@data_out:
  1351                           	opt stack 0
  1352  000011                     _isdigit$2134:
  1353                           	opt stack 0
  1354  000011                     putsUSART@data:
  1355                           	opt stack 0
  1356                           
  1357                           ; 2 bytes @ 0x10
  1358  000011                     	ds	1
  1359  000012                     ??_SelectChannelADC:
  1360  000012                     ??_read_byte:
  1361  000012                     OpenUSART@config:
  1362                           	opt stack 0
  1363  000012                     isdigit@c:
  1364                           	opt stack 0
  1365  000012                     ___awmod@divisor:
  1366                           	opt stack 0
  1367                           
  1368                           ; 2 bytes @ 0x11
  1369  000012                     	ds	1
  1370  000013                     ??_putsUSART:
  1371  000013                     ___ftpack@exp:
  1372                           	opt stack 0
  1373  000013                     frexp@eptr:
  1374                           	opt stack 0
  1375  000013                     __div_to_l_@f2:
  1376                           	opt stack 0
  1377  000013                     __tdiv_to_l_@f2:
  1378                           	opt stack 0
  1379  000013                     ___ftge@ff2:
  1380                           	opt stack 0
  1381                           
  1382                           ; 3 bytes @ 0x12
  1383  000013                     	ds	1
  1384  000014                     ___awmod@counter:
  1385                           	opt stack 0
  1386  000014                     ___ftpack@sign:
  1387                           	opt stack 0
  1388  000014                     ___lldiv@divisor:
  1389                           	opt stack 0
  1390                           
  1391                           ; 4 bytes @ 0x13
  1392  000014                     	ds	1
  1393  000015                     ??___ftpack:
  1394  000015                     ??_frexp:
  1395  000015                     ___awmod@sign:
  1396                           	opt stack 0
  1397  000015                     SendStringUSART@text:
  1398                           	opt stack 0
  1399  000015                     read_byte@num:
  1400                           	opt stack 0
  1401                           
  1402                           ; 2 bytes @ 0x14
  1403  000015                     	ds	1
  1404  000016                     ??__tdiv_to_l_:
  1405  000016                     ??___ftge:
  1406  000016                     ?___awdiv:
  1407                           	opt stack 0
  1408  000016                     ___awdiv@dividend:
  1409                           	opt stack 0
  1410  000016                     __div_to_l_@quot:
  1411                           	opt stack 0
  1412                           
  1413                           ; 4 bytes @ 0x15
  1414  000016                     	ds	1
  1415  000017                     
  1416                           ; 0 bytes @ 0x16
  1417  000017                     	ds	1
  1418  000018                     ?___awtoft:
  1419                           	opt stack 0
  1420  000018                     ?___lbtoft:
  1421                           	opt stack 0
  1422  000018                     ?___lltoft:
  1423                           	opt stack 0
  1424  000018                     ?___lwtoft:
  1425                           	opt stack 0
  1426  000018                     ___awdiv@divisor:
  1427                           	opt stack 0
  1428  000018                     ___awtoft@c:
  1429                           	opt stack 0
  1430  000018                     ___lwtoft@c:
  1431                           	opt stack 0
  1432  000018                     ___lldiv@quotient:
  1433                           	opt stack 0
  1434  000018                     ___lltoft@c:
  1435                           	opt stack 0
  1436                           
  1437                           ; 4 bytes @ 0x17
  1438  000018                     	ds	1
  1439  000019                     __tdiv_to_l_@quot:
  1440                           	opt stack 0
  1441                           
  1442                           ; 4 bytes @ 0x18
  1443  000019                     	ds	1
  1444  00001A                     ___awdiv@counter:
  1445                           	opt stack 0
  1446  00001A                     __div_to_l_@cntr:
  1447                           	opt stack 0
  1448                           
  1449                           ; 1 bytes @ 0x19
  1450  00001A                     	ds	1
  1451  00001B                     ___awdiv@sign:
  1452                           	opt stack 0
  1453  00001B                     ___awtoft@sign:
  1454                           	opt stack 0
  1455  00001B                     __div_to_l_@exp1:
  1456                           	opt stack 0
  1457  00001B                     ___lbtoft@c:
  1458                           	opt stack 0
  1459                           
  1460                           ; 1 bytes @ 0x1A
  1461  00001B                     	ds	1
  1462  00001C                     ??___lltoft:
  1463  00001C                     ?___ftdiv:
  1464                           	opt stack 0
  1465  00001C                     ___lldiv@counter:
  1466                           	opt stack 0
  1467  00001C                     ___awdiv@quotient:
  1468                           	opt stack 0
  1469  00001C                     ___ftdiv@f1:
  1470                           	opt stack 0
  1471                           
  1472                           ; 3 bytes @ 0x1B
  1473  00001C                     	ds	1
  1474  00001D                     ?___llmod:
  1475                           	opt stack 0
  1476  00001D                     __tdiv_to_l_@cntr:
  1477                           	opt stack 0
  1478  00001D                     ___llmod@dividend:
  1479                           	opt stack 0
  1480                           
  1481                           ; 4 bytes @ 0x1C
  1482  00001D                     	ds	1
  1483  00001E                     ?___wmul:
  1484                           	opt stack 0
  1485  00001E                     __tdiv_to_l_@exp1:
  1486                           	opt stack 0
  1487  00001E                     ___wmul@multiplier:
  1488                           	opt stack 0
  1489                           
  1490                           ; 2 bytes @ 0x1D
  1491  00001E                     	ds	1
  1492  00001F                     ___ftdiv@f2:
  1493                           	opt stack 0
  1494                           
  1495                           ; 3 bytes @ 0x1E
  1496  00001F                     	ds	1
  1497  000020                     ___lltoft@exp:
  1498                           	opt stack 0
  1499  000020                     ___wmul@multiplicand:
  1500                           	opt stack 0
  1501                           
  1502                           ; 2 bytes @ 0x1F
  1503  000020                     	ds	1
  1504  000021                     ___llmod@divisor:
  1505                           	opt stack 0
  1506                           
  1507                           ; 4 bytes @ 0x20
  1508  000021                     	ds	1
  1509  000022                     ??___ftdiv:
  1510  000022                     ___wmul@product:
  1511                           	opt stack 0
  1512                           
  1513                           ; 2 bytes @ 0x21
  1514  000022                     	ds	3
  1515  000025                     ___ftdiv@cntr:
  1516                           	opt stack 0
  1517  000025                     ___llmod@counter:
  1518                           	opt stack 0
  1519                           
  1520                           ; 1 bytes @ 0x24
  1521  000025                     	ds	1
  1522  000026                     ___ftdiv@f3:
  1523                           	opt stack 0
  1524                           
  1525                           ; 3 bytes @ 0x25
  1526  000026                     	ds	3
  1527  000029                     ___ftdiv@exp:
  1528                           	opt stack 0
  1529                           
  1530                           ; 1 bytes @ 0x28
  1531  000029                     	ds	1
  1532  00002A                     ___ftdiv@sign:
  1533                           	opt stack 0
  1534                           
  1535                           ; 1 bytes @ 0x29
  1536  00002A                     	ds	1
  1537  00002B                     ??_GetDataSensorDHT22:
  1538  00002B                     ?___ftadd:
  1539                           	opt stack 0
  1540  00002B                     ___ftadd@f1:
  1541                           	opt stack 0
  1542                           
  1543                           ; 3 bytes @ 0x2A
  1544  00002B                     	ds	3
  1545  00002E                     ___ftadd@f2:
  1546                           	opt stack 0
  1547                           
  1548                           ; 3 bytes @ 0x2D
  1549  00002E                     	ds	3
  1550  000031                     ??___ftadd:
  1551                           
  1552                           ; 0 bytes @ 0x30
  1553  000031                     	ds	3
  1554  000034                     ___ftadd@sign:
  1555                           	opt stack 0
  1556                           
  1557                           ; 1 bytes @ 0x33
  1558  000034                     	ds	1
  1559  000035                     ___ftadd@exp2:
  1560                           	opt stack 0
  1561                           
  1562                           ; 1 bytes @ 0x34
  1563  000035                     	ds	1
  1564  000036                     ___ftadd@exp1:
  1565                           	opt stack 0
  1566                           
  1567                           ; 1 bytes @ 0x35
  1568  000036                     	ds	1
  1569  000037                     ?___ftmul:
  1570                           	opt stack 0
  1571  000037                     ?___ftsub:
  1572                           	opt stack 0
  1573  000037                     ___ftmul@f1:
  1574                           	opt stack 0
  1575  000037                     ___ftsub@f1:
  1576                           	opt stack 0
  1577                           
  1578                           ; 3 bytes @ 0x36
  1579  000037                     	ds	3
  1580  00003A                     ___ftmul@f2:
  1581                           	opt stack 0
  1582  00003A                     ___ftsub@f2:
  1583                           	opt stack 0
  1584                           
  1585                           ; 3 bytes @ 0x39
  1586  00003A                     	ds	3
  1587  00003D                     ??___ftmul:
  1588  00003D                     
  1589                           ; 0 bytes @ 0x3C
  1590  00003D                     	ds	3
  1591  000040                     ??_ReadByte_I2C:
  1592  000040                     
  1593                           ; 0 bytes @ 0x3F
  1594  000040                     	ds	1
  1595  000041                     tblptru	equ	0xFF8
  1596                           tblptrh	equ	0xFF7
  1597                           tblptrl	equ	0xFF6
  1598                           tablat	equ	0xFF5
  1599                           postinc0	equ	0xFEE
  1600                           wreg	equ	0xFE8
  1601                           postdec1	equ	0xFE5
  1602                           fsr1l	equ	0xFE1
  1603                           
  1604                           ; 0 bytes @ 0x40
  1605 ;;
  1606 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1607 ;;
  1608 ;; *************** function _main *****************
  1609 ;; Defined at:
  1610 ;;		line 94 in file "../TFG_PIC18_Auto.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;		None
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;		None
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  2  258[None  ] int 
  1617 ;; Registers used:
  1618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1628 ;;Total ram usage:        0 bytes
  1629 ;; Hardware stack levels required when called:    7
  1630 ;; This function calls:
  1631 ;;		_init_system
  1632 ;;		_output_logic
  1633 ;;		_state_logic
  1634 ;; This function is called by:
  1635 ;;		Startup code after reset
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text0
  1640  002C94                     __ptext0:
  1641                           	opt stack 0
  1642  002C94                     _main:
  1643                           	opt stack 24
  1644                           
  1645                           ;TFG_PIC18_Auto.c: 95: init_system();
  1646                           
  1647                           ;incstack = 0
  1648  002C94  ECE4  F015         	call	_init_system	;wreg free
  1649  002C98                     l6485:
  1650                           
  1651                           ;TFG_PIC18_Auto.c: 98: output_logic();
  1652  002C98  EC7A  F005         	call	_output_logic	;wreg free
  1653                           
  1654                           ;TFG_PIC18_Auto.c: 99: state_logic();
  1655  002C9C  EC6F  F00D         	call	_state_logic	;wreg free
  1656                           
  1657                           ;TFG_PIC18_Auto.c: 100: if(SerialInterrupt_flag==1){
  1658  002CA0  0100               	movlb	0	; () banked
  1659  002CA2  05C7               	decf	_SerialInterrupt_flag& (0+255),w,b
  1660  002CA4  0100               	movlb	0	; () banked
  1661  002CA6  11C8               	iorwf	(_SerialInterrupt_flag+1)& (0+255),w,b
  1662  002CA8  A4D8               	btfss	status,2,c
  1663  002CAA  D7F6               	goto	l6485
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;TFG_PIC18_Auto.c: 101: present_state = CharRX;
  1667  002CAC  C04B  F04F         	movff	_CharRX,_present_state
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;TFG_PIC18_Auto.c: 102: SerialInterrupt_flag=0;
  1671  002CB0  0E00               	movlw	0
  1672  002CB2  0100               	movlb	0	; () banked
  1673  002CB4  6FC8               	movwf	(_SerialInterrupt_flag+1)& (0+255),b
  1674  002CB6  0E00               	movlw	0
  1675  002CB8  6FC7               	movwf	_SerialInterrupt_flag& (0+255),b
  1676                           
  1677                           ; BSR set to: 0
  1678                           
  1679                           ; BSR set to: 0
  1680  002CBA  D7EE               	goto	l6485
  1681  002CBC                     __end_of_main:
  1682                           	opt stack 0
  1683                           tblptru	equ	0xFF8
  1684                           tblptrh	equ	0xFF7
  1685                           tblptrl	equ	0xFF6
  1686                           tablat	equ	0xFF5
  1687                           postinc0	equ	0xFEE
  1688                           wreg	equ	0xFE8
  1689                           postdec1	equ	0xFE5
  1690                           fsr1l	equ	0xFE1
  1691                           status	equ	0xFD8
  1692                           
  1693 ;; *************** function _state_logic *****************
  1694 ;; Defined at:
  1695 ;;		line 108 in file "../TFG_PIC18_Auto.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;		None
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;  error           1   15[COMRAM] unsigned char 
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  1    wreg      unsigned char 
  1702 ;; Registers used:
  1703 ;;		wreg, status,2, status,0
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1710 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;Total ram usage:        1 bytes
  1714 ;; Hardware stack levels used:    1
  1715 ;; Hardware stack levels required when called:    2
  1716 ;; This function calls:
  1717 ;;		Nothing
  1718 ;; This function is called by:
  1719 ;;		_main
  1720 ;; This function uses a non-reentrant model
  1721 ;;
  1722                           
  1723                           	psect	text1
  1724  001ADE                     __ptext1:
  1725                           	opt stack 0
  1726  001ADE                     _state_logic:
  1727                           	opt stack 28
  1728                           
  1729                           ;TFG_PIC18_Auto.c: 110: char error = 0;
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;incstack = 0
  1733  001ADE  0E00               	movlw	0
  1734  001AE0  6E10               	movwf	state_logic@error,c
  1735                           
  1736                           ;TFG_PIC18_Auto.c: 112: switch (present_state) {
  1737  001AE2  D075               	goto	l4733
  1738  001AE4                     l4675:
  1739                           
  1740                           ;TFG_PIC18_Auto.c: 115: if (Trigger == 1) {
  1741  001AE4  0443               	decf	_Trigger,w,c
  1742  001AE6  1044               	iorwf	_Trigger+1,w,c
  1743  001AE8  A4D8               	btfss	status,2,c
  1744  001AEA  D007               	goto	l4679
  1745                           
  1746                           ;TFG_PIC18_Auto.c: 117: present_state = 'B';
  1747  001AEC  0E42               	movlw	66
  1748  001AEE  6E4F               	movwf	_present_state,c
  1749                           
  1750                           ;TFG_PIC18_Auto.c: 118: Trigger = 0;
  1751  001AF0  0E00               	movlw	0
  1752  001AF2  6E44               	movwf	_Trigger+1,c
  1753  001AF4  0E00               	movlw	0
  1754  001AF6  6E43               	movwf	_Trigger,c
  1755                           
  1756                           ;TFG_PIC18_Auto.c: 120: } else {
  1757  001AF8  0012               	return	
  1758  001AFA                     l4679:
  1759                           
  1760                           ;TFG_PIC18_Auto.c: 121: present_state = 'A';
  1761  001AFA  0E41               	movlw	65
  1762  001AFC  6E4F               	movwf	_present_state,c
  1763                           
  1764                           ;TFG_PIC18_Auto.c: 122: }
  1765                           ;TFG_PIC18_Auto.c: 124: break;
  1766  001AFE  0012               	return	
  1767  001B00                     l4681:
  1768                           
  1769                           ;TFG_PIC18_Auto.c: 126: present_state = 'C';
  1770  001B00  0E43               	movlw	67
  1771  001B02  6E4F               	movwf	_present_state,c
  1772                           
  1773                           ;TFG_PIC18_Auto.c: 128: break;
  1774  001B04  0012               	return	
  1775  001B06                     l4683:
  1776                           
  1777                           ;TFG_PIC18_Auto.c: 130: if (Trigger == 1) {
  1778  001B06  0443               	decf	_Trigger,w,c
  1779  001B08  1044               	iorwf	_Trigger+1,w,c
  1780  001B0A  A4D8               	btfss	status,2,c
  1781  001B0C  D007               	goto	l4687
  1782                           
  1783                           ;TFG_PIC18_Auto.c: 132: present_state = 'D';
  1784  001B0E  0E44               	movlw	68
  1785  001B10  6E4F               	movwf	_present_state,c
  1786                           
  1787                           ;TFG_PIC18_Auto.c: 133: Trigger = 0;
  1788  001B12  0E00               	movlw	0
  1789  001B14  6E44               	movwf	_Trigger+1,c
  1790  001B16  0E00               	movlw	0
  1791  001B18  6E43               	movwf	_Trigger,c
  1792                           
  1793                           ;TFG_PIC18_Auto.c: 134: } else {
  1794  001B1A  0012               	return	
  1795  001B1C                     l4687:
  1796                           
  1797                           ;TFG_PIC18_Auto.c: 135: present_state = 'C';
  1798  001B1C  0E43               	movlw	67
  1799  001B1E  6E4F               	movwf	_present_state,c
  1800                           
  1801                           ;TFG_PIC18_Auto.c: 136: }
  1802                           ;TFG_PIC18_Auto.c: 137: break;
  1803  001B20  0012               	return	
  1804  001B22                     l4689:
  1805                           
  1806                           ;TFG_PIC18_Auto.c: 141: present_state = 'E';
  1807  001B22  0E45               	movlw	69
  1808  001B24  6E4F               	movwf	_present_state,c
  1809                           
  1810                           ;TFG_PIC18_Auto.c: 143: break;
  1811  001B26  0012               	return	
  1812  001B28                     l4691:
  1813                           
  1814                           ;TFG_PIC18_Auto.c: 148: present_state = 'F';
  1815  001B28  0E46               	movlw	70
  1816  001B2A  6E4F               	movwf	_present_state,c
  1817                           
  1818                           ;TFG_PIC18_Auto.c: 149: break;
  1819  001B2C  0012               	return	
  1820  001B2E                     l4693:
  1821                           
  1822                           ;TFG_PIC18_Auto.c: 152: if (Trigger == 1) {
  1823  001B2E  0443               	decf	_Trigger,w,c
  1824  001B30  1044               	iorwf	_Trigger+1,w,c
  1825  001B32  A4D8               	btfss	status,2,c
  1826  001B34  D007               	goto	l4697
  1827                           
  1828                           ;TFG_PIC18_Auto.c: 154: present_state = 'G';
  1829  001B36  0E47               	movlw	71
  1830  001B38  6E4F               	movwf	_present_state,c
  1831                           
  1832                           ;TFG_PIC18_Auto.c: 155: Trigger = 0;
  1833  001B3A  0E00               	movlw	0
  1834  001B3C  6E44               	movwf	_Trigger+1,c
  1835  001B3E  0E00               	movlw	0
  1836  001B40  6E43               	movwf	_Trigger,c
  1837                           
  1838                           ;TFG_PIC18_Auto.c: 157: } else {
  1839  001B42  0012               	return	
  1840  001B44                     l4697:
  1841                           
  1842                           ;TFG_PIC18_Auto.c: 158: present_state = 'F';
  1843  001B44  0E46               	movlw	70
  1844  001B46  6E4F               	movwf	_present_state,c
  1845                           
  1846                           ;TFG_PIC18_Auto.c: 159: }
  1847                           ;TFG_PIC18_Auto.c: 162: break;
  1848  001B48  0012               	return	
  1849  001B4A                     l4699:
  1850                           
  1851                           ;TFG_PIC18_Auto.c: 166: present_state = 'H';
  1852  001B4A  0E48               	movlw	72
  1853  001B4C  6E4F               	movwf	_present_state,c
  1854                           
  1855                           ;TFG_PIC18_Auto.c: 167: break;
  1856  001B4E  0012               	return	
  1857  001B50                     l4701:
  1858                           
  1859                           ;TFG_PIC18_Auto.c: 170: present_state = 'I';
  1860  001B50  0E49               	movlw	73
  1861  001B52  6E4F               	movwf	_present_state,c
  1862                           
  1863                           ;TFG_PIC18_Auto.c: 171: break;
  1864  001B54  0012               	return	
  1865  001B56                     l4703:
  1866                           
  1867                           ;TFG_PIC18_Auto.c: 174: if (Trigger == 1) {
  1868  001B56  0443               	decf	_Trigger,w,c
  1869  001B58  1044               	iorwf	_Trigger+1,w,c
  1870  001B5A  A4D8               	btfss	status,2,c
  1871  001B5C  D007               	goto	l4707
  1872                           
  1873                           ;TFG_PIC18_Auto.c: 177: present_state = 'J';
  1874  001B5E  0E4A               	movlw	74
  1875  001B60  6E4F               	movwf	_present_state,c
  1876                           
  1877                           ;TFG_PIC18_Auto.c: 178: Trigger = 0;
  1878  001B62  0E00               	movlw	0
  1879  001B64  6E44               	movwf	_Trigger+1,c
  1880  001B66  0E00               	movlw	0
  1881  001B68  6E43               	movwf	_Trigger,c
  1882                           
  1883                           ;TFG_PIC18_Auto.c: 180: } else {
  1884  001B6A  0012               	return	
  1885  001B6C                     l4707:
  1886                           
  1887                           ;TFG_PIC18_Auto.c: 181: present_state = 'I';
  1888  001B6C  0E49               	movlw	73
  1889  001B6E  6E4F               	movwf	_present_state,c
  1890                           
  1891                           ;TFG_PIC18_Auto.c: 182: }
  1892                           ;TFG_PIC18_Auto.c: 184: break;
  1893  001B70  0012               	return	
  1894  001B72                     l4709:
  1895                           
  1896                           ;TFG_PIC18_Auto.c: 187: present_state = 'L';
  1897  001B72  0E4C               	movlw	76
  1898  001B74  6E4F               	movwf	_present_state,c
  1899                           
  1900                           ;TFG_PIC18_Auto.c: 189: break;
  1901  001B76  0012               	return	
  1902  001B78                     l4711:
  1903                           
  1904                           ;TFG_PIC18_Auto.c: 191: present_state = 'M';
  1905  001B78  0E4D               	movlw	77
  1906  001B7A  6E4F               	movwf	_present_state,c
  1907                           
  1908                           ;TFG_PIC18_Auto.c: 192: break;
  1909  001B7C  0012               	return	
  1910  001B7E                     l4713:
  1911                           
  1912                           ;TFG_PIC18_Auto.c: 195: if (Trigger == 1) {
  1913  001B7E  0443               	decf	_Trigger,w,c
  1914  001B80  1044               	iorwf	_Trigger+1,w,c
  1915  001B82  A4D8               	btfss	status,2,c
  1916  001B84  D007               	goto	l4717
  1917                           
  1918                           ;TFG_PIC18_Auto.c: 197: present_state = 'N';
  1919  001B86  0E4E               	movlw	78
  1920  001B88  6E4F               	movwf	_present_state,c
  1921                           
  1922                           ;TFG_PIC18_Auto.c: 198: Trigger = 0;
  1923  001B8A  0E00               	movlw	0
  1924  001B8C  6E44               	movwf	_Trigger+1,c
  1925  001B8E  0E00               	movlw	0
  1926  001B90  6E43               	movwf	_Trigger,c
  1927                           
  1928                           ;TFG_PIC18_Auto.c: 200: } else {
  1929  001B92  0012               	return	
  1930  001B94                     l4717:
  1931                           
  1932                           ;TFG_PIC18_Auto.c: 201: present_state = 'M';
  1933  001B94  0E4D               	movlw	77
  1934  001B96  6E4F               	movwf	_present_state,c
  1935                           
  1936                           ;TFG_PIC18_Auto.c: 202: }
  1937                           ;TFG_PIC18_Auto.c: 203: break;
  1938  001B98  0012               	return	
  1939  001B9A                     l4719:
  1940                           
  1941                           ;TFG_PIC18_Auto.c: 206: present_state = 'P';
  1942  001B9A  0E50               	movlw	80
  1943  001B9C  6E4F               	movwf	_present_state,c
  1944                           
  1945                           ;TFG_PIC18_Auto.c: 207: break;
  1946  001B9E  0012               	return	
  1947  001BA0                     l4721:
  1948                           
  1949                           ;TFG_PIC18_Auto.c: 210: present_state = 'Q';
  1950  001BA0  0E51               	movlw	81
  1951  001BA2  6E4F               	movwf	_present_state,c
  1952                           
  1953                           ;TFG_PIC18_Auto.c: 211: break;
  1954  001BA4  0012               	return	
  1955  001BA6                     l4723:
  1956                           
  1957                           ;TFG_PIC18_Auto.c: 215: if (Trigger == 1) {
  1958  001BA6  0443               	decf	_Trigger,w,c
  1959  001BA8  1044               	iorwf	_Trigger+1,w,c
  1960  001BAA  A4D8               	btfss	status,2,c
  1961  001BAC  D007               	goto	l4727
  1962                           
  1963                           ;TFG_PIC18_Auto.c: 217: present_state = 'O';
  1964  001BAE  0E4F               	movlw	79
  1965  001BB0  6E4F               	movwf	_present_state,c
  1966                           
  1967                           ;TFG_PIC18_Auto.c: 218: Trigger = 0;
  1968  001BB2  0E00               	movlw	0
  1969  001BB4  6E44               	movwf	_Trigger+1,c
  1970  001BB6  0E00               	movlw	0
  1971  001BB8  6E43               	movwf	_Trigger,c
  1972                           
  1973                           ;TFG_PIC18_Auto.c: 220: } else {
  1974  001BBA  0012               	return	
  1975  001BBC                     l4727:
  1976                           
  1977                           ;TFG_PIC18_Auto.c: 221: present_state = 'Q';
  1978  001BBC  0E51               	movlw	81
  1979  001BBE  6E4F               	movwf	_present_state,c
  1980                           
  1981                           ;TFG_PIC18_Auto.c: 222: }
  1982                           ;TFG_PIC18_Auto.c: 223: break;
  1983  001BC0  0012               	return	
  1984  001BC2                     l4729:
  1985                           
  1986                           ;TFG_PIC18_Auto.c: 227: present_state = 'A';
  1987  001BC2  0E41               	movlw	65
  1988  001BC4  6E4F               	movwf	_present_state,c
  1989                           
  1990                           ;TFG_PIC18_Auto.c: 228: break;
  1991  001BC6  0012               	return	
  1992  001BC8                     l4731:
  1993                           
  1994                           ;TFG_PIC18_Auto.c: 231: error = 1;
  1995  001BC8  0E01               	movlw	1
  1996  001BCA  6E10               	movwf	state_logic@error,c
  1997                           
  1998                           ;TFG_PIC18_Auto.c: 232: }
  1999  001BCC  0012               	return	
  2000  001BCE                     l4733:
  2001  001BCE  504F               	movf	_present_state,w,c
  2002                           
  2003                           ; Switch size 1, requested type "space"
  2004                           ; Number of cases is 16, Range of values is 65 to 81
  2005                           ; switch strategies available:
  2006                           ; Name         Instructions Cycles
  2007                           ; simple_byte           49    25 (average)
  2008                           ;	Chosen strategy is simple_byte
  2009  001BD0  0A41               	xorlw	65	; case 65
  2010  001BD2  B4D8               	btfsc	status,2,c
  2011  001BD4  D787               	goto	l4675
  2012  001BD6  0A03               	xorlw	3	; case 66
  2013  001BD8  B4D8               	btfsc	status,2,c
  2014  001BDA  D792               	goto	l4681
  2015  001BDC  0A01               	xorlw	1	; case 67
  2016  001BDE  B4D8               	btfsc	status,2,c
  2017  001BE0  D792               	goto	l4683
  2018  001BE2  0A07               	xorlw	7	; case 68
  2019  001BE4  B4D8               	btfsc	status,2,c
  2020  001BE6  D79D               	goto	l4689
  2021  001BE8  0A01               	xorlw	1	; case 69
  2022  001BEA  B4D8               	btfsc	status,2,c
  2023  001BEC  D79D               	goto	l4691
  2024  001BEE  0A03               	xorlw	3	; case 70
  2025  001BF0  B4D8               	btfsc	status,2,c
  2026  001BF2  D79D               	goto	l4693
  2027  001BF4  0A01               	xorlw	1	; case 71
  2028  001BF6  B4D8               	btfsc	status,2,c
  2029  001BF8  D7A8               	goto	l4699
  2030  001BFA  0A0F               	xorlw	15	; case 72
  2031  001BFC  B4D8               	btfsc	status,2,c
  2032  001BFE  D7A8               	goto	l4701
  2033  001C00  0A01               	xorlw	1	; case 73
  2034  001C02  B4D8               	btfsc	status,2,c
  2035  001C04  D7A8               	goto	l4703
  2036  001C06  0A03               	xorlw	3	; case 74
  2037  001C08  B4D8               	btfsc	status,2,c
  2038  001C0A  D7B3               	goto	l4709
  2039  001C0C  0A06               	xorlw	6	; case 76
  2040  001C0E  B4D8               	btfsc	status,2,c
  2041  001C10  D7B3               	goto	l4711
  2042  001C12  0A01               	xorlw	1	; case 77
  2043  001C14  B4D8               	btfsc	status,2,c
  2044  001C16  D7B3               	goto	l4713
  2045  001C18  0A03               	xorlw	3	; case 78
  2046  001C1A  B4D8               	btfsc	status,2,c
  2047  001C1C  D7BE               	goto	l4719
  2048  001C1E  0A01               	xorlw	1	; case 79
  2049  001C20  B4D8               	btfsc	status,2,c
  2050  001C22  D7CF               	goto	l4729
  2051  001C24  0A1F               	xorlw	31	; case 80
  2052  001C26  B4D8               	btfsc	status,2,c
  2053  001C28  D7BB               	goto	l4721
  2054  001C2A  0A01               	xorlw	1	; case 81
  2055  001C2C  B4D8               	btfsc	status,2,c
  2056  001C2E  D7BB               	goto	l4723
  2057  001C30  D7CB               	goto	l4731
  2058  001C32                     __end_of_state_logic:
  2059                           	opt stack 0
  2060                           tblptru	equ	0xFF8
  2061                           tblptrh	equ	0xFF7
  2062                           tblptrl	equ	0xFF6
  2063                           tablat	equ	0xFF5
  2064                           postinc0	equ	0xFEE
  2065                           wreg	equ	0xFE8
  2066                           postdec1	equ	0xFE5
  2067                           fsr1l	equ	0xFE1
  2068                           status	equ	0xFD8
  2069                           
  2070 ;; *************** function _output_logic *****************
  2071 ;; Defined at:
  2072 ;;		line 236 in file "../TFG_PIC18_Auto.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;		None
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  error           1    2[BANK1 ] unsigned char 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      unsigned char 
  2079 ;; Registers used:
  2080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;Total ram usage:       12 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:    6
  2093 ;; This function calls:
  2094 ;;		_CloseI2C
  2095 ;;		_GetDataSensorDHT22
  2096 ;;		_GetSampleADC
  2097 ;;		_InitADC
  2098 ;;		_InitializeTimer3
  2099 ;;		_Open_I2C1
  2100 ;;		_ReadByte_I2C
  2101 ;;		_SelectChannelADC
  2102 ;;		_SendStringUSART
  2103 ;;		_StopADC
  2104 ;;		___ftadd
  2105 ;;		___ftdiv
  2106 ;;		___ftge
  2107 ;;		___ftmul
  2108 ;;		___lwtoft
  2109 ;;		_log
  2110 ;;		_sprintf
  2111 ;; This function is called by:
  2112 ;;		_main
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           	psect	text2
  2117  000AF4                     __ptext2:
  2118                           	opt stack 0
  2119  000AF4                     _output_logic:
  2120                           	opt stack 24
  2121                           
  2122                           ;TFG_PIC18_Auto.c: 237: char error = 0;
  2123                           
  2124                           ;incstack = 0
  2125  000AF4  0E00               	movlw	0
  2126  000AF6  0101               	movlb	1	; () banked
  2127  000AF8  6F2A               	movwf	output_logic@error& (0+255),b
  2128                           
  2129                           ;TFG_PIC18_Auto.c: 238: switch (present_state) {
  2130  000AFA  D2AB               	goto	l6345
  2131  000AFC                     l6195:
  2132                           
  2133                           ; BSR set to: 1
  2134                           ;TFG_PIC18_Auto.c: 240: PORTC = 0b00000111;
  2135  000AFC  0E07               	movlw	7
  2136  000AFE  6E82               	movwf	3970,c	;volatile
  2137                           
  2138                           ; BSR set to: 1
  2139                           ;TFG_PIC18_Auto.c: 242: if (postscalerflag30s == 1) {
  2140  000B00  0100               	movlb	0	; () banked
  2141  000B02  05DB               	decf	_postscalerflag30s& (0+255),w,b
  2142  000B04  0100               	movlb	0	; () banked
  2143  000B06  11DC               	iorwf	(_postscalerflag30s+1)& (0+255),w,b
  2144  000B08  A4D8               	btfss	status,2,c
  2145  000B0A  0012               	return	
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;TFG_PIC18_Auto.c: 243: postscalerflag30s =0;
  2149  000B0C  0E00               	movlw	0
  2150  000B0E  0100               	movlb	0	; () banked
  2151  000B10  6FDC               	movwf	(_postscalerflag30s+1)& (0+255),b
  2152  000B12  0E00               	movlw	0
  2153  000B14  6FDB               	movwf	_postscalerflag30s& (0+255),b
  2154                           
  2155                           ;TFG_PIC18_Auto.c: 244: Trigger = 1;
  2156  000B16  0E00               	movlw	0
  2157  000B18  6E44               	movwf	_Trigger+1,c
  2158  000B1A  0E01               	movlw	1
  2159  000B1C  6E43               	movwf	_Trigger,c
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;TFG_PIC18_Auto.c: 245: }
  2163                           ;TFG_PIC18_Auto.c: 246: break;
  2164  000B1E  0012               	return	
  2165  000B20                     l6201:
  2166                           
  2167                           ;TFG_PIC18_Auto.c: 249: T3CON = 0;
  2168  000B20  0E00               	movlw	0
  2169  000B22  6EB1               	movwf	4017,c	;volatile
  2170                           
  2171                           ;TFG_PIC18_Auto.c: 250: ADON = 0;
  2172  000B24  90C2               	bcf	4034,0,c	;volatile
  2173                           
  2174                           ;TFG_PIC18_Auto.c: 251: CloseI2C();
  2175  000B26  EC66  F017         	call	_CloseI2C	;wreg free
  2176                           
  2177                           ;TFG_PIC18_Auto.c: 253: InitializeTimer3();
  2178  000B2A  EC95  F016         	call	_InitializeTimer3	;wreg free
  2179                           
  2180                           ;TFG_PIC18_Auto.c: 254: InitADC();
  2181  000B2E  EC61  F017         	call	_InitADC	;wreg free
  2182                           
  2183                           ;TFG_PIC18_Auto.c: 256: postscaler = 0;
  2184  000B32  0E00               	movlw	0
  2185  000B34  0100               	movlb	0	; () banked
  2186  000B36  6FD6               	movwf	(_postscaler+1)& (0+255),b
  2187  000B38  0E00               	movlw	0
  2188  000B3A  6FD5               	movwf	_postscaler& (0+255),b
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;TFG_PIC18_Auto.c: 257: postscalerflag = 0;
  2192  000B3C  0E00               	movlw	0
  2193  000B3E  0100               	movlb	0	; () banked
  2194  000B40  6FDA               	movwf	(_postscalerflag+1)& (0+255),b
  2195  000B42  0E00               	movlw	0
  2196  000B44  6FD9               	movwf	_postscalerflag& (0+255),b
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;TFG_PIC18_Auto.c: 259: SendStringUSART("Analog Mode Acquiring");
  2200  000B46  0EB3               	movlw	low STR_1
  2201  000B48  6E15               	movwf	SendStringUSART@text,c
  2202  000B4A  0EFF               	movlw	high STR_1
  2203  000B4C  6E16               	movwf	SendStringUSART@text+1,c
  2204  000B4E  EC18  F017         	call	_SendStringUSART	;wreg free
  2205                           
  2206                           ;TFG_PIC18_Auto.c: 261: PORTC = 0b00000101;
  2207  000B52  0E05               	movlw	5
  2208  000B54  6E82               	movwf	3970,c	;volatile
  2209                           
  2210                           ;TFG_PIC18_Auto.c: 262: SelectChannelADC(0);
  2211  000B56  0E00               	movlw	0
  2212  000B58  6E11               	movwf	SelectChannelADC@channel+1,c
  2213  000B5A  0E00               	movlw	0
  2214  000B5C  6E10               	movwf	SelectChannelADC@channel,c
  2215  000B5E  EC2E  F017         	call	_SelectChannelADC	;wreg free
  2216                           
  2217                           ;TFG_PIC18_Auto.c: 265: break;
  2218  000B62  0012               	return	
  2219  000B64                     l6221:
  2220                           
  2221                           ;TFG_PIC18_Auto.c: 268: if (postscalerflag == 1) {
  2222  000B64  0100               	movlb	0	; () banked
  2223  000B66  05D9               	decf	_postscalerflag& (0+255),w,b
  2224  000B68  0100               	movlb	0	; () banked
  2225  000B6A  11DA               	iorwf	(_postscalerflag+1)& (0+255),w,b
  2226  000B6C  A4D8               	btfss	status,2,c
  2227  000B6E  0012               	return	
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;TFG_PIC18_Auto.c: 270: Value_AN0=0;
  2231  000B70  0E00               	movlw	0
  2232  000B72  0100               	movlb	0	; () banked
  2233  000B74  6FD0               	movwf	(_Value_AN0+1)& (0+255),b
  2234  000B76  0E00               	movlw	0
  2235  000B78  6FCF               	movwf	_Value_AN0& (0+255),b
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;TFG_PIC18_Auto.c: 271: Value_AN0 = GetSampleADC();
  2239  000B7A  EC0C  F017         	call	_GetSampleADC	;wreg free
  2240  000B7E  C010  F0CF         	movff	?_GetSampleADC,_Value_AN0
  2241  000B82  C011  F0D0         	movff	?_GetSampleADC+1,_Value_AN0+1
  2242                           
  2243                           ;TFG_PIC18_Auto.c: 273: sprintf(CharTX, "DATA ANALOG :Humedad TIERRA = %d",Value_AN0);
  2244  000B86  0EF3               	movlw	low _CharTX
  2245  000B88  0100               	movlb	0	; () banked
  2246  000B8A  6F7C               	movwf	sprintf@sp& (0+255),b
  2247  000B8C  0E00               	movlw	high _CharTX
  2248  000B8E  0100               	movlb	0	; () banked
  2249  000B90  6F7D               	movwf	(sprintf@sp+1)& (0+255),b
  2250  000B92  0E38               	movlw	low STR_2
  2251  000B94  0100               	movlb	0	; () banked
  2252  000B96  6F7E               	movwf	sprintf@f& (0+255),b
  2253  000B98  0EFF               	movlw	high STR_2
  2254  000B9A  0100               	movlb	0	; () banked
  2255  000B9C  6F7F               	movwf	(sprintf@f+1)& (0+255),b
  2256  000B9E  C0CF  F080         	movff	_Value_AN0,?_sprintf+4
  2257  000BA2  C0D0  F081         	movff	_Value_AN0+1,?_sprintf+5
  2258  000BA6  EC99  F000         	call	_sprintf	;wreg free
  2259                           
  2260                           ;TFG_PIC18_Auto.c: 275: SendStringUSART(CharTX);
  2261  000BAA  0EF3               	movlw	low _CharTX
  2262  000BAC  6E15               	movwf	SendStringUSART@text,c
  2263  000BAE  0E00               	movlw	high _CharTX
  2264  000BB0  6E16               	movwf	SendStringUSART@text+1,c
  2265  000BB2  EC18  F017         	call	_SendStringUSART	;wreg free
  2266                           
  2267                           ;TFG_PIC18_Auto.c: 276: postscalerflag = 0;
  2268  000BB6  0E00               	movlw	0
  2269  000BB8  0100               	movlb	0	; () banked
  2270  000BBA  6FDA               	movwf	(_postscalerflag+1)& (0+255),b
  2271  000BBC  0E00               	movlw	0
  2272  000BBE  6FD9               	movwf	_postscalerflag& (0+255),b
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;TFG_PIC18_Auto.c: 277: Trigger =1;
  2276  000BC0  0E00               	movlw	0
  2277  000BC2  6E44               	movwf	_Trigger+1,c
  2278  000BC4  0E01               	movlw	1
  2279  000BC6  6E43               	movwf	_Trigger,c
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;TFG_PIC18_Auto.c: 284: break;
  2283                           
  2284                           ;TFG_PIC18_Auto.c: 283: case 'D':
  2285                           
  2286                           ; BSR set to: 0
  2287                           ;TFG_PIC18_Auto.c: 279: }
  2288                           ;TFG_PIC18_Auto.c: 282: break;
  2289  000BC8  0012               	return	
  2290  000BCA                     l6235:
  2291                           
  2292                           ;TFG_PIC18_Auto.c: 287: SendStringUSART("I2C Mode Acquiring");
  2293  000BCA  0EC9               	movlw	low STR_3
  2294  000BCC  6E15               	movwf	SendStringUSART@text,c
  2295  000BCE  0EFF               	movlw	high STR_3
  2296  000BD0  6E16               	movwf	SendStringUSART@text+1,c
  2297  000BD2  EC18  F017         	call	_SendStringUSART	;wreg free
  2298                           
  2299                           ;TFG_PIC18_Auto.c: 288: PORTC = 0b00000100;
  2300  000BD6  0E04               	movlw	4
  2301  000BD8  6E82               	movwf	3970,c	;volatile
  2302                           
  2303                           ;TFG_PIC18_Auto.c: 290: SelectChannelADC(1);
  2304  000BDA  0E00               	movlw	0
  2305  000BDC  6E11               	movwf	SelectChannelADC@channel+1,c
  2306  000BDE  0E01               	movlw	1
  2307  000BE0  6E10               	movwf	SelectChannelADC@channel,c
  2308  000BE2  EC2E  F017         	call	_SelectChannelADC	;wreg free
  2309                           
  2310                           ;TFG_PIC18_Auto.c: 291: break;
  2311  000BE6  0012               	return	
  2312  000BE8                     l6241:
  2313                           
  2314                           ;TFG_PIC18_Auto.c: 294: if (postscalerflag == 1) {
  2315  000BE8  0100               	movlb	0	; () banked
  2316  000BEA  05D9               	decf	_postscalerflag& (0+255),w,b
  2317  000BEC  0100               	movlb	0	; () banked
  2318  000BEE  11DA               	iorwf	(_postscalerflag+1)& (0+255),w,b
  2319  000BF0  A4D8               	btfss	status,2,c
  2320  000BF2  0012               	return	
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;TFG_PIC18_Auto.c: 295: Value_AN1=0;
  2324  000BF4  0E00               	movlw	0
  2325  000BF6  0100               	movlb	0	; () banked
  2326  000BF8  6FE5               	movwf	(_Value_AN1+1)& (0+255),b
  2327  000BFA  0E00               	movlw	0
  2328  000BFC  6FE4               	movwf	_Value_AN1& (0+255),b
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;TFG_PIC18_Auto.c: 298: Value_AN1 = GetSampleADC();
  2332  000BFE  EC0C  F017         	call	_GetSampleADC	;wreg free
  2333  000C02  C010  F0E4         	movff	?_GetSampleADC,_Value_AN1
  2334  000C06  C011  F0E5         	movff	?_GetSampleADC+1,_Value_AN1+1
  2335                           
  2336                           ;TFG_PIC18_Auto.c: 300: Value_temp = (float)(log(10000.0 * ((1024.0 / Value_AN1 - 1))));
  2337  000C0A  0E00               	movlw	0
  2338  000C0C  6E2E               	movwf	___ftadd@f2,c
  2339  000C0E  0E80               	movlw	128
  2340  000C10  6E2F               	movwf	___ftadd@f2+1,c
  2341  000C12  0EBF               	movlw	191
  2342  000C14  6E30               	movwf	___ftadd@f2+2,c
  2343  000C16  C0E4  F018         	movff	_Value_AN1,___lwtoft@c
  2344  000C1A  C0E5  F019         	movff	_Value_AN1+1,___lwtoft@c+1
  2345  000C1E  EC83  F016         	call	___lwtoft	;wreg free
  2346  000C22  C018  F01F         	movff	?___lwtoft,___ftdiv@f2
  2347  000C26  C019  F020         	movff	?___lwtoft+1,___ftdiv@f2+1
  2348  000C2A  C01A  F021         	movff	?___lwtoft+2,___ftdiv@f2+2
  2349  000C2E  0E00               	movlw	0
  2350  000C30  6E1C               	movwf	___ftdiv@f1,c
  2351  000C32  0E80               	movlw	128
  2352  000C34  6E1D               	movwf	___ftdiv@f1+1,c
  2353  000C36  0E44               	movlw	68
  2354  000C38  6E1E               	movwf	___ftdiv@f1+2,c
  2355  000C3A  ECAF  F011         	call	___ftdiv	;wreg free
  2356  000C3E  C01C  F02B         	movff	?___ftdiv,___ftadd@f1
  2357  000C42  C01D  F02C         	movff	?___ftdiv+1,___ftadd@f1+1
  2358  000C46  C01E  F02D         	movff	?___ftdiv+2,___ftadd@f1+2
  2359  000C4A  EC99  F00C         	call	___ftadd	;wreg free
  2360  000C4E  C02B  F037         	movff	?___ftadd,___ftmul@f1
  2361  000C52  C02C  F038         	movff	?___ftadd+1,___ftmul@f1+1
  2362  000C56  C02D  F039         	movff	?___ftadd+2,___ftmul@f1+2
  2363  000C5A  0E40               	movlw	64
  2364  000C5C  6E3A               	movwf	___ftmul@f2,c
  2365  000C5E  0E1C               	movlw	28
  2366  000C60  6E3B               	movwf	___ftmul@f2+1,c
  2367  000C62  0E46               	movlw	70
  2368  000C64  6E3C               	movwf	___ftmul@f2+2,c
  2369  000C66  EC1F  F011         	call	___ftmul	;wreg free
  2370  000C6A  C037  F12B         	movff	?___ftmul,_output_logic$2539
  2371  000C6E  C038  F12C         	movff	?___ftmul+1,_output_logic$2539+1
  2372  000C72  C039  F12D         	movff	?___ftmul+2,_output_logic$2539+2
  2373                           
  2374                           ;TFG_PIC18_Auto.c: 300: Value_temp = (float)(log(10000.0 * ((1024.0 / Value_AN1 - 1))));
  2375  000C76  C12B  F072         	movff	_output_logic$2539,log@x
  2376  000C7A  C12C  F073         	movff	_output_logic$2539+1,log@x+1
  2377  000C7E  C12D  F074         	movff	_output_logic$2539+2,log@x+2
  2378  000C82  ECBB  F00E         	call	_log	;wreg free
  2379  000C86  C072  F0E1         	movff	?_log,_Value_temp
  2380  000C8A  C073  F0E2         	movff	?_log+1,_Value_temp+1
  2381  000C8E  C074  F0E3         	movff	?_log+2,_Value_temp+2
  2382                           
  2383                           ;TFG_PIC18_Auto.c: 301: Value_temp = (float)(1 / (0.001129148 + (0.000234125 + (0.000000
      +                          0876741 * Value_temp * Value_temp )) * Value_temp ));
  2384  000C92  C0E1  F03A         	movff	_Value_temp,___ftmul@f2
  2385  000C96  C0E2  F03B         	movff	_Value_temp+1,___ftmul@f2+1
  2386  000C9A  C0E3  F03C         	movff	_Value_temp+2,___ftmul@f2+2
  2387  000C9E  C0E1  F037         	movff	_Value_temp,___ftmul@f1
  2388  000CA2  C0E2  F038         	movff	_Value_temp+1,___ftmul@f1+1
  2389  000CA6  C0E3  F039         	movff	_Value_temp+2,___ftmul@f1+2
  2390  000CAA  EC1F  F011         	call	___ftmul	;wreg free
  2391  000CAE  C037  F12E         	movff	?___ftmul,_output_logic$2540
  2392  000CB2  C038  F12F         	movff	?___ftmul+1,_output_logic$2540+1
  2393  000CB6  C039  F130         	movff	?___ftmul+2,_output_logic$2540+2
  2394                           
  2395                           ;TFG_PIC18_Auto.c: 301: Value_temp = (float)(1 / (0.001129148 + (0.000234125 + (0.000000
      +                          0876741 * Value_temp * Value_temp )) * Value_temp ));
  2396  000CBA  0E7F               	movlw	127
  2397  000CBC  6E2E               	movwf	___ftadd@f2,c
  2398  000CBE  0E75               	movlw	117
  2399  000CC0  6E2F               	movwf	___ftadd@f2+1,c
  2400  000CC2  0E39               	movlw	57
  2401  000CC4  6E30               	movwf	___ftadd@f2+2,c
  2402  000CC6  0E47               	movlw	71
  2403  000CC8  6E3A               	movwf	___ftmul@f2,c
  2404  000CCA  0EBC               	movlw	188
  2405  000CCC  6E3B               	movwf	___ftmul@f2+1,c
  2406  000CCE  0E33               	movlw	51
  2407  000CD0  6E3C               	movwf	___ftmul@f2+2,c
  2408  000CD2  C12E  F037         	movff	_output_logic$2540,___ftmul@f1
  2409  000CD6  C12F  F038         	movff	_output_logic$2540+1,___ftmul@f1+1
  2410  000CDA  C130  F039         	movff	_output_logic$2540+2,___ftmul@f1+2
  2411  000CDE  EC1F  F011         	call	___ftmul	;wreg free
  2412  000CE2  C037  F02B         	movff	?___ftmul,___ftadd@f1
  2413  000CE6  C038  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  2414  000CEA  C039  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  2415  000CEE  EC99  F00C         	call	___ftadd	;wreg free
  2416  000CF2  C02B  F131         	movff	?___ftadd,_output_logic$2541
  2417  000CF6  C02C  F132         	movff	?___ftadd+1,_output_logic$2541+1
  2418  000CFA  C02D  F133         	movff	?___ftadd+2,_output_logic$2541+2
  2419                           
  2420                           ;TFG_PIC18_Auto.c: 301: Value_temp = (float)(1 / (0.001129148 + (0.000234125 + (0.000000
      +                          0876741 * Value_temp * Value_temp )) * Value_temp ));
  2421  000CFE  0E00               	movlw	0
  2422  000D00  6E1C               	movwf	___ftdiv@f1,c
  2423  000D02  0E80               	movlw	128
  2424  000D04  6E1D               	movwf	___ftdiv@f1+1,c
  2425  000D06  0E3F               	movlw	63
  2426  000D08  6E1E               	movwf	___ftdiv@f1+2,c
  2427  000D0A  0E00               	movlw	0
  2428  000D0C  6E2E               	movwf	___ftadd@f2,c
  2429  000D0E  0E94               	movlw	148
  2430  000D10  6E2F               	movwf	___ftadd@f2+1,c
  2431  000D12  0E3A               	movlw	58
  2432  000D14  6E30               	movwf	___ftadd@f2+2,c
  2433  000D16  C0E1  F03A         	movff	_Value_temp,___ftmul@f2
  2434  000D1A  C0E2  F03B         	movff	_Value_temp+1,___ftmul@f2+1
  2435  000D1E  C0E3  F03C         	movff	_Value_temp+2,___ftmul@f2+2
  2436  000D22  C131  F037         	movff	_output_logic$2541,___ftmul@f1
  2437  000D26  C132  F038         	movff	_output_logic$2541+1,___ftmul@f1+1
  2438  000D2A  C133  F039         	movff	_output_logic$2541+2,___ftmul@f1+2
  2439  000D2E  EC1F  F011         	call	___ftmul	;wreg free
  2440  000D32  C037  F02B         	movff	?___ftmul,___ftadd@f1
  2441  000D36  C038  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  2442  000D3A  C039  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  2443  000D3E  EC99  F00C         	call	___ftadd	;wreg free
  2444  000D42  C02B  F01F         	movff	?___ftadd,___ftdiv@f2
  2445  000D46  C02C  F020         	movff	?___ftadd+1,___ftdiv@f2+1
  2446  000D4A  C02D  F021         	movff	?___ftadd+2,___ftdiv@f2+2
  2447  000D4E  ECAF  F011         	call	___ftdiv	;wreg free
  2448  000D52  C01C  F0E1         	movff	?___ftdiv,_Value_temp
  2449  000D56  C01D  F0E2         	movff	?___ftdiv+1,_Value_temp+1
  2450  000D5A  C01E  F0E3         	movff	?___ftdiv+2,_Value_temp+2
  2451                           
  2452                           ;TFG_PIC18_Auto.c: 302: Value_temp = (float)(Value_temp - 273.15);
  2453  000D5E  C0E1  F02B         	movff	_Value_temp,___ftadd@f1
  2454  000D62  C0E2  F02C         	movff	_Value_temp+1,___ftadd@f1+1
  2455  000D66  C0E3  F02D         	movff	_Value_temp+2,___ftadd@f1+2
  2456  000D6A  0E93               	movlw	147
  2457  000D6C  6E2E               	movwf	___ftadd@f2,c
  2458  000D6E  0E88               	movlw	136
  2459  000D70  6E2F               	movwf	___ftadd@f2+1,c
  2460  000D72  0EC3               	movlw	195
  2461  000D74  6E30               	movwf	___ftadd@f2+2,c
  2462  000D76  EC99  F00C         	call	___ftadd	;wreg free
  2463  000D7A  C02B  F0E1         	movff	?___ftadd,_Value_temp
  2464  000D7E  C02C  F0E2         	movff	?___ftadd+1,_Value_temp+1
  2465  000D82  C02D  F0E3         	movff	?___ftadd+2,_Value_temp+2
  2466                           
  2467                           ;TFG_PIC18_Auto.c: 305: if(Value_pot < 50){
  2468  000D86  C0B2  F010         	movff	_Value_pot,___ftge@ff1
  2469  000D8A  C0B3  F011         	movff	_Value_pot+1,___ftge@ff1+1
  2470  000D8E  C0B4  F012         	movff	_Value_pot+2,___ftge@ff1+2
  2471  000D92  0E00               	movlw	0
  2472  000D94  6E13               	movwf	___ftge@ff2,c
  2473  000D96  0E48               	movlw	72
  2474  000D98  6E14               	movwf	___ftge@ff2+1,c
  2475  000D9A  0E42               	movlw	66
  2476  000D9C  6E15               	movwf	___ftge@ff2+2,c
  2477  000D9E  ECE9  F012         	call	___ftge	;wreg free
  2478  000DA2  B0D8               	btfsc	status,0,c
  2479  000DA4  D002               	goto	l311
  2480                           
  2481                           ;TFG_PIC18_Auto.c: 306: PORTBbits.RB5 =1;
  2482  000DA6  8A81               	bsf	3969,5,c	;volatile
  2483                           
  2484                           ;TFG_PIC18_Auto.c: 307: }
  2485  000DA8  D001               	goto	l6263
  2486  000DAA                     l311:
  2487                           
  2488                           ;TFG_PIC18_Auto.c: 308: else{
  2489                           ;TFG_PIC18_Auto.c: 309: PORTBbits.RB5 =0;
  2490  000DAA  9A81               	bcf	3969,5,c	;volatile
  2491  000DAC                     l6263:
  2492                           
  2493                           ;TFG_PIC18_Auto.c: 310: }
  2494                           ;TFG_PIC18_Auto.c: 312: sprintf(CharTX, "DATA ANALOG :Temperature = %.1f C", Value_temp)
      +                          ;
  2495  000DAC  0EF3               	movlw	low _CharTX
  2496  000DAE  0100               	movlb	0	; () banked
  2497  000DB0  6F7C               	movwf	sprintf@sp& (0+255),b
  2498  000DB2  0E00               	movlw	high _CharTX
  2499  000DB4  0100               	movlb	0	; () banked
  2500  000DB6  6F7D               	movwf	(sprintf@sp+1)& (0+255),b
  2501  000DB8  0ED3               	movlw	low STR_4
  2502  000DBA  0100               	movlb	0	; () banked
  2503  000DBC  6F7E               	movwf	sprintf@f& (0+255),b
  2504  000DBE  0EFE               	movlw	high STR_4
  2505  000DC0  0100               	movlb	0	; () banked
  2506  000DC2  6F7F               	movwf	(sprintf@f+1)& (0+255),b
  2507  000DC4  C0E1  F080         	movff	_Value_temp,?_sprintf+4
  2508  000DC8  C0E2  F081         	movff	_Value_temp+1,?_sprintf+5
  2509  000DCC  C0E3  F082         	movff	_Value_temp+2,?_sprintf+6
  2510  000DD0  EC99  F000         	call	_sprintf	;wreg free
  2511                           
  2512                           ;TFG_PIC18_Auto.c: 314: SendStringUSART(CharTX);
  2513  000DD4  0EF3               	movlw	low _CharTX
  2514  000DD6  6E15               	movwf	SendStringUSART@text,c
  2515  000DD8  0E00               	movlw	high _CharTX
  2516  000DDA  6E16               	movwf	SendStringUSART@text+1,c
  2517  000DDC  EC18  F017         	call	_SendStringUSART	;wreg free
  2518                           
  2519                           ;TFG_PIC18_Auto.c: 316: postscalerflag = 0;
  2520  000DE0  0E00               	movlw	0
  2521  000DE2  0100               	movlb	0	; () banked
  2522  000DE4  6FDA               	movwf	(_postscalerflag+1)& (0+255),b
  2523  000DE6  0E00               	movlw	0
  2524  000DE8  6FD9               	movwf	_postscalerflag& (0+255),b
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;TFG_PIC18_Auto.c: 318: Trigger = 1;
  2528  000DEA  0E00               	movlw	0
  2529  000DEC  6E44               	movwf	_Trigger+1,c
  2530  000DEE  0E01               	movlw	1
  2531  000DF0  6E43               	movwf	_Trigger,c
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;TFG_PIC18_Auto.c: 323: break;
  2535                           
  2536                           ;TFG_PIC18_Auto.c: 322: case 'G':
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;TFG_PIC18_Auto.c: 319: }
  2540                           ;TFG_PIC18_Auto.c: 320: break;
  2541  000DF2  0012               	return	
  2542  000DF4                     l6271:
  2543                           
  2544                           ;TFG_PIC18_Auto.c: 325: PORTC = 0b00000111;
  2545  000DF4  0E07               	movlw	7
  2546  000DF6  6E82               	movwf	3970,c	;volatile
  2547                           
  2548                           ;TFG_PIC18_Auto.c: 326: TRISBbits.TRISB4 = 0;
  2549  000DF8  9893               	bcf	3987,4,c	;volatile
  2550                           
  2551                           ;TFG_PIC18_Auto.c: 327: PORTBbits.RB4 = 1;
  2552  000DFA  8881               	bsf	3969,4,c	;volatile
  2553                           
  2554                           ;TFG_PIC18_Auto.c: 328: TMR2IE = 1;
  2555  000DFC  829D               	bsf	3997,1,c	;volatile
  2556                           
  2557                           ;TFG_PIC18_Auto.c: 329: T2CON = 0;
  2558  000DFE  0E00               	movlw	0
  2559  000E00  6ECA               	movwf	4042,c	;volatile
  2560                           
  2561                           ;TFG_PIC18_Auto.c: 330: TMR2IF = 0;
  2562  000E02  929E               	bcf	3998,1,c	;volatile
  2563                           
  2564                           ;TFG_PIC18_Auto.c: 331: TMR2 = 0;
  2565  000E04  0E00               	movlw	0
  2566  000E06  6ECC               	movwf	4044,c	;volatile
  2567                           
  2568                           ;TFG_PIC18_Auto.c: 332: T2CONbits.T2CKPS = 0b01;
  2569  000E08  50CA               	movf	4042,w,c	;volatile
  2570  000E0A  0BFC               	andlw	-4
  2571  000E0C  0901               	iorlw	1
  2572  000E0E  6ECA               	movwf	4042,c	;volatile
  2573                           
  2574                           ;TFG_PIC18_Auto.c: 333: break;
  2575  000E10  0012               	return	
  2576  000E12                     l6281:
  2577                           
  2578                           ;TFG_PIC18_Auto.c: 337: GetDataSensorDHT22();
  2579  000E12  EC58  F00F         	call	_GetDataSensorDHT22	;wreg free
  2580                           
  2581                           ;TFG_PIC18_Auto.c: 339: if (CheckSum == ((RH_Byte1 + RH_Byte2 + T_Byte1 + T_Byte2) & 0xF
      +                          F)) {
  2582  000E16  0100               	movlb	0	; () banked
  2583  000E18  51C5               	movf	_RH_Byte2& (0+255),w,b
  2584  000E1A  0100               	movlb	0	; () banked
  2585  000E1C  25C3               	addwf	_RH_Byte1& (0+255),w,b
  2586  000E1E  0101               	movlb	1	; () banked
  2587  000E20  6F28               	movwf	??_output_logic& (0+255),b
  2588  000E22  0100               	movlb	0	; () banked
  2589  000E24  51C6               	movf	(_RH_Byte2+1)& (0+255),w,b
  2590  000E26  0100               	movlb	0	; () banked
  2591  000E28  21C4               	addwfc	(_RH_Byte1+1)& (0+255),w,b
  2592  000E2A  0101               	movlb	1	; () banked
  2593  000E2C  6F29               	movwf	(??_output_logic+1)& (0+255),b
  2594  000E2E  0100               	movlb	0	; () banked
  2595  000E30  51C9               	movf	_T_Byte1& (0+255),w,b
  2596  000E32  0101               	movlb	1	; () banked
  2597  000E34  2728               	addwf	??_output_logic& (0+255),f,b
  2598  000E36  0100               	movlb	0	; () banked
  2599  000E38  51CA               	movf	(_T_Byte1+1)& (0+255),w,b
  2600  000E3A  0101               	movlb	1	; () banked
  2601  000E3C  2329               	addwfc	(??_output_logic+1)& (0+255),f,b
  2602  000E3E  0100               	movlb	0	; () banked
  2603  000E40  51CB               	movf	_T_Byte2& (0+255),w,b
  2604  000E42  0101               	movlb	1	; () banked
  2605  000E44  2728               	addwf	??_output_logic& (0+255),f,b
  2606  000E46  0100               	movlb	0	; () banked
  2607  000E48  51CC               	movf	(_T_Byte2+1)& (0+255),w,b
  2608  000E4A  0101               	movlb	1	; () banked
  2609  000E4C  2329               	addwfc	(??_output_logic+1)& (0+255),f,b
  2610  000E4E  0EFF               	movlw	255
  2611  000E50  0101               	movlb	1	; () banked
  2612  000E52  1728               	andwf	??_output_logic& (0+255),f,b
  2613  000E54  0E00               	movlw	0
  2614  000E56  1729               	andwf	(??_output_logic+1)& (0+255),f,b
  2615  000E58  0100               	movlb	0	; () banked
  2616  000E5A  51BD               	movf	_CheckSum& (0+255),w,b
  2617  000E5C  0101               	movlb	1	; () banked
  2618  000E5E  1928               	xorwf	??_output_logic& (0+255),w,b
  2619  000E60  E15C               	bnz	l6297
  2620  000E62  0100               	movlb	0	; () banked
  2621  000E64  51BE               	movf	(_CheckSum+1)& (0+255),w,b
  2622  000E66  0101               	movlb	1	; () banked
  2623  000E68  1929               	xorwf	(??_output_logic+1)& (0+255),w,b
  2624  000E6A  A4D8               	btfss	status,2,c
  2625  000E6C  D056               	goto	l6297
  2626                           
  2627                           ; BSR set to: 1
  2628                           ;TFG_PIC18_Auto.c: 340: if (sign) {
  2629  000E6E  0100               	movlb	0	; () banked
  2630  000E70  51DF               	movf	_sign& (0+255),w,b
  2631  000E72  0100               	movlb	0	; () banked
  2632  000E74  11E0               	iorwf	(_sign+1)& (0+255),w,b
  2633  000E76  B4D8               	btfsc	status,2,c
  2634  000E78  D01B               	goto	l6291
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;TFG_PIC18_Auto.c: 341: sprintf(CharTX, "DATA DHT22 :Temperature = -%.1f C", Value_tempd
      +                          ht22);
  2638  000E7A  0EF3               	movlw	low _CharTX
  2639  000E7C  0100               	movlb	0	; () banked
  2640  000E7E  6F7C               	movwf	sprintf@sp& (0+255),b
  2641  000E80  0E00               	movlw	high _CharTX
  2642  000E82  0100               	movlb	0	; () banked
  2643  000E84  6F7D               	movwf	(sprintf@sp+1)& (0+255),b
  2644  000E86  0EF5               	movlw	low STR_5
  2645  000E88  0100               	movlb	0	; () banked
  2646  000E8A  6F7E               	movwf	sprintf@f& (0+255),b
  2647  000E8C  0EFE               	movlw	high STR_5
  2648  000E8E  0100               	movlb	0	; () banked
  2649  000E90  6F7F               	movwf	(sprintf@f+1)& (0+255),b
  2650  000E92  C0B8  F080         	movff	_Value_tempdht22,?_sprintf+4
  2651  000E96  C0B9  F081         	movff	_Value_tempdht22+1,?_sprintf+5
  2652  000E9A  C0BA  F082         	movff	_Value_tempdht22+2,?_sprintf+6
  2653  000E9E  EC99  F000         	call	_sprintf	;wreg free
  2654                           
  2655                           ;TFG_PIC18_Auto.c: 343: SendStringUSART(CharTX);
  2656  000EA2  0EF3               	movlw	low _CharTX
  2657  000EA4  6E15               	movwf	SendStringUSART@text,c
  2658  000EA6  0E00               	movlw	high _CharTX
  2659  000EA8  6E16               	movwf	SendStringUSART@text+1,c
  2660  000EAA  EC18  F017         	call	_SendStringUSART	;wreg free
  2661                           
  2662                           ;TFG_PIC18_Auto.c: 344: } else {
  2663  000EAE  D01A               	goto	l6295
  2664  000EB0                     l6291:
  2665                           
  2666                           ;TFG_PIC18_Auto.c: 345: sprintf(CharTX, "DATA DHT22 :Temperature = %.1f C", Value_tempdh
      +                          t22);
  2667  000EB0  0EF3               	movlw	low _CharTX
  2668  000EB2  0100               	movlb	0	; () banked
  2669  000EB4  6F7C               	movwf	sprintf@sp& (0+255),b
  2670  000EB6  0E00               	movlw	high _CharTX
  2671  000EB8  0100               	movlb	0	; () banked
  2672  000EBA  6F7D               	movwf	(sprintf@sp+1)& (0+255),b
  2673  000EBC  0E17               	movlw	low STR_6
  2674  000EBE  0100               	movlb	0	; () banked
  2675  000EC0  6F7E               	movwf	sprintf@f& (0+255),b
  2676  000EC2  0EFF               	movlw	high STR_6
  2677  000EC4  0100               	movlb	0	; () banked
  2678  000EC6  6F7F               	movwf	(sprintf@f+1)& (0+255),b
  2679  000EC8  C0B8  F080         	movff	_Value_tempdht22,?_sprintf+4
  2680  000ECC  C0B9  F081         	movff	_Value_tempdht22+1,?_sprintf+5
  2681  000ED0  C0BA  F082         	movff	_Value_tempdht22+2,?_sprintf+6
  2682  000ED4  EC99  F000         	call	_sprintf	;wreg free
  2683                           
  2684                           ;TFG_PIC18_Auto.c: 346: SendStringUSART(CharTX);
  2685  000ED8  0EF3               	movlw	low _CharTX
  2686  000EDA  6E15               	movwf	SendStringUSART@text,c
  2687  000EDC  0E00               	movlw	high _CharTX
  2688  000EDE  6E16               	movwf	SendStringUSART@text+1,c
  2689  000EE0  EC18  F017         	call	_SendStringUSART	;wreg free
  2690  000EE4                     l6295:
  2691                           
  2692                           ;TFG_PIC18_Auto.c: 347: }
  2693                           ;TFG_PIC18_Auto.c: 349: sprintf(CharTX, "DATA DHT22 :Humidity = %.1f %%", Value_rhdht22)
      +                          ;
  2694  000EE4  0EF3               	movlw	low _CharTX
  2695  000EE6  0100               	movlb	0	; () banked
  2696  000EE8  6F7C               	movwf	sprintf@sp& (0+255),b
  2697  000EEA  0E00               	movlw	high _CharTX
  2698  000EEC  0100               	movlb	0	; () banked
  2699  000EEE  6F7D               	movwf	(sprintf@sp+1)& (0+255),b
  2700  000EF0  0E59               	movlw	low STR_7
  2701  000EF2  0100               	movlb	0	; () banked
  2702  000EF4  6F7E               	movwf	sprintf@f& (0+255),b
  2703  000EF6  0EFF               	movlw	high STR_7
  2704  000EF8  0100               	movlb	0	; () banked
  2705  000EFA  6F7F               	movwf	(sprintf@f+1)& (0+255),b
  2706  000EFC  C0B5  F080         	movff	_Value_rhdht22,?_sprintf+4
  2707  000F00  C0B6  F081         	movff	_Value_rhdht22+1,?_sprintf+5
  2708  000F04  C0B7  F082         	movff	_Value_rhdht22+2,?_sprintf+6
  2709  000F08  EC99  F000         	call	_sprintf	;wreg free
  2710                           
  2711                           ;TFG_PIC18_Auto.c: 350: SendStringUSART(CharTX);
  2712  000F0C  0EF3               	movlw	low _CharTX
  2713  000F0E  6E15               	movwf	SendStringUSART@text,c
  2714  000F10  0E00               	movlw	high _CharTX
  2715  000F12  6E16               	movwf	SendStringUSART@text+1,c
  2716  000F14  EC18  F017         	call	_SendStringUSART	;wreg free
  2717                           
  2718                           ;TFG_PIC18_Auto.c: 352: } else {
  2719  000F18  D006               	goto	l6299
  2720  000F1A                     l6297:
  2721                           
  2722                           ;TFG_PIC18_Auto.c: 353: SendStringUSART("Checksum Error!   Trying Again ... ");
  2723  000F1A  0E8C               	movlw	low STR_8
  2724  000F1C  6E15               	movwf	SendStringUSART@text,c
  2725  000F1E  0EFE               	movlw	high STR_8
  2726  000F20  6E16               	movwf	SendStringUSART@text+1,c
  2727  000F22  EC18  F017         	call	_SendStringUSART	;wreg free
  2728  000F26                     l6299:
  2729                           
  2730                           ;TFG_PIC18_Auto.c: 354: }
  2731                           ;TFG_PIC18_Auto.c: 355: Trigger = 1;
  2732  000F26  0E00               	movlw	0
  2733  000F28  6E44               	movwf	_Trigger+1,c
  2734  000F2A  0E01               	movlw	1
  2735  000F2C  6E43               	movwf	_Trigger,c
  2736                           
  2737                           ;TFG_PIC18_Auto.c: 360: break;
  2738                           
  2739                           ;TFG_PIC18_Auto.c: 359: case 'J':
  2740                           
  2741                           ;TFG_PIC18_Auto.c: 357: break;
  2742  000F2E  0012               	return	
  2743  000F30                     l6301:
  2744                           
  2745                           ;TFG_PIC18_Auto.c: 364: Open_I2C1();
  2746  000F30  EC38  F017         	call	_Open_I2C1	;wreg free
  2747                           
  2748                           ;TFG_PIC18_Auto.c: 365: break;
  2749  000F34  0012               	return	
  2750  000F36                     l6303:
  2751                           
  2752                           ;TFG_PIC18_Auto.c: 369: if (postscalerflag == 1) {
  2753  000F36  0100               	movlb	0	; () banked
  2754  000F38  05D9               	decf	_postscalerflag& (0+255),w,b
  2755  000F3A  0100               	movlb	0	; () banked
  2756  000F3C  11DA               	iorwf	(_postscalerflag+1)& (0+255),w,b
  2757  000F3E  A4D8               	btfss	status,2,c
  2758  000F40  0012               	return	
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;TFG_PIC18_Auto.c: 373: I2C_TemFormula = ReadByte_I2C(0b00110000, 0x05);
  2762  000F42  0E05               	movlw	5
  2763  000F44  0100               	movlb	0	; () banked
  2764  000F46  6F69               	movwf	ReadByte_I2C@RegisterAddress& (0+255),b
  2765  000F48  0E30               	movlw	48
  2766  000F4A  EC8D  F00B         	call	_ReadByte_I2C
  2767  000F4E  C069  F0AF         	movff	?_ReadByte_I2C,_I2C_TemFormula
  2768  000F52  C06A  F0B0         	movff	?_ReadByte_I2C+1,_I2C_TemFormula+1
  2769  000F56  C06B  F0B1         	movff	?_ReadByte_I2C+2,_I2C_TemFormula+2
  2770                           
  2771                           ;TFG_PIC18_Auto.c: 376: sprintf(CharTX2, "DATA I2C :Temperature = %.1f C", I2C_TemFormul
      +                          a);
  2772  000F5A  0E1C               	movlw	low _CharTX2
  2773  000F5C  0100               	movlb	0	; () banked
  2774  000F5E  6F7C               	movwf	sprintf@sp& (0+255),b
  2775  000F60  0E01               	movlw	high _CharTX2
  2776  000F62  0100               	movlb	0	; () banked
  2777  000F64  6F7D               	movwf	(sprintf@sp+1)& (0+255),b
  2778  000F66  0E78               	movlw	low STR_9
  2779  000F68  0100               	movlb	0	; () banked
  2780  000F6A  6F7E               	movwf	sprintf@f& (0+255),b
  2781  000F6C  0EFF               	movlw	high STR_9
  2782  000F6E  0100               	movlb	0	; () banked
  2783  000F70  6F7F               	movwf	(sprintf@f+1)& (0+255),b
  2784  000F72  C0AF  F080         	movff	_I2C_TemFormula,?_sprintf+4
  2785  000F76  C0B0  F081         	movff	_I2C_TemFormula+1,?_sprintf+5
  2786  000F7A  C0B1  F082         	movff	_I2C_TemFormula+2,?_sprintf+6
  2787  000F7E  EC99  F000         	call	_sprintf	;wreg free
  2788                           
  2789                           ;TFG_PIC18_Auto.c: 378: SendStringUSART(CharTX2);
  2790  000F82  0E1C               	movlw	low _CharTX2
  2791  000F84  6E15               	movwf	SendStringUSART@text,c
  2792  000F86  0E01               	movlw	high _CharTX2
  2793  000F88  6E16               	movwf	SendStringUSART@text+1,c
  2794  000F8A  EC18  F017         	call	_SendStringUSART	;wreg free
  2795                           
  2796                           ;TFG_PIC18_Auto.c: 380: postscalerflag = 0;
  2797  000F8E  0E00               	movlw	0
  2798  000F90  0100               	movlb	0	; () banked
  2799  000F92  6FDA               	movwf	(_postscalerflag+1)& (0+255),b
  2800  000F94  0E00               	movlw	0
  2801  000F96  6FD9               	movwf	_postscalerflag& (0+255),b
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;TFG_PIC18_Auto.c: 381: Trigger = 1;
  2805  000F98  0E00               	movlw	0
  2806  000F9A  6E44               	movwf	_Trigger+1,c
  2807  000F9C  0E01               	movlw	1
  2808  000F9E  6E43               	movwf	_Trigger,c
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;TFG_PIC18_Auto.c: 382: }
  2812                           ;TFG_PIC18_Auto.c: 384: break;
  2813  000FA0  0012               	return	
  2814  000FA2                     l6315:
  2815                           
  2816                           ;TFG_PIC18_Auto.c: 388: SendStringUSART("LDR mode ON");
  2817  000FA2  0EE9               	movlw	low STR_10
  2818  000FA4  6E15               	movwf	SendStringUSART@text,c
  2819  000FA6  0EFF               	movlw	high STR_10
  2820  000FA8  6E16               	movwf	SendStringUSART@text+1,c
  2821  000FAA  EC18  F017         	call	_SendStringUSART	;wreg free
  2822                           
  2823                           ;TFG_PIC18_Auto.c: 390: break;
  2824  000FAE  0012               	return	
  2825  000FB0                     l6317:
  2826                           
  2827                           ;TFG_PIC18_Auto.c: 395: SelectChannelADC(9);
  2828  000FB0  0E00               	movlw	0
  2829  000FB2  6E11               	movwf	SelectChannelADC@channel+1,c
  2830  000FB4  0E09               	movlw	9
  2831  000FB6  6E10               	movwf	SelectChannelADC@channel,c
  2832  000FB8  EC2E  F017         	call	_SelectChannelADC	;wreg free
  2833                           
  2834                           ;TFG_PIC18_Auto.c: 397: break;
  2835  000FBC  0012               	return	
  2836  000FBE                     l6319:
  2837                           
  2838                           ;TFG_PIC18_Auto.c: 401: if (postscalerflag == 1) {
  2839  000FBE  0100               	movlb	0	; () banked
  2840  000FC0  05D9               	decf	_postscalerflag& (0+255),w,b
  2841  000FC2  0100               	movlb	0	; () banked
  2842  000FC4  11DA               	iorwf	(_postscalerflag+1)& (0+255),w,b
  2843  000FC6  A4D8               	btfss	status,2,c
  2844  000FC8  0012               	return	
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;TFG_PIC18_Auto.c: 402: Value_AN9 = 0;
  2848  000FCA  0E00               	movlw	0
  2849  000FCC  0100               	movlb	0	; () banked
  2850  000FCE  6FD2               	movwf	(_Value_AN9+1)& (0+255),b
  2851  000FD0  0E00               	movlw	0
  2852  000FD2  6FD1               	movwf	_Value_AN9& (0+255),b
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;TFG_PIC18_Auto.c: 404: Value_AN9 = GetSampleADC();
  2856  000FD4  EC0C  F017         	call	_GetSampleADC	;wreg free
  2857  000FD8  C010  F0D1         	movff	?_GetSampleADC,_Value_AN9
  2858  000FDC  C011  F0D2         	movff	?_GetSampleADC+1,_Value_AN9+1
  2859                           
  2860                           ;TFG_PIC18_Auto.c: 406: sprintf(CharTX, "DATA LDR :Valor Analog = %d",Value_AN9);
  2861  000FE0  0EF3               	movlw	low _CharTX
  2862  000FE2  0100               	movlb	0	; () banked
  2863  000FE4  6F7C               	movwf	sprintf@sp& (0+255),b
  2864  000FE6  0E00               	movlw	high _CharTX
  2865  000FE8  0100               	movlb	0	; () banked
  2866  000FEA  6F7D               	movwf	(sprintf@sp+1)& (0+255),b
  2867  000FEC  0E97               	movlw	low STR_11
  2868  000FEE  0100               	movlb	0	; () banked
  2869  000FF0  6F7E               	movwf	sprintf@f& (0+255),b
  2870  000FF2  0EFF               	movlw	high STR_11
  2871  000FF4  0100               	movlb	0	; () banked
  2872  000FF6  6F7F               	movwf	(sprintf@f+1)& (0+255),b
  2873  000FF8  C0D1  F080         	movff	_Value_AN9,?_sprintf+4
  2874  000FFC  C0D2  F081         	movff	_Value_AN9+1,?_sprintf+5
  2875  001000  EC99  F000         	call	_sprintf	;wreg free
  2876                           
  2877                           ;TFG_PIC18_Auto.c: 408: SendStringUSART(CharTX);
  2878  001004  0EF3               	movlw	low _CharTX
  2879  001006  6E15               	movwf	SendStringUSART@text,c
  2880  001008  0E00               	movlw	high _CharTX
  2881  00100A  6E16               	movwf	SendStringUSART@text+1,c
  2882  00100C  EC18  F017         	call	_SendStringUSART	;wreg free
  2883                           
  2884                           ;TFG_PIC18_Auto.c: 410: postscalerflag = 0;
  2885  001010  0E00               	movlw	0
  2886  001012  0100               	movlb	0	; () banked
  2887  001014  6FDA               	movwf	(_postscalerflag+1)& (0+255),b
  2888  001016  0E00               	movlw	0
  2889  001018  6FD9               	movwf	_postscalerflag& (0+255),b
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;TFG_PIC18_Auto.c: 411: Trigger = 1;
  2893  00101A  0E00               	movlw	0
  2894  00101C  6E44               	movwf	_Trigger+1,c
  2895  00101E  0E01               	movlw	1
  2896  001020  6E43               	movwf	_Trigger,c
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;TFG_PIC18_Auto.c: 412: }
  2900                           ;TFG_PIC18_Auto.c: 414: break;
  2901  001022  0012               	return	
  2902  001024                     l6333:
  2903                           
  2904                           ;TFG_PIC18_Auto.c: 418: SendStringUSART("Sleep 8s");
  2905  001024  0EF5               	movlw	low STR_12
  2906  001026  6E15               	movwf	SendStringUSART@text,c
  2907  001028  0EFF               	movlw	high STR_12
  2908  00102A  6E16               	movwf	SendStringUSART@text+1,c
  2909  00102C  EC18  F017         	call	_SendStringUSART	;wreg free
  2910                           
  2911                           ;TFG_PIC18_Auto.c: 420: CloseI2C();
  2912  001030  EC66  F017         	call	_CloseI2C	;wreg free
  2913                           
  2914                           ;TFG_PIC18_Auto.c: 421: T2CON = 0;
  2915  001034  0E00               	movlw	0
  2916  001036  6ECA               	movwf	4042,c	;volatile
  2917                           
  2918                           ;TFG_PIC18_Auto.c: 422: StopADC();
  2919  001038  EC64  F017         	call	_StopADC	;wreg free
  2920                           
  2921                           ;TFG_PIC18_Auto.c: 423: SendStringUSART("Idle mode ON");
  2922  00103C  0EDC               	movlw	low STR_13
  2923  00103E  6E15               	movwf	SendStringUSART@text,c
  2924  001040  0EFF               	movlw	high STR_13
  2925  001042  6E16               	movwf	SendStringUSART@text+1,c
  2926  001044  EC18  F017         	call	_SendStringUSART	;wreg free
  2927                           
  2928                           ;TFG_PIC18_Auto.c: 425: break;
  2929  001048  0012               	return	
  2930  00104A                     l6343:
  2931                           
  2932                           ;TFG_PIC18_Auto.c: 428: error = 1;
  2933  00104A  0E01               	movlw	1
  2934  00104C  0101               	movlb	1	; () banked
  2935  00104E  6F2A               	movwf	output_logic@error& (0+255),b
  2936                           
  2937                           ;TFG_PIC18_Auto.c: 429: }
  2938  001050  0012               	return	
  2939  001052                     l6345:
  2940                           
  2941                           ; BSR set to: 1
  2942  001052  504F               	movf	_present_state,w,c
  2943                           
  2944                           ; Switch size 1, requested type "space"
  2945                           ; Number of cases is 16, Range of values is 65 to 81
  2946                           ; switch strategies available:
  2947                           ; Name         Instructions Cycles
  2948                           ; simple_byte           49    25 (average)
  2949                           ;	Chosen strategy is simple_byte
  2950  001054  0A41               	xorlw	65	; case 65
  2951  001056  B4D8               	btfsc	status,2,c
  2952  001058  D551               	goto	l6195
  2953  00105A  0A03               	xorlw	3	; case 66
  2954  00105C  B4D8               	btfsc	status,2,c
  2955  00105E  D560               	goto	l6201
  2956  001060  0A01               	xorlw	1	; case 67
  2957  001062  B4D8               	btfsc	status,2,c
  2958  001064  D57F               	goto	l6221
  2959  001066  0A07               	xorlw	7	; case 68
  2960  001068  B4D8               	btfsc	status,2,c
  2961  00106A  0012               	return	
  2962  00106C  0A01               	xorlw	1	; case 69
  2963  00106E  B4D8               	btfsc	status,2,c
  2964  001070  D5AC               	goto	l6235
  2965  001072  0A03               	xorlw	3	; case 70
  2966  001074  B4D8               	btfsc	status,2,c
  2967  001076  D5B8               	goto	l6241
  2968  001078  0A01               	xorlw	1	; case 71
  2969  00107A  B4D8               	btfsc	status,2,c
  2970  00107C  0012               	return	
  2971  00107E  0A0F               	xorlw	15	; case 72
  2972  001080  B4D8               	btfsc	status,2,c
  2973  001082  D6B8               	goto	l6271
  2974  001084  0A01               	xorlw	1	; case 73
  2975  001086  B4D8               	btfsc	status,2,c
  2976  001088  D6C4               	goto	l6281
  2977  00108A  0A03               	xorlw	3	; case 74
  2978  00108C  B4D8               	btfsc	status,2,c
  2979  00108E  0012               	return	
  2980  001090  0A06               	xorlw	6	; case 76
  2981  001092  B4D8               	btfsc	status,2,c
  2982  001094  D74D               	goto	l6301
  2983  001096  0A01               	xorlw	1	; case 77
  2984  001098  B4D8               	btfsc	status,2,c
  2985  00109A  D74D               	goto	l6303
  2986  00109C  0A03               	xorlw	3	; case 78
  2987  00109E  B4D8               	btfsc	status,2,c
  2988  0010A0  D780               	goto	l6315
  2989  0010A2  0A01               	xorlw	1	; case 79
  2990  0010A4  B4D8               	btfsc	status,2,c
  2991  0010A6  D7BE               	goto	l6333
  2992  0010A8  0A1F               	xorlw	31	; case 80
  2993  0010AA  B4D8               	btfsc	status,2,c
  2994  0010AC  D781               	goto	l6317
  2995  0010AE  0A01               	xorlw	1	; case 81
  2996  0010B0  B4D8               	btfsc	status,2,c
  2997  0010B2  D785               	goto	l6319
  2998  0010B4  D7CA               	goto	l6343
  2999  0010B6                     __end_of_output_logic:
  3000                           	opt stack 0
  3001                           tblptru	equ	0xFF8
  3002                           tblptrh	equ	0xFF7
  3003                           tblptrl	equ	0xFF6
  3004                           tablat	equ	0xFF5
  3005                           postinc0	equ	0xFEE
  3006                           wreg	equ	0xFE8
  3007                           postdec1	equ	0xFE5
  3008                           fsr1l	equ	0xFE1
  3009                           status	equ	0xFD8
  3010                           
  3011 ;; *************** function _sprintf *****************
  3012 ;; Defined at:
  3013 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  3014 ;; Parameters:    Size  Location     Type
  3015 ;;  sp              2   28[BANK0 ] PTR unsigned char 
  3016 ;;		 -> CharTX2(12), CharTX(12), 
  3017 ;;  f               2   30[BANK0 ] PTR const unsigned char 
  3018 ;;		 -> STR_11(28), STR_9(31), STR_7(31), STR_6(33), 
  3019 ;;		 -> STR_5(34), STR_4(34), STR_2(33), 
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;  val             4   58[BANK0 ] unsigned long 
  3022 ;;  tmpval          4   54[BANK0 ] struct .
  3023 ;;  fval            3   62[BANK0 ] struct .
  3024 ;;  prec            2   65[BANK0 ] int 
  3025 ;;  exp             2   52[BANK0 ] int 
  3026 ;;  flag            2   50[BANK0 ] unsigned short 
  3027 ;;  ap              2   48[BANK0 ] PTR void [1]
  3028 ;;		 -> ?_sprintf(2), 
  3029 ;;  len             2   46[BANK0 ] unsigned int 
  3030 ;;  cp              2   44[BANK0 ] PTR const unsigned char 
  3031 ;;		 -> sprintf@c(1), 
  3032 ;;  width           2    0        int 
  3033 ;;  c               1   67[BANK0 ] char 
  3034 ;;  d               1    0        unsigned char 
  3035 ;; Return value:  Size  Location     Type
  3036 ;;                  2   28[BANK0 ] int 
  3037 ;; Registers used:
  3038 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3044 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;Total ram usage:       40 bytes
  3049 ;; Hardware stack levels used:    1
  3050 ;; Hardware stack levels required when called:    5
  3051 ;; This function calls:
  3052 ;;		___awdiv
  3053 ;;		___ftadd
  3054 ;;		___ftge
  3055 ;;		___ftmul
  3056 ;;		___ftneg
  3057 ;;		___ftsub
  3058 ;;		___fttol
  3059 ;;		___lldiv
  3060 ;;		___llmod
  3061 ;;		___lltoft
  3062 ;;		___wmul
  3063 ;;		__div_to_l_
  3064 ;;		__tdiv_to_l_
  3065 ;;		_fround
  3066 ;;		_isdigit
  3067 ;;		_scale
  3068 ;; This function is called by:
  3069 ;;		_output_logic
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           	psect	text3
  3074  000132                     __ptext3:
  3075                           	opt stack 0
  3076  000132                     _sprintf:
  3077                           	opt stack 24
  3078                           
  3079                           ;doprnt.c: 494: va_list ap;
  3080                           ;doprnt.c: 499: signed char c;
  3081                           ;doprnt.c: 501: int width;
  3082                           ;doprnt.c: 504: int prec;
  3083                           ;doprnt.c: 508: unsigned short flag;
  3084                           ;doprnt.c: 515: char d;
  3085                           ;doprnt.c: 516: double fval;
  3086                           ;doprnt.c: 517: int exp;
  3087                           ;doprnt.c: 523: union {
  3088                           ;doprnt.c: 524: unsigned long vd;
  3089                           ;doprnt.c: 525: double integ;
  3090                           ;doprnt.c: 526: } tmpval;
  3091                           ;doprnt.c: 528: unsigned long val;
  3092                           ;doprnt.c: 529: unsigned len;
  3093                           ;doprnt.c: 530: const char * cp;
  3094                           ;doprnt.c: 533: *ap = __va_start();
  3095                           
  3096                           ;incstack = 0
  3097  000132  0E80               	movlw	low (?_sprintf+4)
  3098  000134  0100               	movlb	0	; () banked
  3099  000136  6F90               	movwf	sprintf@ap& (0+255),b
  3100  000138  0E00               	movlw	high (?_sprintf+4)
  3101  00013A  0100               	movlb	0	; () banked
  3102  00013C  6F91               	movwf	(sprintf@ap+1)& (0+255),b
  3103                           
  3104                           ;doprnt.c: 536: while(c = *f++) {
  3105  00013E  EF64  F005         	goto	l6105
  3106  000142                     l5857:
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;doprnt.c: 538: if(c != '%')
  3110  000142  0E25               	movlw	37
  3111  000144  0100               	movlb	0	; () banked
  3112  000146  19A3               	xorwf	sprintf@c& (0+255),w,b
  3113  000148  B4D8               	btfsc	status,2,c
  3114  00014A  D00B               	goto	l5863
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;doprnt.c: 540: {
  3118                           ;doprnt.c: 541: ((*sp++ = (c)));
  3119  00014C  C07C  FFD9         	movff	sprintf@sp,fsr2l
  3120  000150  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  3121  000154  C0A3  FFDF         	movff	sprintf@c,indf2
  3122                           
  3123                           ; BSR set to: 0
  3124  000158  0100               	movlb	0	; () banked
  3125  00015A  4B7C               	infsnz	sprintf@sp& (0+255),f,b
  3126  00015C  2B7D               	incf	(sprintf@sp+1)& (0+255),f,b
  3127                           
  3128                           ;doprnt.c: 542: continue;
  3129  00015E  EF64  F005         	goto	l6105
  3130  000162                     l5863:
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;doprnt.c: 543: }
  3134                           ;doprnt.c: 548: flag = 0;
  3135  000162  0E00               	movlw	0
  3136  000164  0100               	movlb	0	; () banked
  3137  000166  6F93               	movwf	(sprintf@flag+1)& (0+255),b
  3138  000168  0E00               	movlw	0
  3139  00016A  6F92               	movwf	sprintf@flag& (0+255),b
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;doprnt.c: 611: if(*f == '.') {
  3143  00016C  C07E  FFF6         	movff	sprintf@f,tblptrl
  3144  000170  C07F  FFF7         	movff	sprintf@f+1,tblptrh
  3145  000174                     	if	0	;tblptru may be non-zero
  3146  000174                     	endif
  3147  000174                     	if	0	;tblptru may be non-zero
  3148  000174                     	endif
  3149  000174  0008               	tblrd		*
  3150  000176  50F5               	movf	tablat,w,c
  3151  000178  0A2E               	xorlw	46
  3152  00017A  A4D8               	btfss	status,2,c
  3153  00017C  D034               	goto	l5877
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;doprnt.c: 612: flag |= 0x4000;
  3157  00017E  0100               	movlb	0	; () banked
  3158  000180  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
  3159                           
  3160                           ;doprnt.c: 613: f++;
  3161  000182  0100               	movlb	0	; () banked
  3162  000184  4B7E               	infsnz	sprintf@f& (0+255),f,b
  3163  000186  2B7F               	incf	(sprintf@f+1)& (0+255),f,b
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;doprnt.c: 620: {
  3167                           ;doprnt.c: 621: prec = 0;
  3168  000188  0E00               	movlw	0
  3169  00018A  0100               	movlb	0	; () banked
  3170  00018C  6FA2               	movwf	(sprintf@prec+1)& (0+255),b
  3171  00018E  0E00               	movlw	0
  3172  000190  6FA1               	movwf	sprintf@prec& (0+255),b
  3173                           
  3174                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3175  000192  D01E               	goto	l5875
  3176  000194                     l5871:
  3177                           
  3178                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3179  000194  C0A1  F01E         	movff	sprintf@prec,___wmul@multiplier
  3180  000198  C0A2  F01F         	movff	sprintf@prec+1,___wmul@multiplier+1
  3181  00019C  0E00               	movlw	0
  3182  00019E  6E21               	movwf	___wmul@multiplicand+1,c
  3183  0001A0  0E0A               	movlw	10
  3184  0001A2  6E20               	movwf	___wmul@multiplicand,c
  3185  0001A4  EC5E  F016         	call	___wmul	;wreg free
  3186  0001A8  C07E  FFF6         	movff	sprintf@f,tblptrl
  3187  0001AC  C07F  FFF7         	movff	sprintf@f+1,tblptrh
  3188  0001B0                     	if	0	;tblptru may be non-zero
  3189  0001B0                     	endif
  3190  0001B0                     	if	0	;tblptru may be non-zero
  3191  0001B0                     	endif
  3192  0001B0  0008               	tblrd		*
  3193  0001B2  50F5               	movf	tablat,w,c
  3194  0001B4  261E               	addwf	?___wmul,f,c
  3195  0001B6  0E00               	movlw	0
  3196  0001B8  221F               	addwfc	?___wmul+1,f,c
  3197  0001BA  0ED0               	movlw	208
  3198  0001BC  241E               	addwf	?___wmul,w,c
  3199  0001BE  0100               	movlb	0	; () banked
  3200  0001C0  6FA1               	movwf	sprintf@prec& (0+255),b
  3201  0001C2  0EFF               	movlw	255
  3202  0001C4  201F               	addwfc	?___wmul+1,w,c
  3203  0001C6  0100               	movlb	0	; () banked
  3204  0001C8  6FA2               	movwf	(sprintf@prec+1)& (0+255),b
  3205                           
  3206                           ; BSR set to: 0
  3207  0001CA  0100               	movlb	0	; () banked
  3208  0001CC  4B7E               	infsnz	sprintf@f& (0+255),f,b
  3209  0001CE  2B7F               	incf	(sprintf@f+1)& (0+255),f,b
  3210  0001D0                     l5875:
  3211                           
  3212                           ; BSR set to: 0
  3213  0001D0  C07E  FFF6         	movff	sprintf@f,tblptrl
  3214  0001D4  C07F  FFF7         	movff	sprintf@f+1,tblptrh
  3215  0001D8                     	if	0	;tblptru may be non-zero
  3216  0001D8                     	endif
  3217  0001D8                     	if	0	;tblptru may be non-zero
  3218  0001D8                     	endif
  3219  0001D8  0008               	tblrd		*
  3220  0001DA  50F5               	movf	tablat,w,c
  3221  0001DC  ECB6  F016         	call	_isdigit
  3222  0001E0  A0D8               	btfss	status,0,c
  3223  0001E2  D04A               	goto	l5903
  3224  0001E4  D7D7               	goto	l5871
  3225  0001E6                     l5877:
  3226                           
  3227                           ;doprnt.c: 626: prec = 0;
  3228  0001E6  0E00               	movlw	0
  3229  0001E8  0100               	movlb	0	; () banked
  3230  0001EA  6FA2               	movwf	(sprintf@prec+1)& (0+255),b
  3231  0001EC  0E00               	movlw	0
  3232  0001EE  6FA1               	movwf	sprintf@prec& (0+255),b
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;doprnt.c: 628: flag |= 0x1000;
  3236  0001F0  0100               	movlb	0	; () banked
  3237  0001F2  8993               	bsf	(sprintf@flag+1)& (0+255),4,b
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;doprnt.c: 630: }
  3241                           ;doprnt.c: 635: switch(c = *f++) {
  3242  0001F4  D041               	goto	l5903
  3243  0001F6                     l5881:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;doprnt.c: 663: flag |= 0x400;
  3247  0001F6  0100               	movlb	0	; () banked
  3248  0001F8  8593               	bsf	(sprintf@flag+1)& (0+255),2,b
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;doprnt.c: 698: case 'i':
  3252                           ;doprnt.c: 699: break;
  3253                           
  3254                           ; BSR set to: 0
  3255                           
  3256                           ;doprnt.c: 697: case 'd':
  3257                           
  3258                           ;doprnt.c: 664: break;
  3259  0001FA  D057               	goto	l5905
  3260  0001FC                     l5883:
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;doprnt.c: 753: if(prec && prec < len)
  3264  0001FC  0100               	movlb	0	; () banked
  3265  0001FE  51A1               	movf	sprintf@prec& (0+255),w,b
  3266  000200  0100               	movlb	0	; () banked
  3267  000202  11A2               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3268  000204  B4D8               	btfsc	status,2,c
  3269  000206  D01F               	goto	l5895
  3270                           
  3271                           ; BSR set to: 0
  3272  000208  0100               	movlb	0	; () banked
  3273  00020A  518E               	movf	sprintf@len& (0+255),w,b
  3274  00020C  0100               	movlb	0	; () banked
  3275  00020E  5DA1               	subwf	sprintf@prec& (0+255),w,b
  3276  000210  0100               	movlb	0	; () banked
  3277  000212  518F               	movf	(sprintf@len+1)& (0+255),w,b
  3278  000214  0100               	movlb	0	; () banked
  3279  000216  59A2               	subwfb	(sprintf@prec+1)& (0+255),w,b
  3280  000218  B0D8               	btfsc	status,0,c
  3281  00021A  D015               	goto	l5895
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;doprnt.c: 754: len = prec;
  3285  00021C  C0A1  F08E         	movff	sprintf@prec,sprintf@len
  3286  000220  C0A2  F08F         	movff	sprintf@prec+1,sprintf@len+1
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;doprnt.c: 767: while(len--)
  3290  000224  D010               	goto	l5895
  3291  000226                     l5889:
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  3295  000226  C08C  FFD9         	movff	sprintf@cp,fsr2l
  3296  00022A  C08D  FFDA         	movff	sprintf@cp+1,fsr2h
  3297  00022E  C07C  FFE1         	movff	sprintf@sp,fsr1l
  3298  000232  C07D  FFE2         	movff	sprintf@sp+1,fsr1h
  3299  000236  CFDF FFE7          	movff	indf2,indf1
  3300                           
  3301                           ; BSR set to: 0
  3302  00023A  0100               	movlb	0	; () banked
  3303  00023C  4B8C               	infsnz	sprintf@cp& (0+255),f,b
  3304  00023E  2B8D               	incf	(sprintf@cp+1)& (0+255),f,b
  3305                           
  3306                           ; BSR set to: 0
  3307  000240  0100               	movlb	0	; () banked
  3308  000242  4B7C               	infsnz	sprintf@sp& (0+255),f,b
  3309  000244  2B7D               	incf	(sprintf@sp+1)& (0+255),f,b
  3310  000246                     l5895:
  3311                           
  3312                           ; BSR set to: 0
  3313  000246  0100               	movlb	0	; () banked
  3314  000248  078E               	decf	sprintf@len& (0+255),f,b
  3315  00024A  A0D8               	btfss	status,0,c
  3316  00024C  078F               	decf	(sprintf@len+1)& (0+255),f,b
  3317  00024E  0100               	movlb	0	; () banked
  3318  000250  298E               	incf	sprintf@len& (0+255),w,b
  3319  000252  E1E9               	bnz	l5889
  3320  000254  0100               	movlb	0	; () banked
  3321  000256  298F               	incf	(sprintf@len+1)& (0+255),w,b
  3322  000258  B4D8               	btfsc	status,2,c
  3323  00025A  EF64  F005         	goto	l6105
  3324  00025E  D7E3               	goto	l5889
  3325  000260                     l5897:
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;doprnt.c: 805: cp = (char *)&c;
  3329  000260  0EA3               	movlw	low sprintf@c
  3330  000262  0100               	movlb	0	; () banked
  3331  000264  6F8C               	movwf	sprintf@cp& (0+255),b
  3332  000266  0E00               	movlw	high sprintf@c
  3333  000268  0100               	movlb	0	; () banked
  3334  00026A  6F8D               	movwf	(sprintf@cp+1)& (0+255),b
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;doprnt.c: 806: len = 1;
  3338  00026C  0E00               	movlw	0
  3339  00026E  0100               	movlb	0	; () banked
  3340  000270  6F8F               	movwf	(sprintf@len+1)& (0+255),b
  3341  000272  0E01               	movlw	1
  3342  000274  6F8E               	movwf	sprintf@len& (0+255),b
  3343                           
  3344                           ;doprnt.c: 807: goto dostring;
  3345  000276  D7C2               	goto	l5883
  3346  000278                     l5903:
  3347  000278  C07E  FFF6         	movff	sprintf@f,tblptrl
  3348  00027C  C07F  FFF7         	movff	sprintf@f+1,tblptrh
  3349  000280  0100               	movlb	0	; () banked
  3350  000282  4B7E               	infsnz	sprintf@f& (0+255),f,b
  3351  000284  2B7F               	incf	(sprintf@f+1)& (0+255),f,b
  3352  000286                     	if	0	;tblptru may be non-zero
  3353  000286                     	endif
  3354  000286                     	if	0	;tblptru may be non-zero
  3355  000286                     	endif
  3356  000286  0008               	tblrd		*
  3357  000288  CFF5 F0A3          	movff	tablat,sprintf@c
  3358  00028C  0100               	movlb	0	; () banked
  3359  00028E  51A3               	movf	sprintf@c& (0+255),w,b
  3360                           
  3361                           ; Switch size 1, requested type "space"
  3362                           ; Number of cases is 4, Range of values is 0 to 105
  3363                           ; switch strategies available:
  3364                           ; Name         Instructions Cycles
  3365                           ; simple_byte           13     7 (average)
  3366                           ;	Chosen strategy is simple_byte
  3367  000290  0A00               	xorlw	0	; case 0
  3368  000292  B4D8               	btfsc	status,2,c
  3369  000294  EF73  F005         	goto	l6107
  3370  000298  0A64               	xorlw	100	; case 100
  3371  00029A  B4D8               	btfsc	status,2,c
  3372  00029C  D006               	goto	l5905
  3373  00029E  0A02               	xorlw	2	; case 102
  3374  0002A0  B4D8               	btfsc	status,2,c
  3375  0002A2  D7A9               	goto	l5881
  3376  0002A4  0A0F               	xorlw	15	; case 105
  3377  0002A6  A4D8               	btfss	status,2,c
  3378  0002A8  D7DB               	goto	l5897
  3379  0002AA                     l5905:
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;doprnt.c: 825: if(flag & (0x700)) {
  3383  0002AA  0E07               	movlw	7
  3384  0002AC  0100               	movlb	0	; () banked
  3385  0002AE  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
  3386  0002B0  B4D8               	btfsc	status,2,c
  3387  0002B2  D319               	goto	l6053
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;doprnt.c: 827: if(flag & 0x1000)
  3391  0002B4  0100               	movlb	0	; () banked
  3392  0002B6  A993               	btfss	(sprintf@flag+1)& (0+255),4,b
  3393  0002B8  D005               	goto	l5911
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;doprnt.c: 829: prec = 6;
  3397  0002BA  0E00               	movlw	0
  3398  0002BC  0100               	movlb	0	; () banked
  3399  0002BE  6FA2               	movwf	(sprintf@prec+1)& (0+255),b
  3400  0002C0  0E06               	movlw	6
  3401  0002C2  6FA1               	movwf	sprintf@prec& (0+255),b
  3402  0002C4                     l5911:
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3406  0002C4  C090  FFD9         	movff	sprintf@ap,fsr2l
  3407  0002C8  C091  FFDA         	movff	sprintf@ap+1,fsr2h
  3408  0002CC  CFDE F09E          	movff	postinc2,sprintf@fval
  3409  0002D0  CFDE F09F          	movff	postinc2,sprintf@fval+1
  3410  0002D4  CFDD F0A0          	movff	postdec2,sprintf@fval+2
  3411                           
  3412                           ; BSR set to: 0
  3413  0002D8  0E03               	movlw	3
  3414  0002DA  0100               	movlb	0	; () banked
  3415  0002DC  2790               	addwf	sprintf@ap& (0+255),f,b
  3416  0002DE  0E00               	movlw	0
  3417  0002E0  2391               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3418                           
  3419                           ; BSR set to: 0
  3420                           ;doprnt.c: 831: if(fval < 0.0) {
  3421  0002E2  0100               	movlb	0	; () banked
  3422  0002E4  AFA0               	btfss	(sprintf@fval+2)& (0+255),7,b
  3423  0002E6  D011               	goto	l5921
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;doprnt.c: 832: fval = -fval;
  3427  0002E8  C09E  F066         	movff	sprintf@fval,___ftneg@f1
  3428  0002EC  C09F  F067         	movff	sprintf@fval+1,___ftneg@f1+1
  3429  0002F0  C0A0  F068         	movff	sprintf@fval+2,___ftneg@f1+2
  3430  0002F4  EC1E  F016         	call	___ftneg	;wreg free
  3431  0002F8  C066  F09E         	movff	?___ftneg,sprintf@fval
  3432  0002FC  C067  F09F         	movff	?___ftneg+1,sprintf@fval+1
  3433  000300  C068  F0A0         	movff	?___ftneg+2,sprintf@fval+2
  3434                           
  3435                           ;doprnt.c: 833: flag |= 0x03;
  3436  000304  0E03               	movlw	3
  3437  000306  0100               	movlb	0	; () banked
  3438  000308  1392               	iorwf	sprintf@flag& (0+255),f,b
  3439  00030A                     l5921:
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;doprnt.c: 834: }
  3443                           ;doprnt.c: 835: exp = 0;
  3444  00030A  0E00               	movlw	0
  3445  00030C  0100               	movlb	0	; () banked
  3446  00030E  6F95               	movwf	(sprintf@exp+1)& (0+255),b
  3447  000310  0E00               	movlw	0
  3448  000312  6F94               	movwf	sprintf@exp& (0+255),b
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;doprnt.c: 836: if( fval!=0) {
  3452  000314  0100               	movlb	0	; () banked
  3453  000316  519E               	movf	sprintf@fval& (0+255),w,b
  3454  000318  0100               	movlb	0	; () banked
  3455  00031A  119F               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3456  00031C  0100               	movlb	0	; () banked
  3457  00031E  11A0               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3458  000320  B4D8               	btfsc	status,2,c
  3459  000322  D091               	goto	l5949
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3463  000324  0E82               	movlw	130
  3464  000326  0100               	movlb	0	; () banked
  3465  000328  6F83               	movwf	??_sprintf& (0+255),b
  3466  00032A  0EFF               	movlw	255
  3467  00032C  0100               	movlb	0	; () banked
  3468  00032E  6F84               	movwf	(??_sprintf+1)& (0+255),b
  3469  000330  C09E  F085         	movff	sprintf@fval,??_sprintf+2
  3470  000334  C09F  F086         	movff	sprintf@fval+1,??_sprintf+3
  3471  000338  C0A0  F087         	movff	sprintf@fval+2,??_sprintf+4
  3472  00033C  C0A1  F088         	movff	sprintf@fval+3,??_sprintf+5
  3473  000340  0E10               	movlw	16
  3474  000342  D006               	goto	u6330
  3475  000344                     u6335:
  3476  000344  0100               	movlb	0	; () banked
  3477  000346  90D8               	bcf	status,0,c
  3478  000348  3388               	rrcf	(??_sprintf+5)& (0+255),f,b
  3479  00034A  3387               	rrcf	(??_sprintf+4)& (0+255),f,b
  3480  00034C  3386               	rrcf	(??_sprintf+3)& (0+255),f,b
  3481  00034E  3385               	rrcf	(??_sprintf+2)& (0+255),f,b
  3482  000350                     u6330:
  3483  000350  2EE8               	decfsz	wreg,f,c
  3484  000352  D7F8               	goto	u6335
  3485  000354  0100               	movlb	0	; () banked
  3486  000356  5185               	movf	(??_sprintf+2)& (0+255),w,b
  3487  000358  0100               	movlb	0	; () banked
  3488  00035A  2583               	addwf	??_sprintf& (0+255),w,b
  3489  00035C  0100               	movlb	0	; () banked
  3490  00035E  6F94               	movwf	sprintf@exp& (0+255),b
  3491  000360  0E00               	movlw	0
  3492  000362  0100               	movlb	0	; () banked
  3493  000364  2184               	addwfc	(??_sprintf+1)& (0+255),w,b
  3494  000366  0100               	movlb	0	; () banked
  3495  000368  6F95               	movwf	(sprintf@exp+1)& (0+255),b
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;doprnt.c: 838: exp--;
  3499  00036A  0100               	movlb	0	; () banked
  3500  00036C  0794               	decf	sprintf@exp& (0+255),f,b
  3501  00036E  A0D8               	btfss	status,0,c
  3502  000370  0795               	decf	(sprintf@exp+1)& (0+255),f,b
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;doprnt.c: 839: exp *= 3;
  3506  000372  C094  F01E         	movff	sprintf@exp,___wmul@multiplier
  3507  000376  C095  F01F         	movff	sprintf@exp+1,___wmul@multiplier+1
  3508  00037A  0E00               	movlw	0
  3509  00037C  6E21               	movwf	___wmul@multiplicand+1,c
  3510  00037E  0E03               	movlw	3
  3511  000380  6E20               	movwf	___wmul@multiplicand,c
  3512  000382  EC5E  F016         	call	___wmul	;wreg free
  3513  000386  C01E  F094         	movff	?___wmul,sprintf@exp
  3514  00038A  C01F  F095         	movff	?___wmul+1,sprintf@exp+1
  3515                           
  3516                           ;doprnt.c: 840: exp /= 10;
  3517  00038E  C094  F016         	movff	sprintf@exp,___awdiv@dividend
  3518  000392  C095  F017         	movff	sprintf@exp+1,___awdiv@dividend+1
  3519  000396  0E00               	movlw	0
  3520  000398  6E19               	movwf	___awdiv@divisor+1,c
  3521  00039A  0E0A               	movlw	10
  3522  00039C  6E18               	movwf	___awdiv@divisor,c
  3523  00039E  EC79  F013         	call	___awdiv	;wreg free
  3524  0003A2  C016  F094         	movff	?___awdiv,sprintf@exp
  3525  0003A6  C017  F095         	movff	?___awdiv+1,sprintf@exp+1
  3526                           
  3527                           ;doprnt.c: 841: if(exp < 0)
  3528  0003AA  0100               	movlb	0	; () banked
  3529  0003AC  AF95               	btfss	(sprintf@exp+1)& (0+255),7,b
  3530  0003AE  D004               	goto	l5937
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;doprnt.c: 842: exp--;
  3534  0003B0  0100               	movlb	0	; () banked
  3535  0003B2  0794               	decf	sprintf@exp& (0+255),f,b
  3536  0003B4  A0D8               	btfss	status,0,c
  3537  0003B6  0795               	decf	(sprintf@exp+1)& (0+255),f,b
  3538  0003B8                     l5937:
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3542  0003B8  0100               	movlb	0	; () banked
  3543  0003BA  5194               	movf	sprintf@exp& (0+255),w,b
  3544  0003BC  0800               	sublw	0
  3545  0003BE  EC5B  F008         	call	_scale
  3546  0003C2  C066  F096         	movff	?_scale,sprintf@tmpval
  3547  0003C6  C067  F097         	movff	?_scale+1,sprintf@tmpval+1
  3548  0003CA  C068  F098         	movff	?_scale+2,sprintf@tmpval+2
  3549                           
  3550                           ;doprnt.c: 847: tmpval.integ *= fval;
  3551  0003CE  C096  F037         	movff	sprintf@tmpval,___ftmul@f1
  3552  0003D2  C097  F038         	movff	sprintf@tmpval+1,___ftmul@f1+1
  3553  0003D6  C098  F039         	movff	sprintf@tmpval+2,___ftmul@f1+2
  3554  0003DA  C09E  F03A         	movff	sprintf@fval,___ftmul@f2
  3555  0003DE  C09F  F03B         	movff	sprintf@fval+1,___ftmul@f2+1
  3556  0003E2  C0A0  F03C         	movff	sprintf@fval+2,___ftmul@f2+2
  3557  0003E6  EC1F  F011         	call	___ftmul	;wreg free
  3558  0003EA  C037  F096         	movff	?___ftmul,sprintf@tmpval
  3559  0003EE  C038  F097         	movff	?___ftmul+1,sprintf@tmpval+1
  3560  0003F2  C039  F098         	movff	?___ftmul+2,sprintf@tmpval+2
  3561                           
  3562                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3563  0003F6  C096  F010         	movff	sprintf@tmpval,___ftge@ff1
  3564  0003FA  C097  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3565  0003FE  C098  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3566  000402  0E00               	movlw	0
  3567  000404  6E13               	movwf	___ftge@ff2,c
  3568  000406  0E80               	movlw	128
  3569  000408  6E14               	movwf	___ftge@ff2+1,c
  3570  00040A  0E3F               	movlw	63
  3571  00040C  6E15               	movwf	___ftge@ff2+2,c
  3572  00040E  ECE9  F012         	call	___ftge	;wreg free
  3573  000412  B0D8               	btfsc	status,0,c
  3574  000414  D005               	goto	l5945
  3575                           
  3576                           ;doprnt.c: 849: exp--;
  3577  000416  0100               	movlb	0	; () banked
  3578  000418  0794               	decf	sprintf@exp& (0+255),f,b
  3579  00041A  A0D8               	btfss	status,0,c
  3580  00041C  0795               	decf	(sprintf@exp+1)& (0+255),f,b
  3581  00041E  D013               	goto	l5949
  3582  000420                     l5945:
  3583                           
  3584                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3585  000420  C096  F010         	movff	sprintf@tmpval,___ftge@ff1
  3586  000424  C097  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3587  000428  C098  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3588  00042C  0E00               	movlw	0
  3589  00042E  6E13               	movwf	___ftge@ff2,c
  3590  000430  0E20               	movlw	32
  3591  000432  6E14               	movwf	___ftge@ff2+1,c
  3592  000434  0E41               	movlw	65
  3593  000436  6E15               	movwf	___ftge@ff2+2,c
  3594  000438  ECE9  F012         	call	___ftge	;wreg free
  3595  00043C  A0D8               	btfss	status,0,c
  3596  00043E  D003               	goto	l5949
  3597                           
  3598                           ;doprnt.c: 851: exp++;
  3599  000440  0100               	movlb	0	; () banked
  3600  000442  4B94               	infsnz	sprintf@exp& (0+255),f,b
  3601  000444  2B95               	incf	(sprintf@exp+1)& (0+255),f,b
  3602  000446                     l5949:
  3603                           
  3604                           ;doprnt.c: 852: }
  3605                           ;doprnt.c: 1112: if(prec <= 12)
  3606  000446  0100               	movlb	0	; () banked
  3607  000448  BFA2               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3608  00044A  D008               	goto	l5951
  3609  00044C  0100               	movlb	0	; () banked
  3610  00044E  51A2               	movf	(sprintf@prec+1)& (0+255),w,b
  3611  000450  E11D               	bnz	l5953
  3612  000452  0E0D               	movlw	13
  3613  000454  0100               	movlb	0	; () banked
  3614  000456  5DA1               	subwf	sprintf@prec& (0+255),w,b
  3615  000458  B0D8               	btfsc	status,0,c
  3616  00045A  D018               	goto	l5953
  3617  00045C                     l5951:
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;doprnt.c: 1113: fval += fround(prec);
  3621  00045C  C09E  F02B         	movff	sprintf@fval,___ftadd@f1
  3622  000460  C09F  F02C         	movff	sprintf@fval+1,___ftadd@f1+1
  3623  000464  C0A0  F02D         	movff	sprintf@fval+2,___ftadd@f1+2
  3624  000468  0100               	movlb	0	; () banked
  3625  00046A  51A1               	movf	sprintf@prec& (0+255),w,b
  3626  00046C  EC66  F00A         	call	_fround
  3627  000470  C066  F02E         	movff	?_fround,___ftadd@f2
  3628  000474  C067  F02F         	movff	?_fround+1,___ftadd@f2+1
  3629  000478  C068  F030         	movff	?_fround+2,___ftadd@f2+2
  3630  00047C  EC99  F00C         	call	___ftadd	;wreg free
  3631  000480  C02B  F09E         	movff	?___ftadd,sprintf@fval
  3632  000484  C02C  F09F         	movff	?___ftadd+1,sprintf@fval+1
  3633  000488  C02D  F0A0         	movff	?___ftadd+2,sprintf@fval+2
  3634  00048C                     l5953:
  3635                           
  3636                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3637  00048C  0100               	movlb	0	; () banked
  3638  00048E  BF95               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3639  000490  D008               	goto	l5955
  3640  000492  0100               	movlb	0	; () banked
  3641  000494  5195               	movf	(sprintf@exp+1)& (0+255),w,b
  3642  000496  E12A               	bnz	l5961
  3643  000498  0E0A               	movlw	10
  3644  00049A  0100               	movlb	0	; () banked
  3645  00049C  5D94               	subwf	sprintf@exp& (0+255),w,b
  3646  00049E  B0D8               	btfsc	status,0,c
  3647  0004A0  D025               	goto	l5961
  3648  0004A2                     l5955:
  3649                           
  3650                           ; BSR set to: 0
  3651  0004A2  0100               	movlb	0	; () banked
  3652  0004A4  519E               	movf	sprintf@fval& (0+255),w,b
  3653  0004A6  0100               	movlb	0	; () banked
  3654  0004A8  119F               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3655  0004AA  0100               	movlb	0	; () banked
  3656  0004AC  11A0               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3657  0004AE  B4D8               	btfsc	status,2,c
  3658  0004B0  D05F               	goto	l5975
  3659                           
  3660                           ; BSR set to: 0
  3661  0004B2  C09E  F06D         	movff	sprintf@fval,___fttol@f1
  3662  0004B6  C09F  F06E         	movff	sprintf@fval+1,___fttol@f1+1
  3663  0004BA  C0A0  F06F         	movff	sprintf@fval+2,___fttol@f1+2
  3664  0004BE  EC19  F00E         	call	___fttol	;wreg free
  3665  0004C2  0100               	movlb	0	; () banked
  3666  0004C4  516D               	movf	?___fttol& (0+255),w,b
  3667  0004C6  0100               	movlb	0	; () banked
  3668  0004C8  116E               	iorwf	(?___fttol+1)& (0+255),w,b
  3669  0004CA  0100               	movlb	0	; () banked
  3670  0004CC  116F               	iorwf	(?___fttol+2)& (0+255),w,b
  3671  0004CE  0100               	movlb	0	; () banked
  3672  0004D0  1170               	iorwf	(?___fttol+3)& (0+255),w,b
  3673  0004D2  A4D8               	btfss	status,2,c
  3674  0004D4  D04D               	goto	l5975
  3675                           
  3676                           ; BSR set to: 0
  3677  0004D6  0100               	movlb	0	; () banked
  3678  0004D8  BF95               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3679  0004DA  D04A               	goto	l5975
  3680  0004DC  0100               	movlb	0	; () banked
  3681  0004DE  5195               	movf	(sprintf@exp+1)& (0+255),w,b
  3682  0004E0  E105               	bnz	l5961
  3683  0004E2  0E02               	movlw	2
  3684  0004E4  0100               	movlb	0	; () banked
  3685  0004E6  5D94               	subwf	sprintf@exp& (0+255),w,b
  3686  0004E8  A0D8               	btfss	status,0,c
  3687  0004EA  D042               	goto	l5975
  3688  0004EC                     l5961:
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3692  0004EC  C096  F010         	movff	sprintf@tmpval,___ftge@ff1
  3693  0004F0  C097  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3694  0004F4  C098  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3695  0004F8  0E70               	movlw	112
  3696  0004FA  6E13               	movwf	___ftge@ff2,c
  3697  0004FC  0E89               	movlw	137
  3698  0004FE  6E14               	movwf	___ftge@ff2+1,c
  3699  000500  0E40               	movlw	64
  3700  000502  6E15               	movwf	___ftge@ff2+2,c
  3701  000504  ECE9  F012         	call	___ftge	;wreg free
  3702  000508  B0D8               	btfsc	status,0,c
  3703  00050A  D003               	goto	l5965
  3704                           
  3705                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3706  00050C  0100               	movlb	0	; () banked
  3707  00050E  0EF7               	movlw	247
  3708  000510  D002               	goto	L1
  3709  000512                     l5965:
  3710                           
  3711                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3712  000512  0100               	movlb	0	; () banked
  3713  000514  0EF8               	movlw	248
  3714  000516                     L1:
  3715  000516  2794               	addwf	sprintf@exp& (0+255),f,b
  3716  000518  0EFF               	movlw	255
  3717  00051A  2395               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;doprnt.c: 1124: }
  3721                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3722                           
  3723                           ; BSR set to: 0
  3724  00051C  0100               	movlb	0	; () banked
  3725  00051E  5194               	movf	sprintf@exp& (0+255),w,b
  3726  000520  EC5B  F008         	call	_scale
  3727  000524  C066  F096         	movff	?_scale,sprintf@tmpval
  3728  000528  C067  F097         	movff	?_scale+1,sprintf@tmpval+1
  3729  00052C  C068  F098         	movff	?_scale+2,sprintf@tmpval+2
  3730                           
  3731                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3732  000530  C09E  F010         	movff	sprintf@fval,__tdiv_to_l_@f1
  3733  000534  C09F  F011         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3734  000538  C0A0  F012         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3735  00053C  C096  F013         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3736  000540  C097  F014         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3737  000544  C098  F015         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3738  000548  ECF2  F00F         	call	__tdiv_to_l_	;wreg free
  3739  00054C  C010  F09A         	movff	?__tdiv_to_l_,sprintf@val
  3740  000550  C011  F09B         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3741  000554  C012  F09C         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3742  000558  C013  F09D         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3743                           
  3744                           ;doprnt.c: 1129: fval = 0.0;
  3745  00055C  0E00               	movlw	0
  3746  00055E  0100               	movlb	0	; () banked
  3747  000560  6F9E               	movwf	sprintf@fval& (0+255),b
  3748  000562  0E00               	movlw	0
  3749  000564  0100               	movlb	0	; () banked
  3750  000566  6F9F               	movwf	(sprintf@fval+1)& (0+255),b
  3751  000568  0E00               	movlw	0
  3752  00056A  0100               	movlb	0	; () banked
  3753  00056C  6FA0               	movwf	(sprintf@fval+2)& (0+255),b
  3754                           
  3755                           ;doprnt.c: 1130: } else {
  3756  00056E  D033               	goto	l5979
  3757  000570                     l5975:
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3761  000570  C09E  F06D         	movff	sprintf@fval,___fttol@f1
  3762  000574  C09F  F06E         	movff	sprintf@fval+1,___fttol@f1+1
  3763  000578  C0A0  F06F         	movff	sprintf@fval+2,___fttol@f1+2
  3764  00057C  EC19  F00E         	call	___fttol	;wreg free
  3765  000580  C06D  F09A         	movff	?___fttol,sprintf@val
  3766  000584  C06E  F09B         	movff	?___fttol+1,sprintf@val+1
  3767  000588  C06F  F09C         	movff	?___fttol+2,sprintf@val+2
  3768  00058C  C070  F09D         	movff	?___fttol+3,sprintf@val+3
  3769                           
  3770                           ;doprnt.c: 1132: fval -= (double)val;
  3771  000590  C09E  F037         	movff	sprintf@fval,___ftsub@f1
  3772  000594  C09F  F038         	movff	sprintf@fval+1,___ftsub@f1+1
  3773  000598  C0A0  F039         	movff	sprintf@fval+2,___ftsub@f1+2
  3774  00059C  C09A  F018         	movff	sprintf@val,___lltoft@c
  3775  0005A0  C09B  F019         	movff	sprintf@val+1,___lltoft@c+1
  3776  0005A4  C09C  F01A         	movff	sprintf@val+2,___lltoft@c+2
  3777  0005A8  C09D  F01B         	movff	sprintf@val+3,___lltoft@c+3
  3778  0005AC  EC43  F015         	call	___lltoft	;wreg free
  3779  0005B0  C018  F03A         	movff	?___lltoft,___ftsub@f2
  3780  0005B4  C019  F03B         	movff	?___lltoft+1,___ftsub@f2+1
  3781  0005B8  C01A  F03C         	movff	?___lltoft+2,___ftsub@f2+2
  3782  0005BC  ECC4  F015         	call	___ftsub	;wreg free
  3783  0005C0  C037  F09E         	movff	?___ftsub,sprintf@fval
  3784  0005C4  C038  F09F         	movff	?___ftsub+1,sprintf@fval+1
  3785  0005C8  C039  F0A0         	movff	?___ftsub+2,sprintf@fval+2
  3786                           
  3787                           ;doprnt.c: 1133: exp = 0;
  3788  0005CC  0E00               	movlw	0
  3789  0005CE  0100               	movlb	0	; () banked
  3790  0005D0  6F95               	movwf	(sprintf@exp+1)& (0+255),b
  3791  0005D2  0E00               	movlw	0
  3792  0005D4  6F94               	movwf	sprintf@exp& (0+255),b
  3793  0005D6                     l5979:
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;doprnt.c: 1134: }
  3797                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3798  0005D6  0E01               	movlw	1
  3799  0005D8  0100               	movlb	0	; () banked
  3800  0005DA  6FA3               	movwf	sprintf@c& (0+255),b
  3801  0005DC                     l5981:
  3802                           
  3803                           ; BSR set to: 0
  3804  0005DC  0E0A               	movlw	10
  3805  0005DE  0100               	movlb	0	; () banked
  3806  0005E0  19A3               	xorwf	sprintf@c& (0+255),w,b
  3807  0005E2  B4D8               	btfsc	status,2,c
  3808  0005E4  D01E               	goto	l5993
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;doprnt.c: 1137: if(val < dpowers[c])
  3812                           
  3813                           ; BSR set to: 0
  3814                           
  3815                           ; BSR set to: 0
  3816  0005E6  0100               	movlb	0	; () banked
  3817  0005E8  51A3               	movf	sprintf@c& (0+255),w,b
  3818  0005EA  0D04               	mullw	4
  3819  0005EC  0EFB               	movlw	low _dpowers
  3820  0005EE  24F3               	addwf	prodl,w,c
  3821  0005F0  6EF6               	movwf	tblptrl,c
  3822  0005F2  0EFD               	movlw	high _dpowers
  3823  0005F4  20F4               	addwfc	prodh,w,c
  3824  0005F6  6EF7               	movwf	tblptrh,c
  3825  0005F8                     	if	0	;There are less than 3 active tblptr bytes
  3826  0005F8                     	endif
  3827  0005F8  0009               	tblrd		*+
  3828  0005FA  50F5               	movf	tablat,w,c
  3829  0005FC  0100               	movlb	0	; () banked
  3830  0005FE  5D9A               	subwf	sprintf@val& (0+255),w,b
  3831  000600  0009               	tblrd		*+
  3832  000602  50F5               	movf	tablat,w,c
  3833  000604  0100               	movlb	0	; () banked
  3834  000606  599B               	subwfb	(sprintf@val+1)& (0+255),w,b
  3835  000608  0009               	tblrd		*+
  3836  00060A  50F5               	movf	tablat,w,c
  3837  00060C  0100               	movlb	0	; () banked
  3838  00060E  599C               	subwfb	(sprintf@val+2)& (0+255),w,b
  3839  000610  0009               	tblrd		*+
  3840  000612  50F5               	movf	tablat,w,c
  3841  000614  0100               	movlb	0	; () banked
  3842  000616  599D               	subwfb	(sprintf@val+3)& (0+255),w,b
  3843  000618  A0D8               	btfss	status,0,c
  3844  00061A  D003               	goto	l5993
  3845                           
  3846                           ; BSR set to: 0
  3847                           
  3848                           ; BSR set to: 0
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;doprnt.c: 1138: break;
  3852  00061C  0100               	movlb	0	; () banked
  3853  00061E  2BA3               	incf	sprintf@c& (0+255),f,b
  3854  000620  D7DD               	goto	l5981
  3855  000622                     l5993:
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;doprnt.c: 1175: {
  3859                           ;doprnt.c: 1188: if(flag & 0x03)
  3860  000622  0E03               	movlw	3
  3861  000624  0100               	movlb	0	; () banked
  3862  000626  1592               	andwf	sprintf@flag& (0+255),w,b
  3863  000628  0100               	movlb	0	; () banked
  3864  00062A  6F83               	movwf	??_sprintf& (0+255),b
  3865  00062C  0E00               	movlw	0
  3866  00062E  0100               	movlb	0	; () banked
  3867  000630  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
  3868  000632  0100               	movlb	0	; () banked
  3869  000634  6F84               	movwf	(??_sprintf+1)& (0+255),b
  3870  000636  0100               	movlb	0	; () banked
  3871  000638  5183               	movf	??_sprintf& (0+255),w,b
  3872  00063A  0100               	movlb	0	; () banked
  3873  00063C  1184               	iorwf	(??_sprintf+1)& (0+255),w,b
  3874  00063E  B4D8               	btfsc	status,2,c
  3875  000640  D054               	goto	l6007
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3879  000642  C07C  FFD9         	movff	sprintf@sp,fsr2l
  3880  000646  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  3881  00064A  0E2D               	movlw	45
  3882  00064C  D04C               	goto	L2
  3883  00064E                     l5997:
  3884                           
  3885                           ; BSR set to: 0
  3886  00064E  0100               	movlb	0	; () banked
  3887  000650  4B7C               	infsnz	sprintf@sp& (0+255),f,b
  3888  000652  2B7D               	incf	(sprintf@sp+1)& (0+255),f,b
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;doprnt.c: 1195: }
  3892                           ;doprnt.c: 1196: while(c--) {
  3893  000654  D04A               	goto	l6007
  3894  000656                     l5999:
  3895                           
  3896                           ; BSR set to: 0
  3897                           ;doprnt.c: 1200: {
  3898                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3899  000656  C09A  F010         	movff	sprintf@val,___lldiv@dividend
  3900  00065A  C09B  F011         	movff	sprintf@val+1,___lldiv@dividend+1
  3901  00065E  C09C  F012         	movff	sprintf@val+2,___lldiv@dividend+2
  3902  000662  C09D  F013         	movff	sprintf@val+3,___lldiv@dividend+3
  3903  000666  0100               	movlb	0	; () banked
  3904  000668  51A3               	movf	sprintf@c& (0+255),w,b
  3905  00066A  0D04               	mullw	4
  3906  00066C  0EFB               	movlw	low _dpowers
  3907  00066E  24F3               	addwf	prodl,w,c
  3908  000670  6EF6               	movwf	tblptrl,c
  3909  000672  0EFD               	movlw	high _dpowers
  3910  000674  20F4               	addwfc	prodh,w,c
  3911  000676  6EF7               	movwf	tblptrh,c
  3912  000678                     	if	0	;There are less than 3 active tblptr bytes
  3913  000678                     	endif
  3914  000678  0009               	tblrd		*+
  3915  00067A  CFF5 F014          	movff	tablat,___lldiv@divisor
  3916  00067E  0009               	tblrd		*+
  3917  000680  CFF5 F015          	movff	tablat,___lldiv@divisor+1
  3918  000684  0009               	tblrd		*+
  3919  000686  CFF5 F016          	movff	tablat,___lldiv@divisor+2
  3920  00068A  000A               	tblrd		*-
  3921  00068C  CFF5 F017          	movff	tablat,___lldiv@divisor+3
  3922  000690  ECBB  F013         	call	___lldiv	;wreg free
  3923  000694  C010  F096         	movff	?___lldiv,sprintf@tmpval
  3924  000698  C011  F097         	movff	?___lldiv+1,sprintf@tmpval+1
  3925  00069C  C012  F098         	movff	?___lldiv+2,sprintf@tmpval+2
  3926  0006A0  C013  F099         	movff	?___lldiv+3,sprintf@tmpval+3
  3927                           
  3928                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3929  0006A4  C096  F01D         	movff	sprintf@tmpval,___llmod@dividend
  3930  0006A8  C097  F01E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3931  0006AC  C098  F01F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3932  0006B0  C099  F020         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3933  0006B4  0E0A               	movlw	10
  3934  0006B6  6E21               	movwf	___llmod@divisor,c
  3935  0006B8  0E00               	movlw	0
  3936  0006BA  6E22               	movwf	___llmod@divisor+1,c
  3937  0006BC  0E00               	movlw	0
  3938  0006BE  6E23               	movwf	___llmod@divisor+2,c
  3939  0006C0  0E00               	movlw	0
  3940  0006C2  6E24               	movwf	___llmod@divisor+3,c
  3941  0006C4  ECB0  F014         	call	___llmod	;wreg free
  3942  0006C8  C01D  F096         	movff	?___llmod,sprintf@tmpval
  3943  0006CC  C01E  F097         	movff	?___llmod+1,sprintf@tmpval+1
  3944  0006D0  C01F  F098         	movff	?___llmod+2,sprintf@tmpval+2
  3945  0006D4  C020  F099         	movff	?___llmod+3,sprintf@tmpval+3
  3946                           
  3947                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3948  0006D8  0100               	movlb	0	; () banked
  3949  0006DA  5196               	movf	sprintf@tmpval& (0+255),w,b
  3950  0006DC  0F30               	addlw	48
  3951  0006DE  C07C  FFD9         	movff	sprintf@sp,fsr2l
  3952  0006E2  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  3953  0006E6                     L2:
  3954  0006E6  6EDF               	movwf	indf2,c
  3955  0006E8  D7B2               	goto	l5997
  3956  0006EA                     l6007:
  3957                           
  3958                           ; BSR set to: 0
  3959  0006EA  0100               	movlb	0	; () banked
  3960  0006EC  07A3               	decf	sprintf@c& (0+255),f,b
  3961  0006EE  0100               	movlb	0	; () banked
  3962  0006F0  29A3               	incf	sprintf@c& (0+255),w,b
  3963  0006F2  B4D8               	btfsc	status,2,c
  3964  0006F4  D00E               	goto	l6015
  3965  0006F6  D7AF               	goto	l5999
  3966  0006F8                     l6009:
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3970  0006F8  C07C  FFD9         	movff	sprintf@sp,fsr2l
  3971  0006FC  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  3972  000700  0E30               	movlw	48
  3973  000702  6EDF               	movwf	indf2,c
  3974                           
  3975                           ; BSR set to: 0
  3976  000704  0100               	movlb	0	; () banked
  3977  000706  4B7C               	infsnz	sprintf@sp& (0+255),f,b
  3978  000708  2B7D               	incf	(sprintf@sp+1)& (0+255),f,b
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;doprnt.c: 1209: exp--;
  3982  00070A  0100               	movlb	0	; () banked
  3983  00070C  0794               	decf	sprintf@exp& (0+255),f,b
  3984  00070E  A0D8               	btfss	status,0,c
  3985  000710  0795               	decf	(sprintf@exp+1)& (0+255),f,b
  3986  000712                     l6015:
  3987                           
  3988                           ; BSR set to: 0
  3989  000712  0100               	movlb	0	; () banked
  3990  000714  BF95               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3991  000716  D007               	goto	l6017
  3992  000718  0100               	movlb	0	; () banked
  3993  00071A  5195               	movf	(sprintf@exp+1)& (0+255),w,b
  3994  00071C  E1ED               	bnz	l6009
  3995  00071E  0100               	movlb	0	; () banked
  3996  000720  0594               	decf	sprintf@exp& (0+255),w,b
  3997  000722  B0D8               	btfsc	status,0,c
  3998  000724  D7E9               	goto	l6009
  3999  000726                     l6017:
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;doprnt.c: 1210: }
  4003                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4004  000726  0100               	movlb	0	; () banked
  4005  000728  BFA2               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4006  00072A  D00C               	goto	l622
  4007  00072C  0100               	movlb	0	; () banked
  4008  00072E  51A2               	movf	(sprintf@prec+1)& (0+255),w,b
  4009  000730  E105               	bnz	u6490
  4010  000732  0E09               	movlw	9
  4011  000734  0100               	movlb	0	; () banked
  4012  000736  5DA1               	subwf	sprintf@prec& (0+255),w,b
  4013  000738  A0D8               	btfss	status,0,c
  4014  00073A  D004               	goto	l622
  4015  00073C                     u6490:
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4019  00073C  0E08               	movlw	8
  4020  00073E  0100               	movlb	0	; () banked
  4021  000740  6FA3               	movwf	sprintf@c& (0+255),b
  4022  000742  D002               	goto	l6021
  4023  000744                     l622:
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;doprnt.c: 1213: else
  4027                           ;doprnt.c: 1214: c = prec;
  4028  000744  C0A1  F0A3         	movff	sprintf@prec,sprintf@c
  4029  000748                     l6021:
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;doprnt.c: 1215: prec -= c;
  4033  000748  0100               	movlb	0	; () banked
  4034  00074A  51A3               	movf	sprintf@c& (0+255),w,b
  4035  00074C  0100               	movlb	0	; () banked
  4036  00074E  5FA1               	subwf	sprintf@prec& (0+255),f,b
  4037  000750  0E00               	movlw	0
  4038  000752  0100               	movlb	0	; () banked
  4039  000754  BFA3               	btfsc	sprintf@c& (0+255),7,b
  4040  000756  0EFF               	movlw	255
  4041  000758  0100               	movlb	0	; () banked
  4042  00075A  5BA2               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;doprnt.c: 1219: if(c)
  4046  00075C  0100               	movlb	0	; () banked
  4047  00075E  51A3               	movf	sprintf@c& (0+255),w,b
  4048  000760  0100               	movlb	0	; () banked
  4049  000762  B4D8               	btfsc	status,2,c
  4050  000764  D009               	goto	l6029
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4054  000766  C07C  FFD9         	movff	sprintf@sp,fsr2l
  4055  00076A  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  4056  00076E  0E2E               	movlw	46
  4057  000770  6EDF               	movwf	indf2,c
  4058                           
  4059                           ; BSR set to: 0
  4060  000772  0100               	movlb	0	; () banked
  4061  000774  4B7C               	infsnz	sprintf@sp& (0+255),f,b
  4062  000776  2B7D               	incf	(sprintf@sp+1)& (0+255),f,b
  4063  000778                     l6029:
  4064                           
  4065                           ; BSR set to: 0
  4066                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4067  000778  0100               	movlb	0	; () banked
  4068  00077A  51A3               	movf	sprintf@c& (0+255),w,b
  4069  00077C  EC5B  F008         	call	_scale
  4070  000780  C066  F089         	movff	?_scale,_sprintf$2545
  4071  000784  C067  F08A         	movff	?_scale+1,_sprintf$2545+1
  4072  000788  C068  F08B         	movff	?_scale+2,_sprintf$2545+2
  4073                           
  4074                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4075  00078C  C09E  F03A         	movff	sprintf@fval,___ftmul@f2
  4076  000790  C09F  F03B         	movff	sprintf@fval+1,___ftmul@f2+1
  4077  000794  C0A0  F03C         	movff	sprintf@fval+2,___ftmul@f2+2
  4078  000798  C089  F037         	movff	_sprintf$2545,___ftmul@f1
  4079  00079C  C08A  F038         	movff	_sprintf$2545+1,___ftmul@f1+1
  4080  0007A0  C08B  F039         	movff	_sprintf$2545+2,___ftmul@f1+2
  4081  0007A4  EC1F  F011         	call	___ftmul	;wreg free
  4082  0007A8  C037  F06D         	movff	?___ftmul,___fttol@f1
  4083  0007AC  C038  F06E         	movff	?___ftmul+1,___fttol@f1+1
  4084  0007B0  C039  F06F         	movff	?___ftmul+2,___fttol@f1+2
  4085  0007B4  EC19  F00E         	call	___fttol	;wreg free
  4086  0007B8  C06D  F09A         	movff	?___fttol,sprintf@val
  4087  0007BC  C06E  F09B         	movff	?___fttol+1,sprintf@val+1
  4088  0007C0  C06F  F09C         	movff	?___fttol+2,sprintf@val+2
  4089  0007C4  C070  F09D         	movff	?___fttol+3,sprintf@val+3
  4090                           
  4091                           ;doprnt.c: 1228: while(c--) {
  4092  0007C8  D073               	goto	l6043
  4093  0007CA                     l6033:
  4094                           
  4095                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4096  0007CA  C09A  F010         	movff	sprintf@val,___lldiv@dividend
  4097  0007CE  C09B  F011         	movff	sprintf@val+1,___lldiv@dividend+1
  4098  0007D2  C09C  F012         	movff	sprintf@val+2,___lldiv@dividend+2
  4099  0007D6  C09D  F013         	movff	sprintf@val+3,___lldiv@dividend+3
  4100  0007DA  0100               	movlb	0	; () banked
  4101  0007DC  51A3               	movf	sprintf@c& (0+255),w,b
  4102  0007DE  0D04               	mullw	4
  4103  0007E0  0EFB               	movlw	low _dpowers
  4104  0007E2  24F3               	addwf	prodl,w,c
  4105  0007E4  6EF6               	movwf	tblptrl,c
  4106  0007E6  0EFD               	movlw	high _dpowers
  4107  0007E8  20F4               	addwfc	prodh,w,c
  4108  0007EA  6EF7               	movwf	tblptrh,c
  4109  0007EC                     	if	0	;There are less than 3 active tblptr bytes
  4110  0007EC                     	endif
  4111  0007EC  0009               	tblrd		*+
  4112  0007EE  CFF5 F014          	movff	tablat,___lldiv@divisor
  4113  0007F2  0009               	tblrd		*+
  4114  0007F4  CFF5 F015          	movff	tablat,___lldiv@divisor+1
  4115  0007F8  0009               	tblrd		*+
  4116  0007FA  CFF5 F016          	movff	tablat,___lldiv@divisor+2
  4117  0007FE  000A               	tblrd		*-
  4118  000800  CFF5 F017          	movff	tablat,___lldiv@divisor+3
  4119  000804  ECBB  F013         	call	___lldiv	;wreg free
  4120  000808  C010  F096         	movff	?___lldiv,sprintf@tmpval
  4121  00080C  C011  F097         	movff	?___lldiv+1,sprintf@tmpval+1
  4122  000810  C012  F098         	movff	?___lldiv+2,sprintf@tmpval+2
  4123  000814  C013  F099         	movff	?___lldiv+3,sprintf@tmpval+3
  4124                           
  4125                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4126  000818  C096  F01D         	movff	sprintf@tmpval,___llmod@dividend
  4127  00081C  C097  F01E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4128  000820  C098  F01F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4129  000824  C099  F020         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4130  000828  0E0A               	movlw	10
  4131  00082A  6E21               	movwf	___llmod@divisor,c
  4132  00082C  0E00               	movlw	0
  4133  00082E  6E22               	movwf	___llmod@divisor+1,c
  4134  000830  0E00               	movlw	0
  4135  000832  6E23               	movwf	___llmod@divisor+2,c
  4136  000834  0E00               	movlw	0
  4137  000836  6E24               	movwf	___llmod@divisor+3,c
  4138  000838  ECB0  F014         	call	___llmod	;wreg free
  4139  00083C  C01D  F096         	movff	?___llmod,sprintf@tmpval
  4140  000840  C01E  F097         	movff	?___llmod+1,sprintf@tmpval+1
  4141  000844  C01F  F098         	movff	?___llmod+2,sprintf@tmpval+2
  4142  000848  C020  F099         	movff	?___llmod+3,sprintf@tmpval+3
  4143                           
  4144                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4145  00084C  0100               	movlb	0	; () banked
  4146  00084E  5196               	movf	sprintf@tmpval& (0+255),w,b
  4147  000850  0F30               	addlw	48
  4148  000852  C07C  FFD9         	movff	sprintf@sp,fsr2l
  4149  000856  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  4150  00085A  6EDF               	movwf	indf2,c
  4151                           
  4152                           ; BSR set to: 0
  4153  00085C  0100               	movlb	0	; () banked
  4154  00085E  4B7C               	infsnz	sprintf@sp& (0+255),f,b
  4155  000860  2B7D               	incf	(sprintf@sp+1)& (0+255),f,b
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;doprnt.c: 1232: val %= dpowers[c];
  4159  000862  C09A  F01D         	movff	sprintf@val,___llmod@dividend
  4160  000866  C09B  F01E         	movff	sprintf@val+1,___llmod@dividend+1
  4161  00086A  C09C  F01F         	movff	sprintf@val+2,___llmod@dividend+2
  4162  00086E  C09D  F020         	movff	sprintf@val+3,___llmod@dividend+3
  4163  000872  0100               	movlb	0	; () banked
  4164  000874  51A3               	movf	sprintf@c& (0+255),w,b
  4165  000876  0D04               	mullw	4
  4166  000878  0EFB               	movlw	low _dpowers
  4167  00087A  24F3               	addwf	prodl,w,c
  4168  00087C  6EF6               	movwf	tblptrl,c
  4169  00087E  0EFD               	movlw	high _dpowers
  4170  000880  20F4               	addwfc	prodh,w,c
  4171  000882  6EF7               	movwf	tblptrh,c
  4172  000884                     	if	0	;There are less than 3 active tblptr bytes
  4173  000884                     	endif
  4174  000884  0009               	tblrd		*+
  4175  000886  CFF5 F021          	movff	tablat,___llmod@divisor
  4176  00088A  0009               	tblrd		*+
  4177  00088C  CFF5 F022          	movff	tablat,___llmod@divisor+1
  4178  000890  0009               	tblrd		*+
  4179  000892  CFF5 F023          	movff	tablat,___llmod@divisor+2
  4180  000896  000A               	tblrd		*-
  4181  000898  CFF5 F024          	movff	tablat,___llmod@divisor+3
  4182  00089C  ECB0  F014         	call	___llmod	;wreg free
  4183  0008A0  C01D  F09A         	movff	?___llmod,sprintf@val
  4184  0008A4  C01E  F09B         	movff	?___llmod+1,sprintf@val+1
  4185  0008A8  C01F  F09C         	movff	?___llmod+2,sprintf@val+2
  4186  0008AC  C020  F09D         	movff	?___llmod+3,sprintf@val+3
  4187  0008B0                     l6043:
  4188  0008B0  0100               	movlb	0	; () banked
  4189  0008B2  07A3               	decf	sprintf@c& (0+255),f,b
  4190  0008B4  0100               	movlb	0	; () banked
  4191  0008B6  29A3               	incf	sprintf@c& (0+255),w,b
  4192  0008B8  B4D8               	btfsc	status,2,c
  4193  0008BA  D00E               	goto	l6051
  4194  0008BC  D786               	goto	l6033
  4195  0008BE                     l6045:
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4199  0008BE  C07C  FFD9         	movff	sprintf@sp,fsr2l
  4200  0008C2  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  4201  0008C6  0E30               	movlw	48
  4202  0008C8  6EDF               	movwf	indf2,c
  4203                           
  4204                           ; BSR set to: 0
  4205  0008CA  0100               	movlb	0	; () banked
  4206  0008CC  4B7C               	infsnz	sprintf@sp& (0+255),f,b
  4207  0008CE  2B7D               	incf	(sprintf@sp+1)& (0+255),f,b
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;doprnt.c: 1237: prec--;
  4211  0008D0  0100               	movlb	0	; () banked
  4212  0008D2  07A1               	decf	sprintf@prec& (0+255),f,b
  4213  0008D4  A0D8               	btfss	status,0,c
  4214  0008D6  07A2               	decf	(sprintf@prec+1)& (0+255),f,b
  4215  0008D8                     l6051:
  4216                           
  4217                           ; BSR set to: 0
  4218  0008D8  0100               	movlb	0	; () banked
  4219  0008DA  51A1               	movf	sprintf@prec& (0+255),w,b
  4220  0008DC  0100               	movlb	0	; () banked
  4221  0008DE  11A2               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4222  0008E0  B4D8               	btfsc	status,2,c
  4223  0008E2  D0F2               	goto	l6105
  4224  0008E4  D7EC               	goto	l6045
  4225  0008E6                     l6053:
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;doprnt.c: 1246: }
  4229                           ;doprnt.c: 1253: {
  4230                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4231  0008E6  C090  FFD9         	movff	sprintf@ap,fsr2l
  4232  0008EA  C091  FFDA         	movff	sprintf@ap+1,fsr2h
  4233  0008EE  CFDE F09A          	movff	postinc2,sprintf@val
  4234  0008F2  CFDD F09B          	movff	postdec2,sprintf@val+1
  4235  0008F6  0100               	movlb	0	; () banked
  4236  0008F8  0E00               	movlw	0
  4237  0008FA  BF9B               	btfsc	(sprintf@val+1)& (0+255),7,b
  4238  0008FC  0EFF               	movlw	-1
  4239  0008FE  6F9C               	movwf	(sprintf@val+2)& (0+255),b
  4240  000900  6F9D               	movwf	(sprintf@val+3)& (0+255),b
  4241                           
  4242                           ; BSR set to: 0
  4243  000902  0E02               	movlw	2
  4244  000904  0100               	movlb	0	; () banked
  4245  000906  2790               	addwf	sprintf@ap& (0+255),f,b
  4246  000908  0E00               	movlw	0
  4247  00090A  2391               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4248                           
  4249                           ; BSR set to: 0
  4250                           ;doprnt.c: 1261: if((long)val < 0) {
  4251  00090C  0100               	movlb	0	; () banked
  4252  00090E  AF9D               	btfss	(sprintf@val+3)& (0+255),7,b
  4253  000910  D00C               	goto	l6063
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;doprnt.c: 1262: flag |= 0x03;
  4257  000912  0E03               	movlw	3
  4258  000914  0100               	movlb	0	; () banked
  4259  000916  1392               	iorwf	sprintf@flag& (0+255),f,b
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;doprnt.c: 1263: val = -val;
  4263  000918  0100               	movlb	0	; () banked
  4264  00091A  1F9D               	comf	(sprintf@val+3)& (0+255),f,b
  4265  00091C  1F9C               	comf	(sprintf@val+2)& (0+255),f,b
  4266  00091E  1F9B               	comf	(sprintf@val+1)& (0+255),f,b
  4267  000920  6D9A               	negf	sprintf@val& (0+255),b
  4268  000922  0E00               	movlw	0
  4269  000924  239B               	addwfc	(sprintf@val+1)& (0+255),f,b
  4270  000926  239C               	addwfc	(sprintf@val+2)& (0+255),f,b
  4271  000928  239D               	addwfc	(sprintf@val+3)& (0+255),f,b
  4272  00092A                     l6063:
  4273                           
  4274                           ; BSR set to: 0
  4275                           ;doprnt.c: 1264: }
  4276                           ;doprnt.c: 1266: }
  4277                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4278  00092A  0100               	movlb	0	; () banked
  4279  00092C  51A1               	movf	sprintf@prec& (0+255),w,b
  4280  00092E  0100               	movlb	0	; () banked
  4281  000930  11A2               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4282  000932  A4D8               	btfss	status,2,c
  4283  000934  D00D               	goto	l6069
  4284                           
  4285                           ; BSR set to: 0
  4286  000936  0100               	movlb	0	; () banked
  4287  000938  519A               	movf	sprintf@val& (0+255),w,b
  4288  00093A  0100               	movlb	0	; () banked
  4289  00093C  119B               	iorwf	(sprintf@val+1)& (0+255),w,b
  4290  00093E  0100               	movlb	0	; () banked
  4291  000940  119C               	iorwf	(sprintf@val+2)& (0+255),w,b
  4292  000942  0100               	movlb	0	; () banked
  4293  000944  119D               	iorwf	(sprintf@val+3)& (0+255),w,b
  4294  000946  A4D8               	btfss	status,2,c
  4295  000948  D003               	goto	l6069
  4296                           
  4297                           ; BSR set to: 0
  4298                           ;doprnt.c: 1291: prec++;
  4299  00094A  0100               	movlb	0	; () banked
  4300  00094C  4BA1               	infsnz	sprintf@prec& (0+255),f,b
  4301  00094E  2BA2               	incf	(sprintf@prec+1)& (0+255),f,b
  4302  000950                     l6069:
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4306  000950  0E01               	movlw	1
  4307  000952  0100               	movlb	0	; () banked
  4308  000954  6FA3               	movwf	sprintf@c& (0+255),b
  4309  000956                     l6071:
  4310                           
  4311                           ; BSR set to: 0
  4312  000956  0E0A               	movlw	10
  4313  000958  0100               	movlb	0	; () banked
  4314  00095A  19A3               	xorwf	sprintf@c& (0+255),w,b
  4315  00095C  B4D8               	btfsc	status,2,c
  4316  00095E  D01E               	goto	l6083
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;doprnt.c: 1306: if(val < dpowers[c])
  4320                           
  4321                           ; BSR set to: 0
  4322                           
  4323                           ; BSR set to: 0
  4324  000960  0100               	movlb	0	; () banked
  4325  000962  51A3               	movf	sprintf@c& (0+255),w,b
  4326  000964  0D04               	mullw	4
  4327  000966  0EFB               	movlw	low _dpowers
  4328  000968  24F3               	addwf	prodl,w,c
  4329  00096A  6EF6               	movwf	tblptrl,c
  4330  00096C  0EFD               	movlw	high _dpowers
  4331  00096E  20F4               	addwfc	prodh,w,c
  4332  000970  6EF7               	movwf	tblptrh,c
  4333  000972                     	if	0	;There are less than 3 active tblptr bytes
  4334  000972                     	endif
  4335  000972  0009               	tblrd		*+
  4336  000974  50F5               	movf	tablat,w,c
  4337  000976  0100               	movlb	0	; () banked
  4338  000978  5D9A               	subwf	sprintf@val& (0+255),w,b
  4339  00097A  0009               	tblrd		*+
  4340  00097C  50F5               	movf	tablat,w,c
  4341  00097E  0100               	movlb	0	; () banked
  4342  000980  599B               	subwfb	(sprintf@val+1)& (0+255),w,b
  4343  000982  0009               	tblrd		*+
  4344  000984  50F5               	movf	tablat,w,c
  4345  000986  0100               	movlb	0	; () banked
  4346  000988  599C               	subwfb	(sprintf@val+2)& (0+255),w,b
  4347  00098A  0009               	tblrd		*+
  4348  00098C  50F5               	movf	tablat,w,c
  4349  00098E  0100               	movlb	0	; () banked
  4350  000990  599D               	subwfb	(sprintf@val+3)& (0+255),w,b
  4351  000992  A0D8               	btfss	status,0,c
  4352  000994  D003               	goto	l6083
  4353                           
  4354                           ; BSR set to: 0
  4355                           
  4356                           ; BSR set to: 0
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;doprnt.c: 1307: break;
  4360  000996  0100               	movlb	0	; () banked
  4361  000998  2BA3               	incf	sprintf@c& (0+255),f,b
  4362  00099A  D7DD               	goto	l6071
  4363  00099C                     l6083:
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;doprnt.c: 1339: if(c < prec)
  4367  00099C  0E80               	movlw	128
  4368  00099E  0100               	movlb	0	; () banked
  4369  0009A0  BFA3               	btfsc	sprintf@c& (0+255),7,b
  4370  0009A2  0E7F               	movlw	127
  4371  0009A4  0100               	movlb	0	; () banked
  4372  0009A6  6F83               	movwf	??_sprintf& (0+255),b
  4373  0009A8  0100               	movlb	0	; () banked
  4374  0009AA  51A1               	movf	sprintf@prec& (0+255),w,b
  4375  0009AC  0100               	movlb	0	; () banked
  4376  0009AE  5DA3               	subwf	sprintf@c& (0+255),w,b
  4377  0009B0  0100               	movlb	0	; () banked
  4378  0009B2  51A2               	movf	(sprintf@prec+1)& (0+255),w,b
  4379  0009B4  0A80               	xorlw	128
  4380  0009B6  0100               	movlb	0	; () banked
  4381  0009B8  5983               	subwfb	??_sprintf& (0+255),w,b
  4382  0009BA  B0D8               	btfsc	status,0,c
  4383  0009BC  D003               	goto	l6087
  4384                           
  4385                           ; BSR set to: 0
  4386                           ;doprnt.c: 1340: c = prec;
  4387  0009BE  C0A1  F0A3         	movff	sprintf@prec,sprintf@c
  4388  0009C2  D018               	goto	l6091
  4389  0009C4                     l6087:
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;doprnt.c: 1341: else if(prec < c)
  4393  0009C4  0100               	movlb	0	; () banked
  4394  0009C6  51A2               	movf	(sprintf@prec+1)& (0+255),w,b
  4395  0009C8  0A80               	xorlw	128
  4396  0009CA  0100               	movlb	0	; () banked
  4397  0009CC  6F83               	movwf	??_sprintf& (0+255),b
  4398  0009CE  0100               	movlb	0	; () banked
  4399  0009D0  51A3               	movf	sprintf@c& (0+255),w,b
  4400  0009D2  0100               	movlb	0	; () banked
  4401  0009D4  5DA1               	subwf	sprintf@prec& (0+255),w,b
  4402  0009D6  0E80               	movlw	128
  4403  0009D8  0100               	movlb	0	; () banked
  4404  0009DA  BFA3               	btfsc	sprintf@c& (0+255),7,b
  4405  0009DC  0E7F               	movlw	127
  4406  0009DE  0100               	movlb	0	; () banked
  4407  0009E0  5983               	subwfb	??_sprintf& (0+255),w,b
  4408  0009E2  B0D8               	btfsc	status,0,c
  4409  0009E4  D007               	goto	l6091
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;doprnt.c: 1342: prec = c;
  4413  0009E6  0100               	movlb	0	; () banked
  4414  0009E8  51A3               	movf	sprintf@c& (0+255),w,b
  4415  0009EA  0100               	movlb	0	; () banked
  4416  0009EC  6FA1               	movwf	sprintf@prec& (0+255),b
  4417  0009EE  6BA2               	clrf	(sprintf@prec+1)& (0+255),b
  4418  0009F0  BFA1               	btfsc	sprintf@prec& (0+255),7,b
  4419  0009F2  07A2               	decf	(sprintf@prec+1)& (0+255),f,b
  4420  0009F4                     l6091:
  4421                           
  4422                           ; BSR set to: 0
  4423                           ;doprnt.c: 1422: {
  4424                           ;doprnt.c: 1438: if(flag & 0x03)
  4425  0009F4  0E03               	movlw	3
  4426  0009F6  0100               	movlb	0	; () banked
  4427  0009F8  1592               	andwf	sprintf@flag& (0+255),w,b
  4428  0009FA  0100               	movlb	0	; () banked
  4429  0009FC  6F83               	movwf	??_sprintf& (0+255),b
  4430  0009FE  0E00               	movlw	0
  4431  000A00  0100               	movlb	0	; () banked
  4432  000A02  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
  4433  000A04  0100               	movlb	0	; () banked
  4434  000A06  6F84               	movwf	(??_sprintf+1)& (0+255),b
  4435  000A08  0100               	movlb	0	; () banked
  4436  000A0A  5183               	movf	??_sprintf& (0+255),w,b
  4437  000A0C  0100               	movlb	0	; () banked
  4438  000A0E  1184               	iorwf	(??_sprintf+1)& (0+255),w,b
  4439  000A10  B4D8               	btfsc	status,2,c
  4440  000A12  D04F               	goto	l6103
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4444  000A14  C07C  FFD9         	movff	sprintf@sp,fsr2l
  4445  000A18  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  4446  000A1C  0E2D               	movlw	45
  4447  000A1E  6EDF               	movwf	indf2,c
  4448  000A20  D045               	goto	l6101
  4449  000A22                     l6097:
  4450                           
  4451                           ; BSR set to: 0
  4452                           ;doprnt.c: 1478: {
  4453                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4454  000A22  C0A1  F083         	movff	sprintf@prec,??_sprintf
  4455  000A26  C0A2  F084         	movff	sprintf@prec+1,??_sprintf+1
  4456  000A2A  0100               	movlb	0	; () banked
  4457  000A2C  90D8               	bcf	status,0,c
  4458  000A2E  3783               	rlcf	??_sprintf& (0+255),f,b
  4459  000A30  3784               	rlcf	(??_sprintf+1)& (0+255),f,b
  4460  000A32  0100               	movlb	0	; () banked
  4461  000A34  90D8               	bcf	status,0,c
  4462  000A36  3783               	rlcf	??_sprintf& (0+255),f,b
  4463  000A38  3784               	rlcf	(??_sprintf+1)& (0+255),f,b
  4464  000A3A  0EFB               	movlw	low _dpowers
  4465  000A3C  0100               	movlb	0	; () banked
  4466  000A3E  2583               	addwf	??_sprintf& (0+255),w,b
  4467  000A40  6EF6               	movwf	tblptrl,c
  4468  000A42  0EFD               	movlw	high _dpowers
  4469  000A44  2184               	addwfc	(??_sprintf+1)& (0+255),w,b
  4470  000A46  6EF7               	movwf	tblptrh,c
  4471  000A48                     	if	0	;There are less than 3 active tblptr bytes
  4472  000A48                     	endif
  4473  000A48  0009               	tblrd		*+
  4474  000A4A  CFF5 F014          	movff	tablat,___lldiv@divisor
  4475  000A4E  0009               	tblrd		*+
  4476  000A50  CFF5 F015          	movff	tablat,___lldiv@divisor+1
  4477  000A54  0009               	tblrd		*+
  4478  000A56  CFF5 F016          	movff	tablat,___lldiv@divisor+2
  4479  000A5A  000A               	tblrd		*-
  4480  000A5C  CFF5 F017          	movff	tablat,___lldiv@divisor+3
  4481  000A60  C09A  F010         	movff	sprintf@val,___lldiv@dividend
  4482  000A64  C09B  F011         	movff	sprintf@val+1,___lldiv@dividend+1
  4483  000A68  C09C  F012         	movff	sprintf@val+2,___lldiv@dividend+2
  4484  000A6C  C09D  F013         	movff	sprintf@val+3,___lldiv@dividend+3
  4485  000A70  ECBB  F013         	call	___lldiv	;wreg free
  4486  000A74  C010  F01D         	movff	?___lldiv,___llmod@dividend
  4487  000A78  C011  F01E         	movff	?___lldiv+1,___llmod@dividend+1
  4488  000A7C  C012  F01F         	movff	?___lldiv+2,___llmod@dividend+2
  4489  000A80  C013  F020         	movff	?___lldiv+3,___llmod@dividend+3
  4490  000A84  0E0A               	movlw	10
  4491  000A86  6E21               	movwf	___llmod@divisor,c
  4492  000A88  0E00               	movlw	0
  4493  000A8A  6E22               	movwf	___llmod@divisor+1,c
  4494  000A8C  0E00               	movlw	0
  4495  000A8E  6E23               	movwf	___llmod@divisor+2,c
  4496  000A90  0E00               	movlw	0
  4497  000A92  6E24               	movwf	___llmod@divisor+3,c
  4498  000A94  ECB0  F014         	call	___llmod	;wreg free
  4499  000A98  501D               	movf	?___llmod,w,c
  4500  000A9A  0F30               	addlw	48
  4501  000A9C  0100               	movlb	0	; () banked
  4502  000A9E  6FA3               	movwf	sprintf@c& (0+255),b
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;doprnt.c: 1523: }
  4506                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4507  000AA0  C07C  FFD9         	movff	sprintf@sp,fsr2l
  4508  000AA4  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  4509  000AA8  C0A3  FFDF         	movff	sprintf@c,indf2
  4510  000AAC                     l6101:
  4511                           
  4512                           ; BSR set to: 0
  4513  000AAC  0100               	movlb	0	; () banked
  4514  000AAE  4B7C               	infsnz	sprintf@sp& (0+255),f,b
  4515  000AB0  2B7D               	incf	(sprintf@sp+1)& (0+255),f,b
  4516  000AB2                     l6103:
  4517                           
  4518                           ; BSR set to: 0
  4519  000AB2  0100               	movlb	0	; () banked
  4520  000AB4  07A1               	decf	sprintf@prec& (0+255),f,b
  4521  000AB6  A0D8               	btfss	status,0,c
  4522  000AB8  07A2               	decf	(sprintf@prec+1)& (0+255),f,b
  4523  000ABA  0100               	movlb	0	; () banked
  4524  000ABC  29A1               	incf	sprintf@prec& (0+255),w,b
  4525  000ABE  E1B1               	bnz	l6097
  4526  000AC0  0100               	movlb	0	; () banked
  4527  000AC2  29A2               	incf	(sprintf@prec+1)& (0+255),w,b
  4528  000AC4  A4D8               	btfss	status,2,c
  4529  000AC6  D7AD               	goto	l6097
  4530  000AC8                     l6105:
  4531                           
  4532                           ; BSR set to: 0
  4533  000AC8  C07E  FFF6         	movff	sprintf@f,tblptrl
  4534  000ACC  C07F  FFF7         	movff	sprintf@f+1,tblptrh
  4535  000AD0  0100               	movlb	0	; () banked
  4536  000AD2  4B7E               	infsnz	sprintf@f& (0+255),f,b
  4537  000AD4  2B7F               	incf	(sprintf@f+1)& (0+255),f,b
  4538  000AD6                     	if	0	;tblptru may be non-zero
  4539  000AD6                     	endif
  4540  000AD6                     	if	0	;tblptru may be non-zero
  4541  000AD6                     	endif
  4542  000AD6  0008               	tblrd		*
  4543  000AD8  CFF5 F0A3          	movff	tablat,sprintf@c
  4544  000ADC  0100               	movlb	0	; () banked
  4545  000ADE  51A3               	movf	sprintf@c& (0+255),w,b
  4546  000AE0  A4D8               	btfss	status,2,c
  4547  000AE2  EFA1  F000         	goto	l5857
  4548  000AE6                     l6107:
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;doprnt.c: 1538: *sp = 0;
  4552  000AE6  C07C  FFD9         	movff	sprintf@sp,fsr2l
  4553  000AEA  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  4554  000AEE  0E00               	movlw	0
  4555  000AF0  6EDF               	movwf	indf2,c
  4556  000AF2  0012               	return	
  4557  000AF4                     __end_of_sprintf:
  4558                           	opt stack 0
  4559                           tblptru	equ	0xFF8
  4560                           tblptrh	equ	0xFF7
  4561                           tblptrl	equ	0xFF6
  4562                           tablat	equ	0xFF5
  4563                           prodh	equ	0xFF4
  4564                           prodl	equ	0xFF3
  4565                           postinc0	equ	0xFEE
  4566                           wreg	equ	0xFE8
  4567                           indf1	equ	0xFE7
  4568                           postdec1	equ	0xFE5
  4569                           fsr1h	equ	0xFE2
  4570                           fsr1l	equ	0xFE1
  4571                           indf2	equ	0xFDF
  4572                           postinc2	equ	0xFDE
  4573                           postdec2	equ	0xFDD
  4574                           fsr2h	equ	0xFDA
  4575                           fsr2l	equ	0xFD9
  4576                           status	equ	0xFD8
  4577                           
  4578 ;; *************** function _scale *****************
  4579 ;; Defined at:
  4580 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;  scl             1    wreg     char 
  4583 ;; Auto vars:     Size  Location     Type
  4584 ;;  scl             1   12[BANK0 ] char 
  4585 ;; Return value:  Size  Location     Type
  4586 ;;                  3    6[BANK0 ] char 
  4587 ;; Registers used:
  4588 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4589 ;; Tracked objects:
  4590 ;;		On entry : 0/0
  4591 ;;		On exit  : 0/0
  4592 ;;		Unchanged: 0/0
  4593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4594 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;Total ram usage:        7 bytes
  4599 ;; Hardware stack levels used:    1
  4600 ;; Hardware stack levels required when called:    4
  4601 ;; This function calls:
  4602 ;;		___awdiv
  4603 ;;		___awmod
  4604 ;;		___ftmul
  4605 ;;		___wmul
  4606 ;; This function is called by:
  4607 ;;		_sprintf
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           	psect	text4
  4612  0010B6                     __ptext4:
  4613                           	opt stack 0
  4614  0010B6                     _scale:
  4615                           	opt stack 24
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;incstack = 0
  4619                           ;scale@scl stored from wreg
  4620  0010B6  0100               	movlb	0	; () banked
  4621  0010B8  6F6C               	movwf	scale@scl& (0+255),b
  4622                           
  4623                           ;doprnt.c: 428: if(scl < 0) {
  4624  0010BA  0100               	movlb	0	; () banked
  4625  0010BC  AF6C               	btfss	scale@scl& (0+255),7,b
  4626  0010BE  D104               	goto	l5379
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;doprnt.c: 429: scl = -scl;
  4630  0010C0  0100               	movlb	0	; () banked
  4631  0010C2  6D6C               	negf	scale@scl& (0+255),b
  4632                           
  4633                           ;doprnt.c: 430: if(scl>=110)
  4634  0010C4  0100               	movlb	0	; () banked
  4635  0010C6  516C               	movf	scale@scl& (0+255),w,b
  4636  0010C8  0A80               	xorlw	128
  4637  0010CA  0F12               	addlw	-238
  4638  0010CC  A0D8               	btfss	status,0,c
  4639  0010CE  D094               	goto	l5369
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4643  0010D0  0E00               	movlw	0
  4644  0010D2  6E21               	movwf	___wmul@multiplicand+1,c
  4645  0010D4  0E03               	movlw	3
  4646  0010D6  6E20               	movwf	___wmul@multiplicand,c
  4647  0010D8  0E00               	movlw	0
  4648  0010DA  6E19               	movwf	___awdiv@divisor+1,c
  4649  0010DC  0E0A               	movlw	10
  4650  0010DE  6E18               	movwf	___awdiv@divisor,c
  4651  0010E0  0E00               	movlw	0
  4652  0010E2  6E13               	movwf	___awmod@divisor+1,c
  4653  0010E4  0E64               	movlw	100
  4654  0010E6  6E12               	movwf	___awmod@divisor,c
  4655  0010E8  0100               	movlb	0	; () banked
  4656  0010EA  516C               	movf	scale@scl& (0+255),w,b
  4657  0010EC  6E10               	movwf	___awmod@dividend,c
  4658  0010EE  6A11               	clrf	___awmod@dividend+1,c
  4659  0010F0  BE10               	btfsc	___awmod@dividend,7,c
  4660  0010F2  0611               	decf	___awmod@dividend+1,f,c
  4661  0010F4  EC78  F014         	call	___awmod	;wreg free
  4662  0010F8  C010  F016         	movff	?___awmod,___awdiv@dividend
  4663  0010FC  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  4664  001100  EC79  F013         	call	___awdiv	;wreg free
  4665  001104  0E09               	movlw	9
  4666  001106  2416               	addwf	?___awdiv,w,c
  4667  001108  6E1E               	movwf	___wmul@multiplier,c
  4668  00110A  0E00               	movlw	0
  4669  00110C  2017               	addwfc	?___awdiv+1,w,c
  4670  00110E  6E1F               	movwf	___wmul@multiplier+1,c
  4671  001110  EC5E  F016         	call	___wmul	;wreg free
  4672  001114  0E23               	movlw	low __npowers_
  4673  001116  241E               	addwf	?___wmul,w,c
  4674  001118  6EF6               	movwf	tblptrl,c
  4675  00111A  0EFE               	movlw	high __npowers_
  4676  00111C  201F               	addwfc	?___wmul+1,w,c
  4677  00111E  6EF7               	movwf	tblptrh,c
  4678  001120                     	if	0	;There are less than 3 active tblptr bytes
  4679  001120                     	endif
  4680  001120  0009               	tblrd		*+
  4681  001122  CFF5 F03A          	movff	tablat,___ftmul@f2
  4682  001126  0009               	tblrd		*+
  4683  001128  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  4684  00112C  000A               	tblrd		*-
  4685  00112E  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  4686  001132  0E00               	movlw	0
  4687  001134  6E19               	movwf	___awdiv@divisor+1,c
  4688  001136  0E64               	movlw	100
  4689  001138  6E18               	movwf	___awdiv@divisor,c
  4690  00113A  0100               	movlb	0	; () banked
  4691  00113C  516C               	movf	scale@scl& (0+255),w,b
  4692  00113E  6E16               	movwf	___awdiv@dividend,c
  4693  001140  6A17               	clrf	___awdiv@dividend+1,c
  4694  001142  BE16               	btfsc	___awdiv@dividend,7,c
  4695  001144  0617               	decf	___awdiv@dividend+1,f,c
  4696  001146  EC79  F013         	call	___awdiv	;wreg free
  4697  00114A  0E12               	movlw	18
  4698  00114C  2416               	addwf	?___awdiv,w,c
  4699  00114E  6E1E               	movwf	___wmul@multiplier,c
  4700  001150  0E00               	movlw	0
  4701  001152  2017               	addwfc	?___awdiv+1,w,c
  4702  001154  6E1F               	movwf	___wmul@multiplier+1,c
  4703  001156  0E00               	movlw	0
  4704  001158  6E21               	movwf	___wmul@multiplicand+1,c
  4705  00115A  0E03               	movlw	3
  4706  00115C  6E20               	movwf	___wmul@multiplicand,c
  4707  00115E  EC5E  F016         	call	___wmul	;wreg free
  4708  001162  0E23               	movlw	low __npowers_
  4709  001164  241E               	addwf	?___wmul,w,c
  4710  001166  6EF6               	movwf	tblptrl,c
  4711  001168  0EFE               	movlw	high __npowers_
  4712  00116A  201F               	addwfc	?___wmul+1,w,c
  4713  00116C  6EF7               	movwf	tblptrh,c
  4714  00116E                     	if	0	;There are less than 3 active tblptr bytes
  4715  00116E                     	endif
  4716  00116E  0009               	tblrd		*+
  4717  001170  CFF5 F037          	movff	tablat,___ftmul@f1
  4718  001174  0009               	tblrd		*+
  4719  001176  CFF5 F038          	movff	tablat,___ftmul@f1+1
  4720  00117A  000A               	tblrd		*-
  4721  00117C  CFF5 F039          	movff	tablat,___ftmul@f1+2
  4722  001180  EC1F  F011         	call	___ftmul	;wreg free
  4723  001184  C037  F069         	movff	?___ftmul,_scale$2544
  4724  001188  C038  F06A         	movff	?___ftmul+1,_scale$2544+1
  4725  00118C  C039  F06B         	movff	?___ftmul+2,_scale$2544+2
  4726                           
  4727                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4728  001190  C069  F037         	movff	_scale$2544,___ftmul@f1
  4729  001194  C06A  F038         	movff	_scale$2544+1,___ftmul@f1+1
  4730  001198  C06B  F039         	movff	_scale$2544+2,___ftmul@f1+2
  4731  00119C  0E00               	movlw	0
  4732  00119E  6E21               	movwf	___wmul@multiplicand+1,c
  4733  0011A0  0E03               	movlw	3
  4734  0011A2  6E20               	movwf	___wmul@multiplicand,c
  4735  0011A4  0E00               	movlw	0
  4736  0011A6  6E13               	movwf	___awmod@divisor+1,c
  4737  0011A8  0E0A               	movlw	10
  4738  0011AA  6E12               	movwf	___awmod@divisor,c
  4739  0011AC  0100               	movlb	0	; () banked
  4740  0011AE  516C               	movf	scale@scl& (0+255),w,b
  4741  0011B0  6E10               	movwf	___awmod@dividend,c
  4742  0011B2  6A11               	clrf	___awmod@dividend+1,c
  4743  0011B4  BE10               	btfsc	___awmod@dividend,7,c
  4744  0011B6  0611               	decf	___awmod@dividend+1,f,c
  4745  0011B8  EC78  F014         	call	___awmod	;wreg free
  4746  0011BC  C010  F01E         	movff	?___awmod,___wmul@multiplier
  4747  0011C0  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  4748  0011C4  EC5E  F016         	call	___wmul	;wreg free
  4749  0011C8  0E23               	movlw	low __npowers_
  4750  0011CA  241E               	addwf	?___wmul,w,c
  4751  0011CC  6EF6               	movwf	tblptrl,c
  4752  0011CE  0EFE               	movlw	high __npowers_
  4753  0011D0  201F               	addwfc	?___wmul+1,w,c
  4754  0011D2  6EF7               	movwf	tblptrh,c
  4755  0011D4                     	if	0	;There are less than 3 active tblptr bytes
  4756  0011D4                     	endif
  4757  0011D4  0009               	tblrd		*+
  4758  0011D6  CFF5 F03A          	movff	tablat,___ftmul@f2
  4759  0011DA  0009               	tblrd		*+
  4760  0011DC  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  4761  0011E0  000A               	tblrd		*-
  4762  0011E2  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  4763  0011E6  EC1F  F011         	call	___ftmul	;wreg free
  4764  0011EA  C037  F066         	movff	?___ftmul,?_scale
  4765  0011EE  C038  F067         	movff	?___ftmul+1,?_scale+1
  4766  0011F2  C039  F068         	movff	?___ftmul+2,?_scale+2
  4767  0011F6  0012               	return	
  4768  0011F8                     l5369:
  4769                           
  4770                           ;doprnt.c: 432: else if(scl > 10)
  4771  0011F8  0100               	movlb	0	; () banked
  4772  0011FA  516C               	movf	scale@scl& (0+255),w,b
  4773  0011FC  0A80               	xorlw	128
  4774  0011FE  0F75               	addlw	-139
  4775  001200  A0D8               	btfss	status,0,c
  4776  001202  D04F               	goto	l5375
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4780  001204  0E00               	movlw	0
  4781  001206  6E19               	movwf	___awdiv@divisor+1,c
  4782  001208  0E0A               	movlw	10
  4783  00120A  6E18               	movwf	___awdiv@divisor,c
  4784  00120C  0100               	movlb	0	; () banked
  4785  00120E  516C               	movf	scale@scl& (0+255),w,b
  4786  001210  6E16               	movwf	___awdiv@dividend,c
  4787  001212  6A17               	clrf	___awdiv@dividend+1,c
  4788  001214  BE16               	btfsc	___awdiv@dividend,7,c
  4789  001216  0617               	decf	___awdiv@dividend+1,f,c
  4790  001218  EC79  F013         	call	___awdiv	;wreg free
  4791  00121C  0E09               	movlw	9
  4792  00121E  2416               	addwf	?___awdiv,w,c
  4793  001220  6E1E               	movwf	___wmul@multiplier,c
  4794  001222  0E00               	movlw	0
  4795  001224  2017               	addwfc	?___awdiv+1,w,c
  4796  001226  6E1F               	movwf	___wmul@multiplier+1,c
  4797  001228  0E00               	movlw	0
  4798  00122A  6E21               	movwf	___wmul@multiplicand+1,c
  4799  00122C  0E03               	movlw	3
  4800  00122E  6E20               	movwf	___wmul@multiplicand,c
  4801  001230  EC5E  F016         	call	___wmul	;wreg free
  4802  001234  0E23               	movlw	low __npowers_
  4803  001236  241E               	addwf	?___wmul,w,c
  4804  001238  6EF6               	movwf	tblptrl,c
  4805  00123A  0EFE               	movlw	high __npowers_
  4806  00123C  201F               	addwfc	?___wmul+1,w,c
  4807  00123E  6EF7               	movwf	tblptrh,c
  4808  001240                     	if	0	;There are less than 3 active tblptr bytes
  4809  001240                     	endif
  4810  001240  0009               	tblrd		*+
  4811  001242  CFF5 F037          	movff	tablat,___ftmul@f1
  4812  001246  0009               	tblrd		*+
  4813  001248  CFF5 F038          	movff	tablat,___ftmul@f1+1
  4814  00124C  000A               	tblrd		*-
  4815  00124E  CFF5 F039          	movff	tablat,___ftmul@f1+2
  4816  001252  0E00               	movlw	0
  4817  001254  6E21               	movwf	___wmul@multiplicand+1,c
  4818  001256  0E03               	movlw	3
  4819  001258  6E20               	movwf	___wmul@multiplicand,c
  4820  00125A  0E00               	movlw	0
  4821  00125C  6E13               	movwf	___awmod@divisor+1,c
  4822  00125E  0E0A               	movlw	10
  4823  001260  6E12               	movwf	___awmod@divisor,c
  4824  001262  0100               	movlb	0	; () banked
  4825  001264  516C               	movf	scale@scl& (0+255),w,b
  4826  001266  6E10               	movwf	___awmod@dividend,c
  4827  001268  6A11               	clrf	___awmod@dividend+1,c
  4828  00126A  BE10               	btfsc	___awmod@dividend,7,c
  4829  00126C  0611               	decf	___awmod@dividend+1,f,c
  4830  00126E  EC78  F014         	call	___awmod	;wreg free
  4831  001272  C010  F01E         	movff	?___awmod,___wmul@multiplier
  4832  001276  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  4833  00127A  EC5E  F016         	call	___wmul	;wreg free
  4834  00127E  0E23               	movlw	low __npowers_
  4835  001280  241E               	addwf	?___wmul,w,c
  4836  001282  6EF6               	movwf	tblptrl,c
  4837  001284  0EFE               	movlw	high __npowers_
  4838  001286  201F               	addwfc	?___wmul+1,w,c
  4839  001288  6EF7               	movwf	tblptrh,c
  4840  00128A                     	if	0	;There are less than 3 active tblptr bytes
  4841  00128A                     	endif
  4842  00128A  0009               	tblrd		*+
  4843  00128C  CFF5 F03A          	movff	tablat,___ftmul@f2
  4844  001290  0009               	tblrd		*+
  4845  001292  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  4846  001296  000A               	tblrd		*-
  4847  001298  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  4848  00129C  EC1F  F011         	call	___ftmul	;wreg free
  4849  0012A0  D7A4               	goto	L3
  4850  0012A2                     l5375:
  4851                           
  4852                           ;doprnt.c: 434: return _npowers_[scl];
  4853  0012A2  0100               	movlb	0	; () banked
  4854  0012A4  516C               	movf	scale@scl& (0+255),w,b
  4855  0012A6  0D03               	mullw	3
  4856  0012A8  0E23               	movlw	low __npowers_
  4857  0012AA  24F3               	addwf	prodl,w,c
  4858  0012AC  6EF6               	movwf	tblptrl,c
  4859  0012AE  0EFE               	movlw	high __npowers_
  4860  0012B0  20F4               	addwfc	prodh,w,c
  4861  0012B2  6EF7               	movwf	tblptrh,c
  4862  0012B4                     	if	0	;There are less than 3 active tblptr bytes
  4863  0012B4                     	endif
  4864  0012B4  0009               	tblrd		*+
  4865  0012B6  CFF5 F066          	movff	tablat,?_scale
  4866  0012BA  0009               	tblrd		*+
  4867  0012BC  CFF5 F067          	movff	tablat,?_scale+1
  4868  0012C0  000A               	tblrd		*-
  4869  0012C2  CFF5 F068          	movff	tablat,?_scale+2
  4870                           
  4871                           ; BSR set to: 0
  4872  0012C6  0012               	return	
  4873  0012C8                     l5379:
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;doprnt.c: 435: }
  4877                           ;doprnt.c: 436: if(scl>=110)
  4878  0012C8  0100               	movlb	0	; () banked
  4879  0012CA  516C               	movf	scale@scl& (0+255),w,b
  4880  0012CC  0A80               	xorlw	128
  4881  0012CE  0F12               	addlw	-238
  4882  0012D0  A0D8               	btfss	status,0,c
  4883  0012D2  D094               	goto	l5387
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4887  0012D4  0E00               	movlw	0
  4888  0012D6  6E21               	movwf	___wmul@multiplicand+1,c
  4889  0012D8  0E03               	movlw	3
  4890  0012DA  6E20               	movwf	___wmul@multiplicand,c
  4891  0012DC  0E00               	movlw	0
  4892  0012DE  6E19               	movwf	___awdiv@divisor+1,c
  4893  0012E0  0E0A               	movlw	10
  4894  0012E2  6E18               	movwf	___awdiv@divisor,c
  4895  0012E4  0E00               	movlw	0
  4896  0012E6  6E13               	movwf	___awmod@divisor+1,c
  4897  0012E8  0E64               	movlw	100
  4898  0012EA  6E12               	movwf	___awmod@divisor,c
  4899  0012EC  0100               	movlb	0	; () banked
  4900  0012EE  516C               	movf	scale@scl& (0+255),w,b
  4901  0012F0  6E10               	movwf	___awmod@dividend,c
  4902  0012F2  6A11               	clrf	___awmod@dividend+1,c
  4903  0012F4  BE10               	btfsc	___awmod@dividend,7,c
  4904  0012F6  0611               	decf	___awmod@dividend+1,f,c
  4905  0012F8  EC78  F014         	call	___awmod	;wreg free
  4906  0012FC  C010  F016         	movff	?___awmod,___awdiv@dividend
  4907  001300  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  4908  001304  EC79  F013         	call	___awdiv	;wreg free
  4909  001308  0E09               	movlw	9
  4910  00130A  2416               	addwf	?___awdiv,w,c
  4911  00130C  6E1E               	movwf	___wmul@multiplier,c
  4912  00130E  0E00               	movlw	0
  4913  001310  2017               	addwfc	?___awdiv+1,w,c
  4914  001312  6E1F               	movwf	___wmul@multiplier+1,c
  4915  001314  EC5E  F016         	call	___wmul	;wreg free
  4916  001318  0E4A               	movlw	low __powers_
  4917  00131A  241E               	addwf	?___wmul,w,c
  4918  00131C  6EF6               	movwf	tblptrl,c
  4919  00131E  0EFE               	movlw	high __powers_
  4920  001320  201F               	addwfc	?___wmul+1,w,c
  4921  001322  6EF7               	movwf	tblptrh,c
  4922  001324                     	if	0	;There are less than 3 active tblptr bytes
  4923  001324                     	endif
  4924  001324  0009               	tblrd		*+
  4925  001326  CFF5 F03A          	movff	tablat,___ftmul@f2
  4926  00132A  0009               	tblrd		*+
  4927  00132C  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  4928  001330  000A               	tblrd		*-
  4929  001332  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  4930  001336  0E00               	movlw	0
  4931  001338  6E19               	movwf	___awdiv@divisor+1,c
  4932  00133A  0E64               	movlw	100
  4933  00133C  6E18               	movwf	___awdiv@divisor,c
  4934  00133E  0100               	movlb	0	; () banked
  4935  001340  516C               	movf	scale@scl& (0+255),w,b
  4936  001342  6E16               	movwf	___awdiv@dividend,c
  4937  001344  6A17               	clrf	___awdiv@dividend+1,c
  4938  001346  BE16               	btfsc	___awdiv@dividend,7,c
  4939  001348  0617               	decf	___awdiv@dividend+1,f,c
  4940  00134A  EC79  F013         	call	___awdiv	;wreg free
  4941  00134E  0E12               	movlw	18
  4942  001350  2416               	addwf	?___awdiv,w,c
  4943  001352  6E1E               	movwf	___wmul@multiplier,c
  4944  001354  0E00               	movlw	0
  4945  001356  2017               	addwfc	?___awdiv+1,w,c
  4946  001358  6E1F               	movwf	___wmul@multiplier+1,c
  4947  00135A  0E00               	movlw	0
  4948  00135C  6E21               	movwf	___wmul@multiplicand+1,c
  4949  00135E  0E03               	movlw	3
  4950  001360  6E20               	movwf	___wmul@multiplicand,c
  4951  001362  EC5E  F016         	call	___wmul	;wreg free
  4952  001366  0E4A               	movlw	low __powers_
  4953  001368  241E               	addwf	?___wmul,w,c
  4954  00136A  6EF6               	movwf	tblptrl,c
  4955  00136C  0EFE               	movlw	high __powers_
  4956  00136E  201F               	addwfc	?___wmul+1,w,c
  4957  001370  6EF7               	movwf	tblptrh,c
  4958  001372                     	if	0	;There are less than 3 active tblptr bytes
  4959  001372                     	endif
  4960  001372  0009               	tblrd		*+
  4961  001374  CFF5 F037          	movff	tablat,___ftmul@f1
  4962  001378  0009               	tblrd		*+
  4963  00137A  CFF5 F038          	movff	tablat,___ftmul@f1+1
  4964  00137E  000A               	tblrd		*-
  4965  001380  CFF5 F039          	movff	tablat,___ftmul@f1+2
  4966  001384  EC1F  F011         	call	___ftmul	;wreg free
  4967  001388  C037  F069         	movff	?___ftmul,_scale$2544
  4968  00138C  C038  F06A         	movff	?___ftmul+1,_scale$2544+1
  4969  001390  C039  F06B         	movff	?___ftmul+2,_scale$2544+2
  4970                           
  4971                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4972  001394  C069  F037         	movff	_scale$2544,___ftmul@f1
  4973  001398  C06A  F038         	movff	_scale$2544+1,___ftmul@f1+1
  4974  00139C  C06B  F039         	movff	_scale$2544+2,___ftmul@f1+2
  4975  0013A0  0E00               	movlw	0
  4976  0013A2  6E21               	movwf	___wmul@multiplicand+1,c
  4977  0013A4  0E03               	movlw	3
  4978  0013A6  6E20               	movwf	___wmul@multiplicand,c
  4979  0013A8  0E00               	movlw	0
  4980  0013AA  6E13               	movwf	___awmod@divisor+1,c
  4981  0013AC  0E0A               	movlw	10
  4982  0013AE  6E12               	movwf	___awmod@divisor,c
  4983  0013B0  0100               	movlb	0	; () banked
  4984  0013B2  516C               	movf	scale@scl& (0+255),w,b
  4985  0013B4  6E10               	movwf	___awmod@dividend,c
  4986  0013B6  6A11               	clrf	___awmod@dividend+1,c
  4987  0013B8  BE10               	btfsc	___awmod@dividend,7,c
  4988  0013BA  0611               	decf	___awmod@dividend+1,f,c
  4989  0013BC  EC78  F014         	call	___awmod	;wreg free
  4990  0013C0  C010  F01E         	movff	?___awmod,___wmul@multiplier
  4991  0013C4  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  4992  0013C8  EC5E  F016         	call	___wmul	;wreg free
  4993  0013CC  0E4A               	movlw	low __powers_
  4994  0013CE  241E               	addwf	?___wmul,w,c
  4995  0013D0  6EF6               	movwf	tblptrl,c
  4996  0013D2  0EFE               	movlw	high __powers_
  4997  0013D4  201F               	addwfc	?___wmul+1,w,c
  4998  0013D6  6EF7               	movwf	tblptrh,c
  4999  0013D8                     	if	0	;There are less than 3 active tblptr bytes
  5000  0013D8                     	endif
  5001  0013D8  0009               	tblrd		*+
  5002  0013DA  CFF5 F03A          	movff	tablat,___ftmul@f2
  5003  0013DE  0009               	tblrd		*+
  5004  0013E0  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  5005  0013E4  000A               	tblrd		*-
  5006  0013E6  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  5007  0013EA  EC1F  F011         	call	___ftmul	;wreg free
  5008  0013EE  C037  F066         	movff	?___ftmul,?_scale
  5009  0013F2  C038  F067         	movff	?___ftmul+1,?_scale+1
  5010  0013F6  C039  F068         	movff	?___ftmul+2,?_scale+2
  5011  0013FA  0012               	return	
  5012  0013FC                     l5387:
  5013                           
  5014                           ;doprnt.c: 438: else if(scl > 10)
  5015  0013FC  0100               	movlb	0	; () banked
  5016  0013FE  516C               	movf	scale@scl& (0+255),w,b
  5017  001400  0A80               	xorlw	128
  5018  001402  0F75               	addlw	-139
  5019  001404  A0D8               	btfss	status,0,c
  5020  001406  D04F               	goto	l5393
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5024  001408  0E00               	movlw	0
  5025  00140A  6E19               	movwf	___awdiv@divisor+1,c
  5026  00140C  0E0A               	movlw	10
  5027  00140E  6E18               	movwf	___awdiv@divisor,c
  5028  001410  0100               	movlb	0	; () banked
  5029  001412  516C               	movf	scale@scl& (0+255),w,b
  5030  001414  6E16               	movwf	___awdiv@dividend,c
  5031  001416  6A17               	clrf	___awdiv@dividend+1,c
  5032  001418  BE16               	btfsc	___awdiv@dividend,7,c
  5033  00141A  0617               	decf	___awdiv@dividend+1,f,c
  5034  00141C  EC79  F013         	call	___awdiv	;wreg free
  5035  001420  0E09               	movlw	9
  5036  001422  2416               	addwf	?___awdiv,w,c
  5037  001424  6E1E               	movwf	___wmul@multiplier,c
  5038  001426  0E00               	movlw	0
  5039  001428  2017               	addwfc	?___awdiv+1,w,c
  5040  00142A  6E1F               	movwf	___wmul@multiplier+1,c
  5041  00142C  0E00               	movlw	0
  5042  00142E  6E21               	movwf	___wmul@multiplicand+1,c
  5043  001430  0E03               	movlw	3
  5044  001432  6E20               	movwf	___wmul@multiplicand,c
  5045  001434  EC5E  F016         	call	___wmul	;wreg free
  5046  001438  0E4A               	movlw	low __powers_
  5047  00143A  241E               	addwf	?___wmul,w,c
  5048  00143C  6EF6               	movwf	tblptrl,c
  5049  00143E  0EFE               	movlw	high __powers_
  5050  001440  201F               	addwfc	?___wmul+1,w,c
  5051  001442  6EF7               	movwf	tblptrh,c
  5052  001444                     	if	0	;There are less than 3 active tblptr bytes
  5053  001444                     	endif
  5054  001444  0009               	tblrd		*+
  5055  001446  CFF5 F037          	movff	tablat,___ftmul@f1
  5056  00144A  0009               	tblrd		*+
  5057  00144C  CFF5 F038          	movff	tablat,___ftmul@f1+1
  5058  001450  000A               	tblrd		*-
  5059  001452  CFF5 F039          	movff	tablat,___ftmul@f1+2
  5060  001456  0E00               	movlw	0
  5061  001458  6E21               	movwf	___wmul@multiplicand+1,c
  5062  00145A  0E03               	movlw	3
  5063  00145C  6E20               	movwf	___wmul@multiplicand,c
  5064  00145E  0E00               	movlw	0
  5065  001460  6E13               	movwf	___awmod@divisor+1,c
  5066  001462  0E0A               	movlw	10
  5067  001464  6E12               	movwf	___awmod@divisor,c
  5068  001466  0100               	movlb	0	; () banked
  5069  001468  516C               	movf	scale@scl& (0+255),w,b
  5070  00146A  6E10               	movwf	___awmod@dividend,c
  5071  00146C  6A11               	clrf	___awmod@dividend+1,c
  5072  00146E  BE10               	btfsc	___awmod@dividend,7,c
  5073  001470  0611               	decf	___awmod@dividend+1,f,c
  5074  001472  EC78  F014         	call	___awmod	;wreg free
  5075  001476  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5076  00147A  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5077  00147E  EC5E  F016         	call	___wmul	;wreg free
  5078  001482  0E4A               	movlw	low __powers_
  5079  001484  241E               	addwf	?___wmul,w,c
  5080  001486  6EF6               	movwf	tblptrl,c
  5081  001488  0EFE               	movlw	high __powers_
  5082  00148A  201F               	addwfc	?___wmul+1,w,c
  5083  00148C  6EF7               	movwf	tblptrh,c
  5084  00148E                     	if	0	;There are less than 3 active tblptr bytes
  5085  00148E                     	endif
  5086  00148E  0009               	tblrd		*+
  5087  001490  CFF5 F03A          	movff	tablat,___ftmul@f2
  5088  001494  0009               	tblrd		*+
  5089  001496  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  5090  00149A  000A               	tblrd		*-
  5091  00149C  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  5092  0014A0  EC1F  F011         	call	___ftmul	;wreg free
  5093  0014A4  D7A4               	goto	L4
  5094  0014A6                     l5393:
  5095                           
  5096                           ;doprnt.c: 440: return _powers_[scl];
  5097  0014A6  0100               	movlb	0	; () banked
  5098  0014A8  516C               	movf	scale@scl& (0+255),w,b
  5099  0014AA  0D03               	mullw	3
  5100  0014AC  0E4A               	movlw	low __powers_
  5101  0014AE  24F3               	addwf	prodl,w,c
  5102  0014B0  6EF6               	movwf	tblptrl,c
  5103  0014B2  0EFE               	movlw	high __powers_
  5104  0014B4  20F4               	addwfc	prodh,w,c
  5105  0014B6  6EF7               	movwf	tblptrh,c
  5106  0014B8                     	if	0	;There are less than 3 active tblptr bytes
  5107  0014B8                     	endif
  5108  0014B8  0009               	tblrd		*+
  5109  0014BA  CFF5 F066          	movff	tablat,?_scale
  5110  0014BE  0009               	tblrd		*+
  5111  0014C0  CFF5 F067          	movff	tablat,?_scale+1
  5112  0014C4  000A               	tblrd		*-
  5113  0014C6  CFF5 F068          	movff	tablat,?_scale+2
  5114  0014CA  0012               	return	
  5115  0014CC                     __end_of_scale:
  5116                           	opt stack 0
  5117                           tblptru	equ	0xFF8
  5118                           tblptrh	equ	0xFF7
  5119                           tblptrl	equ	0xFF6
  5120                           tablat	equ	0xFF5
  5121                           prodh	equ	0xFF4
  5122                           prodl	equ	0xFF3
  5123                           postinc0	equ	0xFEE
  5124                           wreg	equ	0xFE8
  5125                           indf1	equ	0xFE7
  5126                           postdec1	equ	0xFE5
  5127                           fsr1h	equ	0xFE2
  5128                           fsr1l	equ	0xFE1
  5129                           indf2	equ	0xFDF
  5130                           postinc2	equ	0xFDE
  5131                           postdec2	equ	0xFDD
  5132                           fsr2h	equ	0xFDA
  5133                           fsr2l	equ	0xFD9
  5134                           status	equ	0xFD8
  5135                           
  5136 ;; *************** function _isdigit *****************
  5137 ;; Defined at:
  5138 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5139 ;; Parameters:    Size  Location     Type
  5140 ;;  c               1    wreg     unsigned char 
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;  c               1   17[COMRAM] unsigned char 
  5143 ;; Return value:  Size  Location     Type
  5144 ;;		None               void
  5145 ;; Registers used:
  5146 ;;		wreg, status,2, status,0
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5155 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5156 ;;Total ram usage:        3 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; Hardware stack levels required when called:    2
  5159 ;; This function calls:
  5160 ;;		Nothing
  5161 ;; This function is called by:
  5162 ;;		_sprintf
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           	psect	text5
  5167  002D6C                     __ptext5:
  5168                           	opt stack 0
  5169  002D6C                     _isdigit:
  5170                           	opt stack 26
  5171                           
  5172                           ;incstack = 0
  5173                           ;isdigit@c stored from wreg
  5174  002D6C  6E12               	movwf	isdigit@c,c
  5175  002D6E  0E00               	movlw	0
  5176  002D70  6E11               	movwf	_isdigit$2134,c
  5177  002D72  0E3A               	movlw	58
  5178  002D74  6012               	cpfslt	isdigit@c,c
  5179  002D76  D005               	goto	l5405
  5180  002D78  0E2F               	movlw	47
  5181  002D7A  6412               	cpfsgt	isdigit@c,c
  5182  002D7C  D002               	goto	l5405
  5183  002D7E  0E01               	movlw	1
  5184  002D80  6E11               	movwf	_isdigit$2134,c
  5185  002D82                     l5405:
  5186  002D82  C011  F010         	movff	_isdigit$2134,??_isdigit
  5187  002D86  3010               	rrcf	??_isdigit,w,c
  5188  002D88  0012               	return	
  5189  002D8A                     __end_of_isdigit:
  5190                           	opt stack 0
  5191                           tblptru	equ	0xFF8
  5192                           tblptrh	equ	0xFF7
  5193                           tblptrl	equ	0xFF6
  5194                           tablat	equ	0xFF5
  5195                           prodh	equ	0xFF4
  5196                           prodl	equ	0xFF3
  5197                           postinc0	equ	0xFEE
  5198                           wreg	equ	0xFE8
  5199                           indf1	equ	0xFE7
  5200                           postdec1	equ	0xFE5
  5201                           fsr1h	equ	0xFE2
  5202                           fsr1l	equ	0xFE1
  5203                           indf2	equ	0xFDF
  5204                           postinc2	equ	0xFDE
  5205                           postdec2	equ	0xFDD
  5206                           fsr2h	equ	0xFDA
  5207                           fsr2l	equ	0xFD9
  5208                           status	equ	0xFD8
  5209                           
  5210 ;; *************** function _fround *****************
  5211 ;; Defined at:
  5212 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;  prec            1    wreg     unsigned char 
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;  prec            1   15[BANK0 ] unsigned char 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  3    6[BANK0 ] unsigned char 
  5219 ;; Registers used:
  5220 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5226 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5229 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5230 ;;Total ram usage:       10 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    4
  5233 ;; This function calls:
  5234 ;;		___awdiv
  5235 ;;		___awmod
  5236 ;;		___ftmul
  5237 ;;		___wmul
  5238 ;; This function is called by:
  5239 ;;		_sprintf
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           	psect	text6
  5244  0014CC                     __ptext6:
  5245                           	opt stack 0
  5246  0014CC                     _fround:
  5247                           	opt stack 24
  5248                           
  5249                           ;incstack = 0
  5250                           ;fround@prec stored from wreg
  5251  0014CC  0100               	movlb	0	; () banked
  5252  0014CE  6F6F               	movwf	fround@prec& (0+255),b
  5253                           
  5254                           ;doprnt.c: 413: if(prec>=110)
  5255  0014D0  0E6D               	movlw	109
  5256  0014D2  0100               	movlb	0	; () banked
  5257  0014D4  656F               	cpfsgt	fround@prec& (0+255),b
  5258  0014D6  D09F               	goto	l5347
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5262  0014D8  0E00               	movlw	0
  5263  0014DA  6E21               	movwf	___wmul@multiplicand+1,c
  5264  0014DC  0E03               	movlw	3
  5265  0014DE  6E20               	movwf	___wmul@multiplicand,c
  5266  0014E0  0E00               	movlw	0
  5267  0014E2  6E19               	movwf	___awdiv@divisor+1,c
  5268  0014E4  0E0A               	movlw	10
  5269  0014E6  6E18               	movwf	___awdiv@divisor,c
  5270  0014E8  0E00               	movlw	0
  5271  0014EA  6E13               	movwf	___awmod@divisor+1,c
  5272  0014EC  0E64               	movlw	100
  5273  0014EE  6E12               	movwf	___awmod@divisor,c
  5274  0014F0  C06F  F010         	movff	fround@prec,___awmod@dividend
  5275  0014F4  6A11               	clrf	___awmod@dividend+1,c
  5276  0014F6  EC78  F014         	call	___awmod	;wreg free
  5277  0014FA  C010  F016         	movff	?___awmod,___awdiv@dividend
  5278  0014FE  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  5279  001502  EC79  F013         	call	___awdiv	;wreg free
  5280  001506  0E09               	movlw	9
  5281  001508  2416               	addwf	?___awdiv,w,c
  5282  00150A  6E1E               	movwf	___wmul@multiplier,c
  5283  00150C  0E00               	movlw	0
  5284  00150E  2017               	addwfc	?___awdiv+1,w,c
  5285  001510  6E1F               	movwf	___wmul@multiplier+1,c
  5286  001512  EC5E  F016         	call	___wmul	;wreg free
  5287  001516  0E23               	movlw	low __npowers_
  5288  001518  241E               	addwf	?___wmul,w,c
  5289  00151A  6EF6               	movwf	tblptrl,c
  5290  00151C  0EFE               	movlw	high __npowers_
  5291  00151E  201F               	addwfc	?___wmul+1,w,c
  5292  001520  6EF7               	movwf	tblptrh,c
  5293  001522                     	if	0	;There are less than 3 active tblptr bytes
  5294  001522                     	endif
  5295  001522  0009               	tblrd		*+
  5296  001524  CFF5 F03A          	movff	tablat,___ftmul@f2
  5297  001528  0009               	tblrd		*+
  5298  00152A  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  5299  00152E  000A               	tblrd		*-
  5300  001530  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  5301  001534  0E00               	movlw	0
  5302  001536  6E19               	movwf	___awdiv@divisor+1,c
  5303  001538  0E64               	movlw	100
  5304  00153A  6E18               	movwf	___awdiv@divisor,c
  5305  00153C  C06F  F016         	movff	fround@prec,___awdiv@dividend
  5306  001540  6A17               	clrf	___awdiv@dividend+1,c
  5307  001542  EC79  F013         	call	___awdiv	;wreg free
  5308  001546  0E12               	movlw	18
  5309  001548  2416               	addwf	?___awdiv,w,c
  5310  00154A  6E1E               	movwf	___wmul@multiplier,c
  5311  00154C  0E00               	movlw	0
  5312  00154E  2017               	addwfc	?___awdiv+1,w,c
  5313  001550  6E1F               	movwf	___wmul@multiplier+1,c
  5314  001552  0E00               	movlw	0
  5315  001554  6E21               	movwf	___wmul@multiplicand+1,c
  5316  001556  0E03               	movlw	3
  5317  001558  6E20               	movwf	___wmul@multiplicand,c
  5318  00155A  EC5E  F016         	call	___wmul	;wreg free
  5319  00155E  0E23               	movlw	low __npowers_
  5320  001560  241E               	addwf	?___wmul,w,c
  5321  001562  6EF6               	movwf	tblptrl,c
  5322  001564  0EFE               	movlw	high __npowers_
  5323  001566  201F               	addwfc	?___wmul+1,w,c
  5324  001568  6EF7               	movwf	tblptrh,c
  5325  00156A                     	if	0	;There are less than 3 active tblptr bytes
  5326  00156A                     	endif
  5327  00156A  0009               	tblrd		*+
  5328  00156C  CFF5 F037          	movff	tablat,___ftmul@f1
  5329  001570  0009               	tblrd		*+
  5330  001572  CFF5 F038          	movff	tablat,___ftmul@f1+1
  5331  001576  000A               	tblrd		*-
  5332  001578  CFF5 F039          	movff	tablat,___ftmul@f1+2
  5333  00157C  EC1F  F011         	call	___ftmul	;wreg free
  5334  001580  C037  F06C         	movff	?___ftmul,_fround$2542
  5335  001584  C038  F06D         	movff	?___ftmul+1,_fround$2542+1
  5336  001588  C039  F06E         	movff	?___ftmul+2,_fround$2542+2
  5337                           
  5338                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5339  00158C  0E00               	movlw	0
  5340  00158E  6E21               	movwf	___wmul@multiplicand+1,c
  5341  001590  0E03               	movlw	3
  5342  001592  6E20               	movwf	___wmul@multiplicand,c
  5343  001594  0E00               	movlw	0
  5344  001596  6E13               	movwf	___awmod@divisor+1,c
  5345  001598  0E0A               	movlw	10
  5346  00159A  6E12               	movwf	___awmod@divisor,c
  5347  00159C  C06F  F010         	movff	fround@prec,___awmod@dividend
  5348  0015A0  6A11               	clrf	___awmod@dividend+1,c
  5349  0015A2  EC78  F014         	call	___awmod	;wreg free
  5350  0015A6  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5351  0015AA  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5352  0015AE  EC5E  F016         	call	___wmul	;wreg free
  5353  0015B2  0E23               	movlw	low __npowers_
  5354  0015B4  241E               	addwf	?___wmul,w,c
  5355  0015B6  6EF6               	movwf	tblptrl,c
  5356  0015B8  0EFE               	movlw	high __npowers_
  5357  0015BA  201F               	addwfc	?___wmul+1,w,c
  5358  0015BC  6EF7               	movwf	tblptrh,c
  5359  0015BE                     	if	0	;There are less than 3 active tblptr bytes
  5360  0015BE                     	endif
  5361  0015BE  0009               	tblrd		*+
  5362  0015C0  CFF5 F03A          	movff	tablat,___ftmul@f2
  5363  0015C4  0009               	tblrd		*+
  5364  0015C6  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  5365  0015CA  000A               	tblrd		*-
  5366  0015CC  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  5367  0015D0  C06C  F037         	movff	_fround$2542,___ftmul@f1
  5368  0015D4  C06D  F038         	movff	_fround$2542+1,___ftmul@f1+1
  5369  0015D8  C06E  F039         	movff	_fround$2542+2,___ftmul@f1+2
  5370  0015DC  EC1F  F011         	call	___ftmul	;wreg free
  5371  0015E0  C037  F069         	movff	?___ftmul,_fround$2543
  5372  0015E4  C038  F06A         	movff	?___ftmul+1,_fround$2543+1
  5373  0015E8  C039  F06B         	movff	?___ftmul+2,_fround$2543+2
  5374                           
  5375                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5376  0015EC  C069  F037         	movff	_fround$2543,___ftmul@f1
  5377  0015F0  C06A  F038         	movff	_fround$2543+1,___ftmul@f1+1
  5378  0015F4  C06B  F039         	movff	_fround$2543+2,___ftmul@f1+2
  5379  0015F8  0E00               	movlw	0
  5380  0015FA  6E3A               	movwf	___ftmul@f2,c
  5381  0015FC  0E00               	movlw	0
  5382  0015FE  6E3B               	movwf	___ftmul@f2+1,c
  5383  001600  0E3F               	movlw	63
  5384  001602  6E3C               	movwf	___ftmul@f2+2,c
  5385  001604  EC1F  F011         	call	___ftmul	;wreg free
  5386  001608  C037  F066         	movff	?___ftmul,?_fround
  5387  00160C  C038  F067         	movff	?___ftmul+1,?_fround+1
  5388  001610  C039  F068         	movff	?___ftmul+2,?_fround+2
  5389  001614  0012               	return	
  5390  001616                     l5347:
  5391                           
  5392                           ;doprnt.c: 415: else if(prec > 10)
  5393  001616  0E0A               	movlw	10
  5394  001618  0100               	movlb	0	; () banked
  5395  00161A  656F               	cpfsgt	fround@prec& (0+255),b
  5396  00161C  D05D               	goto	l5355
  5397                           
  5398                           ; BSR set to: 0
  5399                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5400  00161E  0E00               	movlw	0
  5401  001620  6E21               	movwf	___wmul@multiplicand+1,c
  5402  001622  0E03               	movlw	3
  5403  001624  6E20               	movwf	___wmul@multiplicand,c
  5404  001626  0E00               	movlw	0
  5405  001628  6E13               	movwf	___awmod@divisor+1,c
  5406  00162A  0E0A               	movlw	10
  5407  00162C  6E12               	movwf	___awmod@divisor,c
  5408  00162E  C06F  F010         	movff	fround@prec,___awmod@dividend
  5409  001632  6A11               	clrf	___awmod@dividend+1,c
  5410  001634  EC78  F014         	call	___awmod	;wreg free
  5411  001638  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5412  00163C  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5413  001640  EC5E  F016         	call	___wmul	;wreg free
  5414  001644  0E23               	movlw	low __npowers_
  5415  001646  241E               	addwf	?___wmul,w,c
  5416  001648  6EF6               	movwf	tblptrl,c
  5417  00164A  0EFE               	movlw	high __npowers_
  5418  00164C  201F               	addwfc	?___wmul+1,w,c
  5419  00164E  6EF7               	movwf	tblptrh,c
  5420  001650                     	if	0	;There are less than 3 active tblptr bytes
  5421  001650                     	endif
  5422  001650  0009               	tblrd		*+
  5423  001652  CFF5 F03A          	movff	tablat,___ftmul@f2
  5424  001656  0009               	tblrd		*+
  5425  001658  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  5426  00165C  000A               	tblrd		*-
  5427  00165E  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  5428  001662  0E00               	movlw	0
  5429  001664  6E19               	movwf	___awdiv@divisor+1,c
  5430  001666  0E0A               	movlw	10
  5431  001668  6E18               	movwf	___awdiv@divisor,c
  5432  00166A  C06F  F016         	movff	fround@prec,___awdiv@dividend
  5433  00166E  6A17               	clrf	___awdiv@dividend+1,c
  5434  001670  EC79  F013         	call	___awdiv	;wreg free
  5435  001674  0E09               	movlw	9
  5436  001676  2416               	addwf	?___awdiv,w,c
  5437  001678  6E1E               	movwf	___wmul@multiplier,c
  5438  00167A  0E00               	movlw	0
  5439  00167C  2017               	addwfc	?___awdiv+1,w,c
  5440  00167E  6E1F               	movwf	___wmul@multiplier+1,c
  5441  001680  0E00               	movlw	0
  5442  001682  6E21               	movwf	___wmul@multiplicand+1,c
  5443  001684  0E03               	movlw	3
  5444  001686  6E20               	movwf	___wmul@multiplicand,c
  5445  001688  EC5E  F016         	call	___wmul	;wreg free
  5446  00168C  0E23               	movlw	low __npowers_
  5447  00168E  241E               	addwf	?___wmul,w,c
  5448  001690  6EF6               	movwf	tblptrl,c
  5449  001692  0EFE               	movlw	high __npowers_
  5450  001694  201F               	addwfc	?___wmul+1,w,c
  5451  001696  6EF7               	movwf	tblptrh,c
  5452  001698                     	if	0	;There are less than 3 active tblptr bytes
  5453  001698                     	endif
  5454  001698  0009               	tblrd		*+
  5455  00169A  CFF5 F037          	movff	tablat,___ftmul@f1
  5456  00169E  0009               	tblrd		*+
  5457  0016A0  CFF5 F038          	movff	tablat,___ftmul@f1+1
  5458  0016A4  000A               	tblrd		*-
  5459  0016A6  CFF5 F039          	movff	tablat,___ftmul@f1+2
  5460  0016AA  EC1F  F011         	call	___ftmul	;wreg free
  5461  0016AE  C037  F06C         	movff	?___ftmul,_fround$2542
  5462  0016B2  C038  F06D         	movff	?___ftmul+1,_fround$2542+1
  5463  0016B6  C039  F06E         	movff	?___ftmul+2,_fround$2542+2
  5464                           
  5465                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5466  0016BA  C06C  F037         	movff	_fround$2542,___ftmul@f1
  5467  0016BE  C06D  F038         	movff	_fround$2542+1,___ftmul@f1+1
  5468  0016C2  C06E  F039         	movff	_fround$2542+2,___ftmul@f1+2
  5469  0016C6  0E00               	movlw	0
  5470  0016C8  6E3A               	movwf	___ftmul@f2,c
  5471  0016CA  0E00               	movlw	0
  5472  0016CC  6E3B               	movwf	___ftmul@f2+1,c
  5473  0016CE  0E3F               	movlw	63
  5474  0016D0  6E3C               	movwf	___ftmul@f2+2,c
  5475  0016D2  EC1F  F011         	call	___ftmul	;wreg free
  5476  0016D6  D798               	goto	L5
  5477  0016D8                     l5355:
  5478                           
  5479                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5480  0016D8  0100               	movlb	0	; () banked
  5481  0016DA  516F               	movf	fround@prec& (0+255),w,b
  5482  0016DC  0D03               	mullw	3
  5483  0016DE  0E23               	movlw	low __npowers_
  5484  0016E0  24F3               	addwf	prodl,w,c
  5485  0016E2  6EF6               	movwf	tblptrl,c
  5486  0016E4  0EFE               	movlw	high __npowers_
  5487  0016E6  20F4               	addwfc	prodh,w,c
  5488  0016E8  6EF7               	movwf	tblptrh,c
  5489  0016EA                     	if	0	;There are less than 3 active tblptr bytes
  5490  0016EA                     	endif
  5491  0016EA  0009               	tblrd		*+
  5492  0016EC  CFF5 F037          	movff	tablat,___ftmul@f1
  5493  0016F0  0009               	tblrd		*+
  5494  0016F2  CFF5 F038          	movff	tablat,___ftmul@f1+1
  5495  0016F6  000A               	tblrd		*-
  5496  0016F8  CFF5 F039          	movff	tablat,___ftmul@f1+2
  5497  0016FC  0E00               	movlw	0
  5498  0016FE  6E3A               	movwf	___ftmul@f2,c
  5499  001700  0E00               	movlw	0
  5500  001702  6E3B               	movwf	___ftmul@f2+1,c
  5501  001704  0E3F               	movlw	63
  5502  001706  6E3C               	movwf	___ftmul@f2+2,c
  5503  001708  EC1F  F011         	call	___ftmul	;wreg free
  5504  00170C  C037  F066         	movff	?___ftmul,?_fround
  5505  001710  C038  F067         	movff	?___ftmul+1,?_fround+1
  5506  001714  C039  F068         	movff	?___ftmul+2,?_fround+2
  5507  001718  0012               	return	
  5508  00171A                     __end_of_fround:
  5509                           	opt stack 0
  5510                           tblptru	equ	0xFF8
  5511                           tblptrh	equ	0xFF7
  5512                           tblptrl	equ	0xFF6
  5513                           tablat	equ	0xFF5
  5514                           prodh	equ	0xFF4
  5515                           prodl	equ	0xFF3
  5516                           postinc0	equ	0xFEE
  5517                           wreg	equ	0xFE8
  5518                           indf1	equ	0xFE7
  5519                           postdec1	equ	0xFE5
  5520                           fsr1h	equ	0xFE2
  5521                           fsr1l	equ	0xFE1
  5522                           indf2	equ	0xFDF
  5523                           postinc2	equ	0xFDE
  5524                           postdec2	equ	0xFDD
  5525                           fsr2h	equ	0xFDA
  5526                           fsr2l	equ	0xFD9
  5527                           status	equ	0xFD8
  5528                           
  5529 ;; *************** function ___awmod *****************
  5530 ;; Defined at:
  5531 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;  dividend        2   15[COMRAM] int 
  5534 ;;  divisor         2   17[COMRAM] int 
  5535 ;; Auto vars:     Size  Location     Type
  5536 ;;  sign            1   20[COMRAM] unsigned char 
  5537 ;;  counter         1   19[COMRAM] unsigned char 
  5538 ;; Return value:  Size  Location     Type
  5539 ;;                  2   15[COMRAM] int 
  5540 ;; Registers used:
  5541 ;;		wreg, status,2, status,0
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5547 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5550 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5551 ;;Total ram usage:        6 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; Hardware stack levels required when called:    2
  5554 ;; This function calls:
  5555 ;;		Nothing
  5556 ;; This function is called by:
  5557 ;;		_fround
  5558 ;;		_scale
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561                           
  5562                           	psect	text7
  5563  0028F0                     __ptext7:
  5564                           	opt stack 0
  5565  0028F0                     ___awmod:
  5566                           	opt stack 25
  5567                           
  5568                           ;incstack = 0
  5569  0028F0  0E00               	movlw	0
  5570  0028F2  6E15               	movwf	___awmod@sign,c
  5571  0028F4  AE11               	btfss	___awmod@dividend+1,7,c
  5572  0028F6  D006               	goto	l5185
  5573  0028F8  6C10               	negf	___awmod@dividend,c
  5574  0028FA  1E11               	comf	___awmod@dividend+1,f,c
  5575  0028FC  B0D8               	btfsc	status,0,c
  5576  0028FE  2A11               	incf	___awmod@dividend+1,f,c
  5577  002900  0E01               	movlw	1
  5578  002902  6E15               	movwf	___awmod@sign,c
  5579  002904                     l5185:
  5580  002904  AE13               	btfss	___awmod@divisor+1,7,c
  5581  002906  D004               	goto	l5189
  5582  002908  6C12               	negf	___awmod@divisor,c
  5583  00290A  1E13               	comf	___awmod@divisor+1,f,c
  5584  00290C  B0D8               	btfsc	status,0,c
  5585  00290E  2A13               	incf	___awmod@divisor+1,f,c
  5586  002910                     l5189:
  5587  002910  5012               	movf	___awmod@divisor,w,c
  5588  002912  1013               	iorwf	___awmod@divisor+1,w,c
  5589  002914  B4D8               	btfsc	status,2,c
  5590  002916  D018               	goto	l5205
  5591  002918  0E01               	movlw	1
  5592  00291A  6E14               	movwf	___awmod@counter,c
  5593  00291C  D004               	goto	l5195
  5594  00291E                     l5193:
  5595  00291E  90D8               	bcf	status,0,c
  5596  002920  3612               	rlcf	___awmod@divisor,f,c
  5597  002922  3613               	rlcf	___awmod@divisor+1,f,c
  5598  002924  2A14               	incf	___awmod@counter,f,c
  5599  002926                     l5195:
  5600  002926  AE13               	btfss	___awmod@divisor+1,7,c
  5601  002928  D7FA               	goto	l5193
  5602  00292A                     l5197:
  5603  00292A  5012               	movf	___awmod@divisor,w,c
  5604  00292C  5C10               	subwf	___awmod@dividend,w,c
  5605  00292E  5013               	movf	___awmod@divisor+1,w,c
  5606  002930  5811               	subwfb	___awmod@dividend+1,w,c
  5607  002932  A0D8               	btfss	status,0,c
  5608  002934  D004               	goto	l5201
  5609  002936  5012               	movf	___awmod@divisor,w,c
  5610  002938  5E10               	subwf	___awmod@dividend,f,c
  5611  00293A  5013               	movf	___awmod@divisor+1,w,c
  5612  00293C  5A11               	subwfb	___awmod@dividend+1,f,c
  5613  00293E                     l5201:
  5614  00293E  90D8               	bcf	status,0,c
  5615  002940  3213               	rrcf	___awmod@divisor+1,f,c
  5616  002942  3212               	rrcf	___awmod@divisor,f,c
  5617  002944  2E14               	decfsz	___awmod@counter,f,c
  5618  002946  D7F1               	goto	l5197
  5619  002948                     l5205:
  5620  002948  5015               	movf	___awmod@sign,w,c
  5621  00294A  B4D8               	btfsc	status,2,c
  5622  00294C  D004               	goto	l5209
  5623  00294E  6C10               	negf	___awmod@dividend,c
  5624  002950  1E11               	comf	___awmod@dividend+1,f,c
  5625  002952  B0D8               	btfsc	status,0,c
  5626  002954  2A11               	incf	___awmod@dividend+1,f,c
  5627  002956                     l5209:
  5628  002956  C010  F010         	movff	___awmod@dividend,?___awmod
  5629  00295A  C011  F011         	movff	___awmod@dividend+1,?___awmod+1
  5630  00295E  0012               	return	
  5631  002960                     __end_of___awmod:
  5632                           	opt stack 0
  5633                           tblptru	equ	0xFF8
  5634                           tblptrh	equ	0xFF7
  5635                           tblptrl	equ	0xFF6
  5636                           tablat	equ	0xFF5
  5637                           prodh	equ	0xFF4
  5638                           prodl	equ	0xFF3
  5639                           postinc0	equ	0xFEE
  5640                           wreg	equ	0xFE8
  5641                           indf1	equ	0xFE7
  5642                           postdec1	equ	0xFE5
  5643                           fsr1h	equ	0xFE2
  5644                           fsr1l	equ	0xFE1
  5645                           indf2	equ	0xFDF
  5646                           postinc2	equ	0xFDE
  5647                           postdec2	equ	0xFDD
  5648                           fsr2h	equ	0xFDA
  5649                           fsr2l	equ	0xFD9
  5650                           status	equ	0xFD8
  5651                           
  5652 ;; *************** function ___awdiv *****************
  5653 ;; Defined at:
  5654 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;  dividend        2   21[COMRAM] int 
  5657 ;;  divisor         2   23[COMRAM] int 
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;  quotient        2   27[COMRAM] int 
  5660 ;;  sign            1   26[COMRAM] unsigned char 
  5661 ;;  counter         1   25[COMRAM] unsigned char 
  5662 ;; Return value:  Size  Location     Type
  5663 ;;                  2   21[COMRAM] int 
  5664 ;; Registers used:
  5665 ;;		wreg, status,2, status,0
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5671 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5674 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5675 ;;Total ram usage:        8 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    2
  5678 ;; This function calls:
  5679 ;;		Nothing
  5680 ;; This function is called by:
  5681 ;;		_fround
  5682 ;;		_scale
  5683 ;;		_sprintf
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687                           	psect	text8
  5688  0026F2                     __ptext8:
  5689                           	opt stack 0
  5690  0026F2                     ___awdiv:
  5691                           	opt stack 25
  5692                           
  5693                           ;incstack = 0
  5694  0026F2  0E00               	movlw	0
  5695  0026F4  6E1B               	movwf	___awdiv@sign,c
  5696  0026F6  AE19               	btfss	___awdiv@divisor+1,7,c
  5697  0026F8  D006               	goto	l5141
  5698  0026FA  6C18               	negf	___awdiv@divisor,c
  5699  0026FC  1E19               	comf	___awdiv@divisor+1,f,c
  5700  0026FE  B0D8               	btfsc	status,0,c
  5701  002700  2A19               	incf	___awdiv@divisor+1,f,c
  5702  002702  0E01               	movlw	1
  5703  002704  6E1B               	movwf	___awdiv@sign,c
  5704  002706                     l5141:
  5705  002706  AE17               	btfss	___awdiv@dividend+1,7,c
  5706  002708  D006               	goto	l5147
  5707  00270A  6C16               	negf	___awdiv@dividend,c
  5708  00270C  1E17               	comf	___awdiv@dividend+1,f,c
  5709  00270E  B0D8               	btfsc	status,0,c
  5710  002710  2A17               	incf	___awdiv@dividend+1,f,c
  5711  002712  0E01               	movlw	1
  5712  002714  1A1B               	xorwf	___awdiv@sign,f,c
  5713  002716                     l5147:
  5714  002716  0E00               	movlw	0
  5715  002718  6E1D               	movwf	___awdiv@quotient+1,c
  5716  00271A  0E00               	movlw	0
  5717  00271C  6E1C               	movwf	___awdiv@quotient,c
  5718  00271E  5018               	movf	___awdiv@divisor,w,c
  5719  002720  1019               	iorwf	___awdiv@divisor+1,w,c
  5720  002722  B4D8               	btfsc	status,2,c
  5721  002724  D01C               	goto	l5169
  5722  002726  0E01               	movlw	1
  5723  002728  6E1A               	movwf	___awdiv@counter,c
  5724  00272A  D004               	goto	l5155
  5725  00272C                     l5153:
  5726  00272C  90D8               	bcf	status,0,c
  5727  00272E  3618               	rlcf	___awdiv@divisor,f,c
  5728  002730  3619               	rlcf	___awdiv@divisor+1,f,c
  5729  002732  2A1A               	incf	___awdiv@counter,f,c
  5730  002734                     l5155:
  5731  002734  AE19               	btfss	___awdiv@divisor+1,7,c
  5732  002736  D7FA               	goto	l5153
  5733  002738                     l5157:
  5734  002738  90D8               	bcf	status,0,c
  5735  00273A  361C               	rlcf	___awdiv@quotient,f,c
  5736  00273C  361D               	rlcf	___awdiv@quotient+1,f,c
  5737  00273E  5018               	movf	___awdiv@divisor,w,c
  5738  002740  5C16               	subwf	___awdiv@dividend,w,c
  5739  002742  5019               	movf	___awdiv@divisor+1,w,c
  5740  002744  5817               	subwfb	___awdiv@dividend+1,w,c
  5741  002746  A0D8               	btfss	status,0,c
  5742  002748  D005               	goto	l5165
  5743  00274A  5018               	movf	___awdiv@divisor,w,c
  5744  00274C  5E16               	subwf	___awdiv@dividend,f,c
  5745  00274E  5019               	movf	___awdiv@divisor+1,w,c
  5746  002750  5A17               	subwfb	___awdiv@dividend+1,f,c
  5747  002752  801C               	bsf	___awdiv@quotient,0,c
  5748  002754                     l5165:
  5749  002754  90D8               	bcf	status,0,c
  5750  002756  3219               	rrcf	___awdiv@divisor+1,f,c
  5751  002758  3218               	rrcf	___awdiv@divisor,f,c
  5752  00275A  2E1A               	decfsz	___awdiv@counter,f,c
  5753  00275C  D7ED               	goto	l5157
  5754  00275E                     l5169:
  5755  00275E  501B               	movf	___awdiv@sign,w,c
  5756  002760  B4D8               	btfsc	status,2,c
  5757  002762  D004               	goto	l5173
  5758  002764  6C1C               	negf	___awdiv@quotient,c
  5759  002766  1E1D               	comf	___awdiv@quotient+1,f,c
  5760  002768  B0D8               	btfsc	status,0,c
  5761  00276A  2A1D               	incf	___awdiv@quotient+1,f,c
  5762  00276C                     l5173:
  5763  00276C  C01C  F016         	movff	___awdiv@quotient,?___awdiv
  5764  002770  C01D  F017         	movff	___awdiv@quotient+1,?___awdiv+1
  5765  002774  0012               	return	
  5766  002776                     __end_of___awdiv:
  5767                           	opt stack 0
  5768                           tblptru	equ	0xFF8
  5769                           tblptrh	equ	0xFF7
  5770                           tblptrl	equ	0xFF6
  5771                           tablat	equ	0xFF5
  5772                           prodh	equ	0xFF4
  5773                           prodl	equ	0xFF3
  5774                           postinc0	equ	0xFEE
  5775                           wreg	equ	0xFE8
  5776                           indf1	equ	0xFE7
  5777                           postdec1	equ	0xFE5
  5778                           fsr1h	equ	0xFE2
  5779                           fsr1l	equ	0xFE1
  5780                           indf2	equ	0xFDF
  5781                           postinc2	equ	0xFDE
  5782                           postdec2	equ	0xFDD
  5783                           fsr2h	equ	0xFDA
  5784                           fsr2l	equ	0xFD9
  5785                           status	equ	0xFD8
  5786                           
  5787 ;; *************** function __tdiv_to_l_ *****************
  5788 ;; Defined at:
  5789 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdivl.c"
  5790 ;; Parameters:    Size  Location     Type
  5791 ;;  f1              3   15[COMRAM] float 
  5792 ;;  f2              3   18[COMRAM] float 
  5793 ;; Auto vars:     Size  Location     Type
  5794 ;;  quot            4   24[COMRAM] unsigned long 
  5795 ;;  exp1            1   29[COMRAM] unsigned char 
  5796 ;;  cntr            1   28[COMRAM] unsigned char 
  5797 ;; Return value:  Size  Location     Type
  5798 ;;                  4   15[COMRAM] unsigned long 
  5799 ;; Registers used:
  5800 ;;		wreg, status,2, status,0
  5801 ;; Tracked objects:
  5802 ;;		On entry : 0/0
  5803 ;;		On exit  : 0/0
  5804 ;;		Unchanged: 0/0
  5805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5806 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5807 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5808 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5809 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;Total ram usage:       15 bytes
  5811 ;; Hardware stack levels used:    1
  5812 ;; Hardware stack levels required when called:    2
  5813 ;; This function calls:
  5814 ;;		Nothing
  5815 ;; This function is called by:
  5816 ;;		_sprintf
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           	psect	text9
  5821  001FE4                     __ptext9:
  5822                           	opt stack 0
  5823  001FE4                     __tdiv_to_l_:
  5824                           	opt stack 26
  5825                           
  5826                           ;incstack = 0
  5827  001FE4  C012  F016         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5828  001FE8  6A17               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5829  001FEA  6A18               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5830  001FEC  3411               	rlcf	__tdiv_to_l_@f1+1,w,c
  5831  001FEE  3616               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5832  001FF0  E301               	bnc	u5711
  5833  001FF2  8017               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5834  001FF4                     u5711:
  5835  001FF4  5016               	movf	??__tdiv_to_l_,w,c
  5836  001FF6  6E1E               	movwf	__tdiv_to_l_@exp1,c
  5837  001FF8  501E               	movf	__tdiv_to_l_@exp1,w,c
  5838  001FFA  A4D8               	btfss	status,2,c
  5839  001FFC  D009               	goto	l5415
  5840  001FFE  0E00               	movlw	0
  5841  002000  6E10               	movwf	?__tdiv_to_l_,c
  5842  002002  0E00               	movlw	0
  5843  002004  6E11               	movwf	?__tdiv_to_l_+1,c
  5844  002006  0E00               	movlw	0
  5845  002008  6E12               	movwf	?__tdiv_to_l_+2,c
  5846  00200A  0E00               	movlw	0
  5847  00200C  6E13               	movwf	?__tdiv_to_l_+3,c
  5848  00200E  0012               	return	
  5849  002010                     l5415:
  5850  002010  C015  F016         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5851  002014  6A17               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5852  002016  6A18               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5853  002018  3414               	rlcf	__tdiv_to_l_@f2+1,w,c
  5854  00201A  3616               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5855  00201C  E301               	bnc	u5731
  5856  00201E  8017               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5857  002020                     u5731:
  5858  002020  5016               	movf	??__tdiv_to_l_,w,c
  5859  002022  6E1D               	movwf	__tdiv_to_l_@cntr,c
  5860  002024  501D               	movf	__tdiv_to_l_@cntr,w,c
  5861  002026  A4D8               	btfss	status,2,c
  5862  002028  D009               	goto	l5421
  5863  00202A  0E00               	movlw	0
  5864  00202C  6E10               	movwf	?__tdiv_to_l_,c
  5865  00202E  0E00               	movlw	0
  5866  002030  6E11               	movwf	?__tdiv_to_l_+1,c
  5867  002032  0E00               	movlw	0
  5868  002034  6E12               	movwf	?__tdiv_to_l_+2,c
  5869  002036  0E00               	movlw	0
  5870  002038  6E13               	movwf	?__tdiv_to_l_+3,c
  5871  00203A  0012               	return	
  5872  00203C                     l5421:
  5873  00203C  8E11               	bsf	__tdiv_to_l_@f1+1,7,c
  5874  00203E  0EFF               	movlw	255
  5875  002040  1610               	andwf	__tdiv_to_l_@f1,f,c
  5876  002042  0EFF               	movlw	255
  5877  002044  1611               	andwf	__tdiv_to_l_@f1+1,f,c
  5878  002046  0E00               	movlw	0
  5879  002048  1612               	andwf	__tdiv_to_l_@f1+2,f,c
  5880  00204A  8E14               	bsf	__tdiv_to_l_@f2+1,7,c
  5881  00204C  0EFF               	movlw	255
  5882  00204E  1613               	andwf	__tdiv_to_l_@f2,f,c
  5883  002050  0EFF               	movlw	255
  5884  002052  1614               	andwf	__tdiv_to_l_@f2+1,f,c
  5885  002054  0E00               	movlw	0
  5886  002056  1615               	andwf	__tdiv_to_l_@f2+2,f,c
  5887  002058  0E00               	movlw	0
  5888  00205A  6E19               	movwf	__tdiv_to_l_@quot,c
  5889  00205C  0E00               	movlw	0
  5890  00205E  6E1A               	movwf	__tdiv_to_l_@quot+1,c
  5891  002060  0E00               	movlw	0
  5892  002062  6E1B               	movwf	__tdiv_to_l_@quot+2,c
  5893  002064  0E00               	movlw	0
  5894  002066  6E1C               	movwf	__tdiv_to_l_@quot+3,c
  5895  002068  0E7F               	movlw	127
  5896  00206A  5E1E               	subwf	__tdiv_to_l_@exp1,f,c
  5897  00206C  501D               	movf	__tdiv_to_l_@cntr,w,c
  5898  00206E  0F98               	addlw	152
  5899  002070  5E1E               	subwf	__tdiv_to_l_@exp1,f,c
  5900  002072  0E18               	movlw	24
  5901  002074  6E1D               	movwf	__tdiv_to_l_@cntr,c
  5902  002076                     l1097:
  5903  002076  90D8               	bcf	status,0,c
  5904  002078  3619               	rlcf	__tdiv_to_l_@quot,f,c
  5905  00207A  361A               	rlcf	__tdiv_to_l_@quot+1,f,c
  5906  00207C  361B               	rlcf	__tdiv_to_l_@quot+2,f,c
  5907  00207E  361C               	rlcf	__tdiv_to_l_@quot+3,f,c
  5908  002080  5013               	movf	__tdiv_to_l_@f2,w,c
  5909  002082  5C10               	subwf	__tdiv_to_l_@f1,w,c
  5910  002084  5014               	movf	__tdiv_to_l_@f2+1,w,c
  5911  002086  5811               	subwfb	__tdiv_to_l_@f1+1,w,c
  5912  002088  5015               	movf	__tdiv_to_l_@f2+2,w,c
  5913  00208A  5812               	subwfb	__tdiv_to_l_@f1+2,w,c
  5914  00208C  A0D8               	btfss	status,0,c
  5915  00208E  D007               	goto	l1098
  5916  002090  5013               	movf	__tdiv_to_l_@f2,w,c
  5917  002092  5E10               	subwf	__tdiv_to_l_@f1,f,c
  5918  002094  5014               	movf	__tdiv_to_l_@f2+1,w,c
  5919  002096  5A11               	subwfb	__tdiv_to_l_@f1+1,f,c
  5920  002098  5015               	movf	__tdiv_to_l_@f2+2,w,c
  5921  00209A  5A12               	subwfb	__tdiv_to_l_@f1+2,f,c
  5922  00209C  8019               	bsf	__tdiv_to_l_@quot,0,c
  5923  00209E                     l1098:
  5924  00209E  90D8               	bcf	status,0,c
  5925  0020A0  3610               	rlcf	__tdiv_to_l_@f1,f,c
  5926  0020A2  3611               	rlcf	__tdiv_to_l_@f1+1,f,c
  5927  0020A4  3612               	rlcf	__tdiv_to_l_@f1+2,f,c
  5928  0020A6  2E1D               	decfsz	__tdiv_to_l_@cntr,f,c
  5929  0020A8  D7E6               	goto	l1097
  5930  0020AA  AE1E               	btfss	__tdiv_to_l_@exp1,7,c
  5931  0020AC  D016               	goto	l5455
  5932  0020AE  501E               	movf	__tdiv_to_l_@exp1,w,c
  5933  0020B0  0A80               	xorlw	128
  5934  0020B2  0F97               	addlw	151
  5935  0020B4  B0D8               	btfsc	status,0,c
  5936  0020B6  D009               	goto	l5451
  5937  0020B8  0E00               	movlw	0
  5938  0020BA  6E10               	movwf	?__tdiv_to_l_,c
  5939  0020BC  0E00               	movlw	0
  5940  0020BE  6E11               	movwf	?__tdiv_to_l_+1,c
  5941  0020C0  0E00               	movlw	0
  5942  0020C2  6E12               	movwf	?__tdiv_to_l_+2,c
  5943  0020C4  0E00               	movlw	0
  5944  0020C6  6E13               	movwf	?__tdiv_to_l_+3,c
  5945  0020C8  0012               	return	
  5946  0020CA                     l5451:
  5947  0020CA  90D8               	bcf	status,0,c
  5948  0020CC  321C               	rrcf	__tdiv_to_l_@quot+3,f,c
  5949  0020CE  321B               	rrcf	__tdiv_to_l_@quot+2,f,c
  5950  0020D0  321A               	rrcf	__tdiv_to_l_@quot+1,f,c
  5951  0020D2  3219               	rrcf	__tdiv_to_l_@quot,f,c
  5952  0020D4  3E1E               	incfsz	__tdiv_to_l_@exp1,f,c
  5953  0020D6  D7F9               	goto	l5451
  5954  0020D8  D015               	goto	l1104
  5955  0020DA                     l5455:
  5956  0020DA  0E17               	movlw	23
  5957  0020DC  641E               	cpfsgt	__tdiv_to_l_@exp1,c
  5958  0020DE  D00F               	goto	l5463
  5959  0020E0  0E00               	movlw	0
  5960  0020E2  6E10               	movwf	?__tdiv_to_l_,c
  5961  0020E4  0E00               	movlw	0
  5962  0020E6  6E11               	movwf	?__tdiv_to_l_+1,c
  5963  0020E8  0E00               	movlw	0
  5964  0020EA  6E12               	movwf	?__tdiv_to_l_+2,c
  5965  0020EC  0E00               	movlw	0
  5966  0020EE  6E13               	movwf	?__tdiv_to_l_+3,c
  5967  0020F0  0012               	return	
  5968  0020F2                     l5461:
  5969  0020F2  90D8               	bcf	status,0,c
  5970  0020F4  3619               	rlcf	__tdiv_to_l_@quot,f,c
  5971  0020F6  361A               	rlcf	__tdiv_to_l_@quot+1,f,c
  5972  0020F8  361B               	rlcf	__tdiv_to_l_@quot+2,f,c
  5973  0020FA  361C               	rlcf	__tdiv_to_l_@quot+3,f,c
  5974  0020FC  061E               	decf	__tdiv_to_l_@exp1,f,c
  5975  0020FE                     l5463:
  5976  0020FE  501E               	movf	__tdiv_to_l_@exp1,w,c
  5977  002100  A4D8               	btfss	status,2,c
  5978  002102  D7F7               	goto	l5461
  5979  002104                     l1104:
  5980  002104  C019  F010         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5981  002108  C01A  F011         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5982  00210C  C01B  F012         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5983  002110  C01C  F013         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5984  002114  0012               	return		;funcret
  5985  002116                     __end_of__tdiv_to_l_:
  5986                           	opt stack 0
  5987                           tblptru	equ	0xFF8
  5988                           tblptrh	equ	0xFF7
  5989                           tblptrl	equ	0xFF6
  5990                           tablat	equ	0xFF5
  5991                           prodh	equ	0xFF4
  5992                           prodl	equ	0xFF3
  5993                           postinc0	equ	0xFEE
  5994                           wreg	equ	0xFE8
  5995                           indf1	equ	0xFE7
  5996                           postdec1	equ	0xFE5
  5997                           fsr1h	equ	0xFE2
  5998                           fsr1l	equ	0xFE1
  5999                           indf2	equ	0xFDF
  6000                           postinc2	equ	0xFDE
  6001                           postdec2	equ	0xFDD
  6002                           fsr2h	equ	0xFDA
  6003                           fsr2l	equ	0xFD9
  6004                           status	equ	0xFD8
  6005                           
  6006 ;; *************** function __div_to_l_ *****************
  6007 ;; Defined at:
  6008 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fldivl.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  f1              3   15[COMRAM] unsigned long 
  6011 ;;  f2              3   18[COMRAM] unsigned long 
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;  quot            4   21[COMRAM] unsigned long 
  6014 ;;  exp1            1   26[COMRAM] unsigned char 
  6015 ;;  cntr            1   25[COMRAM] unsigned char 
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  4   15[COMRAM] unsigned long 
  6018 ;; Registers used:
  6019 ;;		wreg, status,2, status,0
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6025 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6026 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6028 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6029 ;;Total ram usage:       12 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:    2
  6032 ;; This function calls:
  6033 ;;		Nothing
  6034 ;; This function is called by:
  6035 ;;		_sprintf
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           	psect	text10
  6040  002116                     __ptext10:
  6041                           	opt stack 0
  6042  002116                     __div_to_l_:
  6043                           	opt stack 26
  6044                           
  6045                           ;incstack = 0
  6046  002116  3412               	rlcf	__div_to_l_@f1+2,w,c
  6047  002118  3413               	rlcf	__div_to_l_@f1+3,w,c
  6048  00211A  6E1B               	movwf	__div_to_l_@exp1,c
  6049  00211C  501B               	movf	__div_to_l_@exp1,w,c
  6050  00211E  A4D8               	btfss	status,2,c
  6051  002120  D009               	goto	l5471
  6052  002122  0E00               	movlw	0
  6053  002124  6E10               	movwf	?__div_to_l_,c
  6054  002126  0E00               	movlw	0
  6055  002128  6E11               	movwf	?__div_to_l_+1,c
  6056  00212A  0E00               	movlw	0
  6057  00212C  6E12               	movwf	?__div_to_l_+2,c
  6058  00212E  0E00               	movlw	0
  6059  002130  6E13               	movwf	?__div_to_l_+3,c
  6060  002132  0012               	return	
  6061  002134                     l5471:
  6062  002134  3415               	rlcf	__div_to_l_@f2+2,w,c
  6063  002136  3416               	rlcf	__div_to_l_@f2+3,w,c
  6064  002138  6E1A               	movwf	__div_to_l_@cntr,c
  6065  00213A  501A               	movf	__div_to_l_@cntr,w,c
  6066  00213C  A4D8               	btfss	status,2,c
  6067  00213E  D009               	goto	l5477
  6068  002140  0E00               	movlw	0
  6069  002142  6E10               	movwf	?__div_to_l_,c
  6070  002144  0E00               	movlw	0
  6071  002146  6E11               	movwf	?__div_to_l_+1,c
  6072  002148  0E00               	movlw	0
  6073  00214A  6E12               	movwf	?__div_to_l_+2,c
  6074  00214C  0E00               	movlw	0
  6075  00214E  6E13               	movwf	?__div_to_l_+3,c
  6076  002150  0012               	return	
  6077  002152                     l5477:
  6078  002152  8E12               	bsf	__div_to_l_@f1+2,7,c
  6079  002154  0EFF               	movlw	255
  6080  002156  1610               	andwf	__div_to_l_@f1,f,c
  6081  002158  0EFF               	movlw	255
  6082  00215A  1611               	andwf	__div_to_l_@f1+1,f,c
  6083  00215C  0EFF               	movlw	255
  6084  00215E  1612               	andwf	__div_to_l_@f1+2,f,c
  6085  002160  0E00               	movlw	0
  6086  002162  1613               	andwf	__div_to_l_@f1+3,f,c
  6087  002164  8E15               	bsf	__div_to_l_@f2+2,7,c
  6088  002166  0EFF               	movlw	255
  6089  002168  1613               	andwf	__div_to_l_@f2,f,c
  6090  00216A  0EFF               	movlw	255
  6091  00216C  1614               	andwf	__div_to_l_@f2+1,f,c
  6092  00216E  0EFF               	movlw	255
  6093  002170  1615               	andwf	__div_to_l_@f2+2,f,c
  6094  002172  0E00               	movlw	0
  6095  002174  1616               	andwf	__div_to_l_@f2+3,f,c
  6096  002176  0E00               	movlw	0
  6097  002178  6E16               	movwf	__div_to_l_@quot,c
  6098  00217A  0E00               	movlw	0
  6099  00217C  6E17               	movwf	__div_to_l_@quot+1,c
  6100  00217E  0E00               	movlw	0
  6101  002180  6E18               	movwf	__div_to_l_@quot+2,c
  6102  002182  0E00               	movlw	0
  6103  002184  6E19               	movwf	__div_to_l_@quot+3,c
  6104  002186  0E7F               	movlw	127
  6105  002188  5E1B               	subwf	__div_to_l_@exp1,f,c
  6106  00218A  501A               	movf	__div_to_l_@cntr,w,c
  6107  00218C  0FA0               	addlw	160
  6108  00218E  5E1B               	subwf	__div_to_l_@exp1,f,c
  6109  002190  0E20               	movlw	32
  6110  002192  6E1A               	movwf	__div_to_l_@cntr,c
  6111  002194                     l5491:
  6112  002194  90D8               	bcf	status,0,c
  6113  002196  3616               	rlcf	__div_to_l_@quot,f,c
  6114  002198  3617               	rlcf	__div_to_l_@quot+1,f,c
  6115  00219A  3618               	rlcf	__div_to_l_@quot+2,f,c
  6116  00219C  3619               	rlcf	__div_to_l_@quot+3,f,c
  6117  00219E  5013               	movf	__div_to_l_@f2,w,c
  6118  0021A0  5C10               	subwf	__div_to_l_@f1,w,c
  6119  0021A2  5014               	movf	__div_to_l_@f2+1,w,c
  6120  0021A4  5811               	subwfb	__div_to_l_@f1+1,w,c
  6121  0021A6  5015               	movf	__div_to_l_@f2+2,w,c
  6122  0021A8  5812               	subwfb	__div_to_l_@f1+2,w,c
  6123  0021AA  5016               	movf	__div_to_l_@f2+3,w,c
  6124  0021AC  5813               	subwfb	__div_to_l_@f1+3,w,c
  6125  0021AE  A0D8               	btfss	status,0,c
  6126  0021B0  D009               	goto	l5499
  6127  0021B2  5013               	movf	__div_to_l_@f2,w,c
  6128  0021B4  5E10               	subwf	__div_to_l_@f1,f,c
  6129  0021B6  5014               	movf	__div_to_l_@f2+1,w,c
  6130  0021B8  5A11               	subwfb	__div_to_l_@f1+1,f,c
  6131  0021BA  5015               	movf	__div_to_l_@f2+2,w,c
  6132  0021BC  5A12               	subwfb	__div_to_l_@f1+2,f,c
  6133  0021BE  5016               	movf	__div_to_l_@f2+3,w,c
  6134  0021C0  5A13               	subwfb	__div_to_l_@f1+3,f,c
  6135  0021C2  8016               	bsf	__div_to_l_@quot,0,c
  6136  0021C4                     l5499:
  6137  0021C4  90D8               	bcf	status,0,c
  6138  0021C6  3610               	rlcf	__div_to_l_@f1,f,c
  6139  0021C8  3611               	rlcf	__div_to_l_@f1+1,f,c
  6140  0021CA  3612               	rlcf	__div_to_l_@f1+2,f,c
  6141  0021CC  3613               	rlcf	__div_to_l_@f1+3,f,c
  6142  0021CE  2E1A               	decfsz	__div_to_l_@cntr,f,c
  6143  0021D0  D7E1               	goto	l5491
  6144  0021D2  AE1B               	btfss	__div_to_l_@exp1,7,c
  6145  0021D4  D016               	goto	l5515
  6146  0021D6  501B               	movf	__div_to_l_@exp1,w,c
  6147  0021D8  0A80               	xorlw	128
  6148  0021DA  0F9F               	addlw	159
  6149  0021DC  B0D8               	btfsc	status,0,c
  6150  0021DE  D009               	goto	l5511
  6151  0021E0  0E00               	movlw	0
  6152  0021E2  6E10               	movwf	?__div_to_l_,c
  6153  0021E4  0E00               	movlw	0
  6154  0021E6  6E11               	movwf	?__div_to_l_+1,c
  6155  0021E8  0E00               	movlw	0
  6156  0021EA  6E12               	movwf	?__div_to_l_+2,c
  6157  0021EC  0E00               	movlw	0
  6158  0021EE  6E13               	movwf	?__div_to_l_+3,c
  6159  0021F0  0012               	return	
  6160  0021F2                     l5511:
  6161  0021F2  90D8               	bcf	status,0,c
  6162  0021F4  3219               	rrcf	__div_to_l_@quot+3,f,c
  6163  0021F6  3218               	rrcf	__div_to_l_@quot+2,f,c
  6164  0021F8  3217               	rrcf	__div_to_l_@quot+1,f,c
  6165  0021FA  3216               	rrcf	__div_to_l_@quot,f,c
  6166  0021FC  3E1B               	incfsz	__div_to_l_@exp1,f,c
  6167  0021FE  D7F9               	goto	l5511
  6168  002200  D015               	goto	l1000
  6169  002202                     l5515:
  6170  002202  0E1F               	movlw	31
  6171  002204  641B               	cpfsgt	__div_to_l_@exp1,c
  6172  002206  D00F               	goto	l5523
  6173  002208  0E00               	movlw	0
  6174  00220A  6E10               	movwf	?__div_to_l_,c
  6175  00220C  0E00               	movlw	0
  6176  00220E  6E11               	movwf	?__div_to_l_+1,c
  6177  002210  0E00               	movlw	0
  6178  002212  6E12               	movwf	?__div_to_l_+2,c
  6179  002214  0E00               	movlw	0
  6180  002216  6E13               	movwf	?__div_to_l_+3,c
  6181  002218  0012               	return	
  6182  00221A                     l5521:
  6183  00221A  90D8               	bcf	status,0,c
  6184  00221C  3616               	rlcf	__div_to_l_@quot,f,c
  6185  00221E  3617               	rlcf	__div_to_l_@quot+1,f,c
  6186  002220  3618               	rlcf	__div_to_l_@quot+2,f,c
  6187  002222  3619               	rlcf	__div_to_l_@quot+3,f,c
  6188  002224  061B               	decf	__div_to_l_@exp1,f,c
  6189  002226                     l5523:
  6190  002226  501B               	movf	__div_to_l_@exp1,w,c
  6191  002228  A4D8               	btfss	status,2,c
  6192  00222A  D7F7               	goto	l5521
  6193  00222C                     l1000:
  6194  00222C  C016  F010         	movff	__div_to_l_@quot,?__div_to_l_
  6195  002230  C017  F011         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6196  002234  C018  F012         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6197  002238  C019  F013         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6198  00223C  0012               	return		;funcret
  6199  00223E                     __end_of__div_to_l_:
  6200                           	opt stack 0
  6201                           tblptru	equ	0xFF8
  6202                           tblptrh	equ	0xFF7
  6203                           tblptrl	equ	0xFF6
  6204                           tablat	equ	0xFF5
  6205                           prodh	equ	0xFF4
  6206                           prodl	equ	0xFF3
  6207                           postinc0	equ	0xFEE
  6208                           wreg	equ	0xFE8
  6209                           indf1	equ	0xFE7
  6210                           postdec1	equ	0xFE5
  6211                           fsr1h	equ	0xFE2
  6212                           fsr1l	equ	0xFE1
  6213                           indf2	equ	0xFDF
  6214                           postinc2	equ	0xFDE
  6215                           postdec2	equ	0xFDD
  6216                           fsr2h	equ	0xFDA
  6217                           fsr2l	equ	0xFD9
  6218                           status	equ	0xFD8
  6219                           
  6220 ;; *************** function ___lltoft *****************
  6221 ;; Defined at:
  6222 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lltoft.c"
  6223 ;; Parameters:    Size  Location     Type
  6224 ;;  c               4   23[COMRAM] unsigned long 
  6225 ;; Auto vars:     Size  Location     Type
  6226 ;;  exp             1   31[COMRAM] unsigned char 
  6227 ;; Return value:  Size  Location     Type
  6228 ;;                  3   23[COMRAM] float 
  6229 ;; Registers used:
  6230 ;;		wreg, status,2, status,0, cstack
  6231 ;; Tracked objects:
  6232 ;;		On entry : 0/0
  6233 ;;		On exit  : 0/0
  6234 ;;		Unchanged: 0/0
  6235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6236 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6238 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6239 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6240 ;;Total ram usage:        9 bytes
  6241 ;; Hardware stack levels used:    1
  6242 ;; Hardware stack levels required when called:    3
  6243 ;; This function calls:
  6244 ;;		___ftpack
  6245 ;; This function is called by:
  6246 ;;		_sprintf
  6247 ;; This function uses a non-reentrant model
  6248 ;;
  6249                           
  6250                           	psect	text11
  6251  002A86                     __ptext11:
  6252                           	opt stack 0
  6253  002A86                     ___lltoft:
  6254                           	opt stack 25
  6255                           
  6256                           ;incstack = 0
  6257  002A86  0E8E               	movlw	142
  6258  002A88  6E20               	movwf	___lltoft@exp,c
  6259  002A8A  D006               	goto	l5705
  6260  002A8C                     l5703:
  6261  002A8C  90D8               	bcf	status,0,c
  6262  002A8E  321B               	rrcf	___lltoft@c+3,f,c
  6263  002A90  321A               	rrcf	___lltoft@c+2,f,c
  6264  002A92  3219               	rrcf	___lltoft@c+1,f,c
  6265  002A94  3218               	rrcf	___lltoft@c,f,c
  6266  002A96  2A20               	incf	___lltoft@exp,f,c
  6267  002A98                     l5705:
  6268  002A98  0E00               	movlw	0
  6269  002A9A  1418               	andwf	___lltoft@c,w,c
  6270  002A9C  6E1C               	movwf	??___lltoft& (0+255),c
  6271  002A9E  0E00               	movlw	0
  6272  002AA0  1419               	andwf	___lltoft@c+1,w,c
  6273  002AA2  6E1D               	movwf	(??___lltoft+1)& (0+255),c
  6274  002AA4  0E00               	movlw	0
  6275  002AA6  141A               	andwf	___lltoft@c+2,w,c
  6276  002AA8  6E1E               	movwf	(??___lltoft+2)& (0+255),c
  6277  002AAA  0EFF               	movlw	255
  6278  002AAC  141B               	andwf	___lltoft@c+3,w,c
  6279  002AAE  6E1F               	movwf	(??___lltoft+3)& (0+255),c
  6280  002AB0  501C               	movf	??___lltoft,w,c
  6281  002AB2  101D               	iorwf	??___lltoft+1,w,c
  6282  002AB4  101E               	iorwf	??___lltoft+2,w,c
  6283  002AB6  101F               	iorwf	??___lltoft+3,w,c
  6284  002AB8  A4D8               	btfss	status,2,c
  6285  002ABA  D7E8               	goto	l5703
  6286  002ABC  C018  F010         	movff	___lltoft@c,___ftpack@arg
  6287  002AC0  C019  F011         	movff	___lltoft@c+1,___ftpack@arg+1
  6288  002AC4  C01A  F012         	movff	___lltoft@c+2,___ftpack@arg+2
  6289  002AC8  C020  F013         	movff	___lltoft@exp,___ftpack@exp
  6290  002ACC  0E00               	movlw	0
  6291  002ACE  6E14               	movwf	___ftpack@sign,c
  6292  002AD0  EC92  F012         	call	___ftpack	;wreg free
  6293  002AD4  C010  F018         	movff	?___ftpack,?___lltoft
  6294  002AD8  C011  F019         	movff	?___ftpack+1,?___lltoft+1
  6295  002ADC  C012  F01A         	movff	?___ftpack+2,?___lltoft+2
  6296  002AE0  0012               	return	
  6297  002AE2                     __end_of___lltoft:
  6298                           	opt stack 0
  6299                           tblptru	equ	0xFF8
  6300                           tblptrh	equ	0xFF7
  6301                           tblptrl	equ	0xFF6
  6302                           tablat	equ	0xFF5
  6303                           prodh	equ	0xFF4
  6304                           prodl	equ	0xFF3
  6305                           postinc0	equ	0xFEE
  6306                           wreg	equ	0xFE8
  6307                           indf1	equ	0xFE7
  6308                           postdec1	equ	0xFE5
  6309                           fsr1h	equ	0xFE2
  6310                           fsr1l	equ	0xFE1
  6311                           indf2	equ	0xFDF
  6312                           postinc2	equ	0xFDE
  6313                           postdec2	equ	0xFDD
  6314                           fsr2h	equ	0xFDA
  6315                           fsr2l	equ	0xFD9
  6316                           status	equ	0xFD8
  6317                           
  6318 ;; *************** function ___llmod *****************
  6319 ;; Defined at:
  6320 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\llmod.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  dividend        4   28[COMRAM] unsigned long 
  6323 ;;  divisor         4   32[COMRAM] unsigned long 
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;  counter         1   36[COMRAM] unsigned char 
  6326 ;; Return value:  Size  Location     Type
  6327 ;;                  4   28[COMRAM] unsigned long 
  6328 ;; Registers used:
  6329 ;;		wreg, status,2, status,0
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6335 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6336 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6338 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6339 ;;Total ram usage:        9 bytes
  6340 ;; Hardware stack levels used:    1
  6341 ;; Hardware stack levels required when called:    2
  6342 ;; This function calls:
  6343 ;;		Nothing
  6344 ;; This function is called by:
  6345 ;;		_sprintf
  6346 ;; This function uses a non-reentrant model
  6347 ;;
  6348                           
  6349                           	psect	text12
  6350  002960                     __ptext12:
  6351                           	opt stack 0
  6352  002960                     ___llmod:
  6353                           	opt stack 26
  6354                           
  6355                           ;incstack = 0
  6356  002960  5021               	movf	___llmod@divisor,w,c
  6357  002962  1022               	iorwf	___llmod@divisor+1,w,c
  6358  002964  1023               	iorwf	___llmod@divisor+2,w,c
  6359  002966  1024               	iorwf	___llmod@divisor+3,w,c
  6360  002968  B4D8               	btfsc	status,2,c
  6361  00296A  D024               	goto	l1189
  6362  00296C  0E01               	movlw	1
  6363  00296E  6E25               	movwf	___llmod@counter,c
  6364  002970  D006               	goto	l5691
  6365  002972                     l5689:
  6366  002972  90D8               	bcf	status,0,c
  6367  002974  3621               	rlcf	___llmod@divisor,f,c
  6368  002976  3622               	rlcf	___llmod@divisor+1,f,c
  6369  002978  3623               	rlcf	___llmod@divisor+2,f,c
  6370  00297A  3624               	rlcf	___llmod@divisor+3,f,c
  6371  00297C  2A25               	incf	___llmod@counter,f,c
  6372  00297E                     l5691:
  6373  00297E  AE24               	btfss	___llmod@divisor+3,7,c
  6374  002980  D7F8               	goto	l5689
  6375  002982                     l5693:
  6376  002982  5021               	movf	___llmod@divisor,w,c
  6377  002984  5C1D               	subwf	___llmod@dividend,w,c
  6378  002986  5022               	movf	___llmod@divisor+1,w,c
  6379  002988  581E               	subwfb	___llmod@dividend+1,w,c
  6380  00298A  5023               	movf	___llmod@divisor+2,w,c
  6381  00298C  581F               	subwfb	___llmod@dividend+2,w,c
  6382  00298E  5024               	movf	___llmod@divisor+3,w,c
  6383  002990  5820               	subwfb	___llmod@dividend+3,w,c
  6384  002992  A0D8               	btfss	status,0,c
  6385  002994  D008               	goto	l5697
  6386  002996  5021               	movf	___llmod@divisor,w,c
  6387  002998  5E1D               	subwf	___llmod@dividend,f,c
  6388  00299A  5022               	movf	___llmod@divisor+1,w,c
  6389  00299C  5A1E               	subwfb	___llmod@dividend+1,f,c
  6390  00299E  5023               	movf	___llmod@divisor+2,w,c
  6391  0029A0  5A1F               	subwfb	___llmod@dividend+2,f,c
  6392  0029A2  5024               	movf	___llmod@divisor+3,w,c
  6393  0029A4  5A20               	subwfb	___llmod@dividend+3,f,c
  6394  0029A6                     l5697:
  6395  0029A6  90D8               	bcf	status,0,c
  6396  0029A8  3224               	rrcf	___llmod@divisor+3,f,c
  6397  0029AA  3223               	rrcf	___llmod@divisor+2,f,c
  6398  0029AC  3222               	rrcf	___llmod@divisor+1,f,c
  6399  0029AE  3221               	rrcf	___llmod@divisor,f,c
  6400  0029B0  2E25               	decfsz	___llmod@counter,f,c
  6401  0029B2  D7E7               	goto	l5693
  6402  0029B4                     l1189:
  6403  0029B4  C01D  F01D         	movff	___llmod@dividend,?___llmod
  6404  0029B8  C01E  F01E         	movff	___llmod@dividend+1,?___llmod+1
  6405  0029BC  C01F  F01F         	movff	___llmod@dividend+2,?___llmod+2
  6406  0029C0  C020  F020         	movff	___llmod@dividend+3,?___llmod+3
  6407  0029C4  0012               	return		;funcret
  6408  0029C6                     __end_of___llmod:
  6409                           	opt stack 0
  6410                           tblptru	equ	0xFF8
  6411                           tblptrh	equ	0xFF7
  6412                           tblptrl	equ	0xFF6
  6413                           tablat	equ	0xFF5
  6414                           prodh	equ	0xFF4
  6415                           prodl	equ	0xFF3
  6416                           postinc0	equ	0xFEE
  6417                           wreg	equ	0xFE8
  6418                           indf1	equ	0xFE7
  6419                           postdec1	equ	0xFE5
  6420                           fsr1h	equ	0xFE2
  6421                           fsr1l	equ	0xFE1
  6422                           indf2	equ	0xFDF
  6423                           postinc2	equ	0xFDE
  6424                           postdec2	equ	0xFDD
  6425                           fsr2h	equ	0xFDA
  6426                           fsr2l	equ	0xFD9
  6427                           status	equ	0xFD8
  6428                           
  6429 ;; *************** function ___lldiv *****************
  6430 ;; Defined at:
  6431 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
  6432 ;; Parameters:    Size  Location     Type
  6433 ;;  dividend        4   15[COMRAM] unsigned long 
  6434 ;;  divisor         4   19[COMRAM] unsigned long 
  6435 ;; Auto vars:     Size  Location     Type
  6436 ;;  quotient        4   23[COMRAM] unsigned long 
  6437 ;;  counter         1   27[COMRAM] unsigned char 
  6438 ;; Return value:  Size  Location     Type
  6439 ;;                  4   15[COMRAM] unsigned long 
  6440 ;; Registers used:
  6441 ;;		wreg, status,2, status,0
  6442 ;; Tracked objects:
  6443 ;;		On entry : 0/0
  6444 ;;		On exit  : 0/0
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6447 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6448 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6450 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6451 ;;Total ram usage:       13 bytes
  6452 ;; Hardware stack levels used:    1
  6453 ;; Hardware stack levels required when called:    2
  6454 ;; This function calls:
  6455 ;;		Nothing
  6456 ;; This function is called by:
  6457 ;;		_sprintf
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           	psect	text13
  6462  002776                     __ptext13:
  6463                           	opt stack 0
  6464  002776                     ___lldiv:
  6465                           	opt stack 26
  6466                           
  6467                           ;incstack = 0
  6468  002776  0E00               	movlw	0
  6469  002778  6E18               	movwf	___lldiv@quotient,c
  6470  00277A  0E00               	movlw	0
  6471  00277C  6E19               	movwf	___lldiv@quotient+1,c
  6472  00277E  0E00               	movlw	0
  6473  002780  6E1A               	movwf	___lldiv@quotient+2,c
  6474  002782  0E00               	movlw	0
  6475  002784  6E1B               	movwf	___lldiv@quotient+3,c
  6476  002786  5014               	movf	___lldiv@divisor,w,c
  6477  002788  1015               	iorwf	___lldiv@divisor+1,w,c
  6478  00278A  1016               	iorwf	___lldiv@divisor+2,w,c
  6479  00278C  1017               	iorwf	___lldiv@divisor+3,w,c
  6480  00278E  B4D8               	btfsc	status,2,c
  6481  002790  D02A               	goto	l1179
  6482  002792  0E01               	movlw	1
  6483  002794  6E1C               	movwf	___lldiv@counter,c
  6484  002796  D006               	goto	l5671
  6485  002798                     l5669:
  6486  002798  90D8               	bcf	status,0,c
  6487  00279A  3614               	rlcf	___lldiv@divisor,f,c
  6488  00279C  3615               	rlcf	___lldiv@divisor+1,f,c
  6489  00279E  3616               	rlcf	___lldiv@divisor+2,f,c
  6490  0027A0  3617               	rlcf	___lldiv@divisor+3,f,c
  6491  0027A2  2A1C               	incf	___lldiv@counter,f,c
  6492  0027A4                     l5671:
  6493  0027A4  AE17               	btfss	___lldiv@divisor+3,7,c
  6494  0027A6  D7F8               	goto	l5669
  6495  0027A8                     l5673:
  6496  0027A8  90D8               	bcf	status,0,c
  6497  0027AA  3618               	rlcf	___lldiv@quotient,f,c
  6498  0027AC  3619               	rlcf	___lldiv@quotient+1,f,c
  6499  0027AE  361A               	rlcf	___lldiv@quotient+2,f,c
  6500  0027B0  361B               	rlcf	___lldiv@quotient+3,f,c
  6501  0027B2  5014               	movf	___lldiv@divisor,w,c
  6502  0027B4  5C10               	subwf	___lldiv@dividend,w,c
  6503  0027B6  5015               	movf	___lldiv@divisor+1,w,c
  6504  0027B8  5811               	subwfb	___lldiv@dividend+1,w,c
  6505  0027BA  5016               	movf	___lldiv@divisor+2,w,c
  6506  0027BC  5812               	subwfb	___lldiv@dividend+2,w,c
  6507  0027BE  5017               	movf	___lldiv@divisor+3,w,c
  6508  0027C0  5813               	subwfb	___lldiv@dividend+3,w,c
  6509  0027C2  A0D8               	btfss	status,0,c
  6510  0027C4  D009               	goto	l5681
  6511  0027C6  5014               	movf	___lldiv@divisor,w,c
  6512  0027C8  5E10               	subwf	___lldiv@dividend,f,c
  6513  0027CA  5015               	movf	___lldiv@divisor+1,w,c
  6514  0027CC  5A11               	subwfb	___lldiv@dividend+1,f,c
  6515  0027CE  5016               	movf	___lldiv@divisor+2,w,c
  6516  0027D0  5A12               	subwfb	___lldiv@dividend+2,f,c
  6517  0027D2  5017               	movf	___lldiv@divisor+3,w,c
  6518  0027D4  5A13               	subwfb	___lldiv@dividend+3,f,c
  6519  0027D6  8018               	bsf	___lldiv@quotient,0,c
  6520  0027D8                     l5681:
  6521  0027D8  90D8               	bcf	status,0,c
  6522  0027DA  3217               	rrcf	___lldiv@divisor+3,f,c
  6523  0027DC  3216               	rrcf	___lldiv@divisor+2,f,c
  6524  0027DE  3215               	rrcf	___lldiv@divisor+1,f,c
  6525  0027E0  3214               	rrcf	___lldiv@divisor,f,c
  6526  0027E2  2E1C               	decfsz	___lldiv@counter,f,c
  6527  0027E4  D7E1               	goto	l5673
  6528  0027E6                     l1179:
  6529  0027E6  C018  F010         	movff	___lldiv@quotient,?___lldiv
  6530  0027EA  C019  F011         	movff	___lldiv@quotient+1,?___lldiv+1
  6531  0027EE  C01A  F012         	movff	___lldiv@quotient+2,?___lldiv+2
  6532  0027F2  C01B  F013         	movff	___lldiv@quotient+3,?___lldiv+3
  6533  0027F6  0012               	return		;funcret
  6534  0027F8                     __end_of___lldiv:
  6535                           	opt stack 0
  6536                           tblptru	equ	0xFF8
  6537                           tblptrh	equ	0xFF7
  6538                           tblptrl	equ	0xFF6
  6539                           tablat	equ	0xFF5
  6540                           prodh	equ	0xFF4
  6541                           prodl	equ	0xFF3
  6542                           postinc0	equ	0xFEE
  6543                           wreg	equ	0xFE8
  6544                           indf1	equ	0xFE7
  6545                           postdec1	equ	0xFE5
  6546                           fsr1h	equ	0xFE2
  6547                           fsr1l	equ	0xFE1
  6548                           indf2	equ	0xFDF
  6549                           postinc2	equ	0xFDE
  6550                           postdec2	equ	0xFDD
  6551                           fsr2h	equ	0xFDA
  6552                           fsr2l	equ	0xFD9
  6553                           status	equ	0xFD8
  6554                           
  6555 ;; *************** function ___fttol *****************
  6556 ;; Defined at:
  6557 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  6558 ;; Parameters:    Size  Location     Type
  6559 ;;  f1              3   13[BANK0 ] float 
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;  lval            4   23[BANK0 ] unsigned long 
  6562 ;;  exp1            1   27[BANK0 ] unsigned char 
  6563 ;;  sign1           1   22[BANK0 ] unsigned char 
  6564 ;; Return value:  Size  Location     Type
  6565 ;;                  4   13[BANK0 ] long 
  6566 ;; Registers used:
  6567 ;;		wreg, status,2, status,0
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6573 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6574 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6575 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6576 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;Total ram usage:       15 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:    2
  6580 ;; This function calls:
  6581 ;;		Nothing
  6582 ;; This function is called by:
  6583 ;;		_sprintf
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           	psect	text14
  6588  001C32                     __ptext14:
  6589                           	opt stack 0
  6590  001C32                     ___fttol:
  6591                           	opt stack 26
  6592                           
  6593                           ;incstack = 0
  6594  001C32  C06F  F071         	movff	___fttol@f1+2,??___fttol
  6595  001C36  0100               	movlb	0	; () banked
  6596  001C38  6B72               	clrf	(??___fttol+1)& (0+255),b
  6597  001C3A  6B73               	clrf	(??___fttol+2)& (0+255),b
  6598  001C3C  0100               	movlb	0	; () banked
  6599  001C3E  356E               	rlcf	(___fttol@f1+1)& (0+255),w,b
  6600  001C40  0100               	movlb	0	; () banked
  6601  001C42  3771               	rlcf	??___fttol& (0+255),f,b
  6602  001C44  E301               	bnc	u5981
  6603  001C46  8172               	bsf	(??___fttol+1)& (0+255),0,b
  6604  001C48                     u5981:
  6605  001C48  0100               	movlb	0	; () banked
  6606  001C4A  5171               	movf	??___fttol& (0+255),w,b
  6607  001C4C  0100               	movlb	0	; () banked
  6608  001C4E  6F7B               	movwf	___fttol@exp1& (0+255),b
  6609  001C50  0100               	movlb	0	; () banked
  6610  001C52  517B               	movf	___fttol@exp1& (0+255),w,b
  6611  001C54  A4D8               	btfss	status,2,c
  6612  001C56  D00A               	goto	l5619
  6613                           
  6614                           ; BSR set to: 0
  6615  001C58  0E00               	movlw	0
  6616  001C5A  0100               	movlb	0	; () banked
  6617  001C5C  6F6D               	movwf	?___fttol& (0+255),b
  6618  001C5E  0E00               	movlw	0
  6619  001C60  6F6E               	movwf	(?___fttol+1)& (0+255),b
  6620  001C62  0E00               	movlw	0
  6621  001C64  6F6F               	movwf	(?___fttol+2)& (0+255),b
  6622  001C66  0E00               	movlw	0
  6623  001C68  6F70               	movwf	(?___fttol+3)& (0+255),b
  6624                           
  6625                           ; BSR set to: 0
  6626  001C6A  0012               	return	
  6627  001C6C                     l5619:
  6628                           
  6629                           ; BSR set to: 0
  6630  001C6C  0E17               	movlw	23
  6631  001C6E  0100               	movlb	0	; () banked
  6632  001C70  6F71               	movwf	??___fttol& (0+255),b
  6633  001C72  C06D  F072         	movff	___fttol@f1,??___fttol+1
  6634  001C76  C06E  F073         	movff	___fttol@f1+1,??___fttol+2
  6635  001C7A  C06F  F074         	movff	___fttol@f1+2,??___fttol+3
  6636  001C7E  0100               	movlb	0	; () banked
  6637  001C80  2971               	incf	??___fttol& (0+255),w,b
  6638  001C82  0100               	movlb	0	; () banked
  6639  001C84  6F75               	movwf	(??___fttol+4)& (0+255),b
  6640  001C86  D005               	goto	u6000
  6641  001C88                     u6005:
  6642  001C88  0100               	movlb	0	; () banked
  6643  001C8A  90D8               	bcf	status,0,c
  6644  001C8C  3374               	rrcf	(??___fttol+3)& (0+255),f,b
  6645  001C8E  3373               	rrcf	(??___fttol+2)& (0+255),f,b
  6646  001C90  3372               	rrcf	(??___fttol+1)& (0+255),f,b
  6647  001C92                     u6000:
  6648  001C92  0100               	movlb	0	; () banked
  6649  001C94  2F75               	decfsz	(??___fttol+4)& (0+255),f,b
  6650  001C96  D7F8               	goto	u6005
  6651  001C98  0100               	movlb	0	; () banked
  6652  001C9A  5172               	movf	(??___fttol+1)& (0+255),w,b
  6653  001C9C  0100               	movlb	0	; () banked
  6654  001C9E  6F76               	movwf	___fttol@sign1& (0+255),b
  6655                           
  6656                           ; BSR set to: 0
  6657  001CA0  0100               	movlb	0	; () banked
  6658  001CA2  8F6E               	bsf	(___fttol@f1+1)& (0+255),7,b
  6659                           
  6660                           ; BSR set to: 0
  6661  001CA4  0EFF               	movlw	255
  6662  001CA6  0100               	movlb	0	; () banked
  6663  001CA8  176D               	andwf	___fttol@f1& (0+255),f,b
  6664  001CAA  0EFF               	movlw	255
  6665  001CAC  0100               	movlb	0	; () banked
  6666  001CAE  176E               	andwf	(___fttol@f1+1)& (0+255),f,b
  6667  001CB0  0E00               	movlw	0
  6668  001CB2  0100               	movlb	0	; () banked
  6669  001CB4  176F               	andwf	(___fttol@f1+2)& (0+255),f,b
  6670                           
  6671                           ; BSR set to: 0
  6672  001CB6  0100               	movlb	0	; () banked
  6673  001CB8  516D               	movf	___fttol@f1& (0+255),w,b
  6674  001CBA  0100               	movlb	0	; () banked
  6675  001CBC  6F77               	movwf	___fttol@lval& (0+255),b
  6676  001CBE  0100               	movlb	0	; () banked
  6677  001CC0  516E               	movf	(___fttol@f1+1)& (0+255),w,b
  6678  001CC2  0100               	movlb	0	; () banked
  6679  001CC4  6F78               	movwf	(___fttol@lval+1)& (0+255),b
  6680  001CC6  0100               	movlb	0	; () banked
  6681  001CC8  516F               	movf	(___fttol@f1+2)& (0+255),w,b
  6682  001CCA  0100               	movlb	0	; () banked
  6683  001CCC  6F79               	movwf	(___fttol@lval+2)& (0+255),b
  6684  001CCE  0100               	movlb	0	; () banked
  6685  001CD0  6B7A               	clrf	(___fttol@lval+3)& (0+255),b
  6686                           
  6687                           ; BSR set to: 0
  6688  001CD2  0E8E               	movlw	142
  6689  001CD4  0100               	movlb	0	; () banked
  6690  001CD6  5F7B               	subwf	___fttol@exp1& (0+255),f,b
  6691                           
  6692                           ; BSR set to: 0
  6693  001CD8  0100               	movlb	0	; () banked
  6694  001CDA  AF7B               	btfss	___fttol@exp1& (0+255),7,b
  6695  001CDC  D01A               	goto	l5641
  6696                           
  6697                           ; BSR set to: 0
  6698  001CDE  0100               	movlb	0	; () banked
  6699  001CE0  517B               	movf	___fttol@exp1& (0+255),w,b
  6700  001CE2  0A80               	xorlw	128
  6701  001CE4  0F8F               	addlw	143
  6702  001CE6  B0D8               	btfsc	status,0,c
  6703  001CE8  D00A               	goto	l5637
  6704                           
  6705                           ; BSR set to: 0
  6706  001CEA  0E00               	movlw	0
  6707  001CEC  0100               	movlb	0	; () banked
  6708  001CEE  6F6D               	movwf	?___fttol& (0+255),b
  6709  001CF0  0E00               	movlw	0
  6710  001CF2  6F6E               	movwf	(?___fttol+1)& (0+255),b
  6711  001CF4  0E00               	movlw	0
  6712  001CF6  6F6F               	movwf	(?___fttol+2)& (0+255),b
  6713  001CF8  0E00               	movlw	0
  6714  001CFA  6F70               	movwf	(?___fttol+3)& (0+255),b
  6715                           
  6716                           ; BSR set to: 0
  6717  001CFC  0012               	return	
  6718  001CFE                     l5637:
  6719                           
  6720                           ; BSR set to: 0
  6721  001CFE  0100               	movlb	0	; () banked
  6722  001D00  90D8               	bcf	status,0,c
  6723  001D02  337A               	rrcf	(___fttol@lval+3)& (0+255),f,b
  6724  001D04  3379               	rrcf	(___fttol@lval+2)& (0+255),f,b
  6725  001D06  3378               	rrcf	(___fttol@lval+1)& (0+255),f,b
  6726  001D08  3377               	rrcf	___fttol@lval& (0+255),f,b
  6727                           
  6728                           ; BSR set to: 0
  6729  001D0A  0100               	movlb	0	; () banked
  6730  001D0C  3F7B               	incfsz	___fttol@exp1& (0+255),f,b
  6731  001D0E  D7F7               	goto	l5637
  6732                           
  6733                           ; BSR set to: 0
  6734  001D10  D01B               	goto	l5651
  6735  001D12                     l5641:
  6736                           
  6737                           ; BSR set to: 0
  6738  001D12  0E17               	movlw	23
  6739  001D14  0100               	movlb	0	; () banked
  6740  001D16  657B               	cpfsgt	___fttol@exp1& (0+255),b
  6741  001D18  D012               	goto	l5649
  6742                           
  6743                           ; BSR set to: 0
  6744  001D1A  0E00               	movlw	0
  6745  001D1C  0100               	movlb	0	; () banked
  6746  001D1E  6F6D               	movwf	?___fttol& (0+255),b
  6747  001D20  0E00               	movlw	0
  6748  001D22  6F6E               	movwf	(?___fttol+1)& (0+255),b
  6749  001D24  0E00               	movlw	0
  6750  001D26  6F6F               	movwf	(?___fttol+2)& (0+255),b
  6751  001D28  0E00               	movlw	0
  6752  001D2A  6F70               	movwf	(?___fttol+3)& (0+255),b
  6753                           
  6754                           ; BSR set to: 0
  6755  001D2C  0012               	return	
  6756  001D2E                     l5647:
  6757                           
  6758                           ; BSR set to: 0
  6759  001D2E  0100               	movlb	0	; () banked
  6760  001D30  90D8               	bcf	status,0,c
  6761  001D32  3777               	rlcf	___fttol@lval& (0+255),f,b
  6762  001D34  3778               	rlcf	(___fttol@lval+1)& (0+255),f,b
  6763  001D36  3779               	rlcf	(___fttol@lval+2)& (0+255),f,b
  6764  001D38  377A               	rlcf	(___fttol@lval+3)& (0+255),f,b
  6765  001D3A  0100               	movlb	0	; () banked
  6766  001D3C  077B               	decf	___fttol@exp1& (0+255),f,b
  6767  001D3E                     l5649:
  6768                           
  6769                           ; BSR set to: 0
  6770  001D3E  0100               	movlb	0	; () banked
  6771  001D40  517B               	movf	___fttol@exp1& (0+255),w,b
  6772  001D42  0100               	movlb	0	; () banked
  6773  001D44  A4D8               	btfss	status,2,c
  6774  001D46  D7F3               	goto	l5647
  6775  001D48                     l5651:
  6776                           
  6777                           ; BSR set to: 0
  6778  001D48  0100               	movlb	0	; () banked
  6779  001D4A  5176               	movf	___fttol@sign1& (0+255),w,b
  6780  001D4C  0100               	movlb	0	; () banked
  6781  001D4E  B4D8               	btfsc	status,2,c
  6782  001D50  D009               	goto	l5655
  6783                           
  6784                           ; BSR set to: 0
  6785  001D52  0100               	movlb	0	; () banked
  6786  001D54  1F7A               	comf	(___fttol@lval+3)& (0+255),f,b
  6787  001D56  1F79               	comf	(___fttol@lval+2)& (0+255),f,b
  6788  001D58  1F78               	comf	(___fttol@lval+1)& (0+255),f,b
  6789  001D5A  6D77               	negf	___fttol@lval& (0+255),b
  6790  001D5C  0E00               	movlw	0
  6791  001D5E  2378               	addwfc	(___fttol@lval+1)& (0+255),f,b
  6792  001D60  2379               	addwfc	(___fttol@lval+2)& (0+255),f,b
  6793  001D62  237A               	addwfc	(___fttol@lval+3)& (0+255),f,b
  6794  001D64                     l5655:
  6795                           
  6796                           ; BSR set to: 0
  6797  001D64  C077  F06D         	movff	___fttol@lval,?___fttol
  6798  001D68  C078  F06E         	movff	___fttol@lval+1,?___fttol+1
  6799  001D6C  C079  F06F         	movff	___fttol@lval+2,?___fttol+2
  6800  001D70  C07A  F070         	movff	___fttol@lval+3,?___fttol+3
  6801  001D74  0012               	return	
  6802  001D76                     __end_of___fttol:
  6803                           	opt stack 0
  6804                           tblptru	equ	0xFF8
  6805                           tblptrh	equ	0xFF7
  6806                           tblptrl	equ	0xFF6
  6807                           tablat	equ	0xFF5
  6808                           prodh	equ	0xFF4
  6809                           prodl	equ	0xFF3
  6810                           postinc0	equ	0xFEE
  6811                           wreg	equ	0xFE8
  6812                           indf1	equ	0xFE7
  6813                           postdec1	equ	0xFE5
  6814                           fsr1h	equ	0xFE2
  6815                           fsr1l	equ	0xFE1
  6816                           indf2	equ	0xFDF
  6817                           postinc2	equ	0xFDE
  6818                           postdec2	equ	0xFDD
  6819                           fsr2h	equ	0xFDA
  6820                           fsr2l	equ	0xFD9
  6821                           status	equ	0xFD8
  6822                           
  6823 ;; *************** function ___ftsub *****************
  6824 ;; Defined at:
  6825 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftsub.c"
  6826 ;; Parameters:    Size  Location     Type
  6827 ;;  f1              3   54[COMRAM] float 
  6828 ;;  f2              3   57[COMRAM] float 
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;		None
  6831 ;; Return value:  Size  Location     Type
  6832 ;;                  3   54[COMRAM] float 
  6833 ;; Registers used:
  6834 ;;		wreg, status,2, status,0, cstack
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6840 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6843 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6844 ;;Total ram usage:        6 bytes
  6845 ;; Hardware stack levels used:    1
  6846 ;; Hardware stack levels required when called:    4
  6847 ;; This function calls:
  6848 ;;		___ftadd
  6849 ;; This function is called by:
  6850 ;;		_sprintf
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           	psect	text15
  6855  002B88                     __ptext15:
  6856                           	opt stack 0
  6857  002B88                     ___ftsub:
  6858                           	opt stack 24
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;incstack = 0
  6862  002B88  503A               	movf	___ftsub@f2,w,c
  6863  002B8A  103B               	iorwf	___ftsub@f2+1,w,c
  6864  002B8C  103C               	iorwf	___ftsub@f2+2,w,c
  6865  002B8E  B4D8               	btfsc	status,2,c
  6866  002B90  D006               	goto	l5575
  6867  002B92  0E00               	movlw	0
  6868  002B94  1A3A               	xorwf	___ftsub@f2,f,c
  6869  002B96  0E00               	movlw	0
  6870  002B98  1A3B               	xorwf	___ftsub@f2+1,f,c
  6871  002B9A  0E80               	movlw	128
  6872  002B9C  1A3C               	xorwf	___ftsub@f2+2,f,c
  6873  002B9E                     l5575:
  6874  002B9E  C037  F02B         	movff	___ftsub@f1,___ftadd@f1
  6875  002BA2  C038  F02C         	movff	___ftsub@f1+1,___ftadd@f1+1
  6876  002BA6  C039  F02D         	movff	___ftsub@f1+2,___ftadd@f1+2
  6877  002BAA  C03A  F02E         	movff	___ftsub@f2,___ftadd@f2
  6878  002BAE  C03B  F02F         	movff	___ftsub@f2+1,___ftadd@f2+1
  6879  002BB2  C03C  F030         	movff	___ftsub@f2+2,___ftadd@f2+2
  6880  002BB6  EC99  F00C         	call	___ftadd	;wreg free
  6881  002BBA  C02B  F037         	movff	?___ftadd,?___ftsub
  6882  002BBE  C02C  F038         	movff	?___ftadd+1,?___ftsub+1
  6883  002BC2  C02D  F039         	movff	?___ftadd+2,?___ftsub+2
  6884  002BC6  0012               	return	
  6885  002BC8                     __end_of___ftsub:
  6886                           	opt stack 0
  6887                           tblptru	equ	0xFF8
  6888                           tblptrh	equ	0xFF7
  6889                           tblptrl	equ	0xFF6
  6890                           tablat	equ	0xFF5
  6891                           prodh	equ	0xFF4
  6892                           prodl	equ	0xFF3
  6893                           postinc0	equ	0xFEE
  6894                           wreg	equ	0xFE8
  6895                           indf1	equ	0xFE7
  6896                           postdec1	equ	0xFE5
  6897                           fsr1h	equ	0xFE2
  6898                           fsr1l	equ	0xFE1
  6899                           indf2	equ	0xFDF
  6900                           postinc2	equ	0xFDE
  6901                           postdec2	equ	0xFDD
  6902                           fsr2h	equ	0xFDA
  6903                           fsr2l	equ	0xFD9
  6904                           status	equ	0xFD8
  6905                           
  6906 ;; *************** function ___ftge *****************
  6907 ;; Defined at:
  6908 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
  6909 ;; Parameters:    Size  Location     Type
  6910 ;;  ff1             3   15[COMRAM] float 
  6911 ;;  ff2             3   18[COMRAM] float 
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;		None
  6914 ;; Return value:  Size  Location     Type
  6915 ;;		None               void
  6916 ;; Registers used:
  6917 ;;		wreg, status,2, status,0
  6918 ;; Tracked objects:
  6919 ;;		On entry : 0/0
  6920 ;;		On exit  : 0/0
  6921 ;;		Unchanged: 0/0
  6922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6923 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6925 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6926 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6927 ;;Total ram usage:        9 bytes
  6928 ;; Hardware stack levels used:    1
  6929 ;; Hardware stack levels required when called:    2
  6930 ;; This function calls:
  6931 ;;		Nothing
  6932 ;; This function is called by:
  6933 ;;		_output_logic
  6934 ;;		_sprintf
  6935 ;; This function uses a non-reentrant model
  6936 ;;
  6937                           
  6938                           	psect	text16
  6939  0025D2                     __ptext16:
  6940                           	opt stack 0
  6941  0025D2                     ___ftge:
  6942                           	opt stack 26
  6943                           
  6944                           ;incstack = 0
  6945  0025D2  AE12               	btfss	___ftge@ff1+2,7,c
  6946  0025D4  D016               	goto	l5595
  6947  0025D6  C010  F016         	movff	___ftge@ff1,??___ftge
  6948  0025DA  C011  F017         	movff	___ftge@ff1+1,??___ftge+1
  6949  0025DE  C012  F018         	movff	___ftge@ff1+2,??___ftge+2
  6950  0025E2  1E16               	comf	??___ftge,f,c
  6951  0025E4  1E17               	comf	??___ftge+1,f,c
  6952  0025E6  1E18               	comf	??___ftge+2,f,c
  6953  0025E8  2A16               	incf	??___ftge,f,c
  6954  0025EA  0E00               	movlw	0
  6955  0025EC  2217               	addwfc	??___ftge+1,f,c
  6956  0025EE  2218               	addwfc	??___ftge+2,f,c
  6957  0025F0  0E00               	movlw	0
  6958  0025F2  2416               	addwf	??___ftge,w,c
  6959  0025F4  6E10               	movwf	___ftge@ff1,c
  6960  0025F6  0E00               	movlw	0
  6961  0025F8  2017               	addwfc	??___ftge+1,w,c
  6962  0025FA  6E11               	movwf	___ftge@ff1+1,c
  6963  0025FC  0E80               	movlw	128
  6964  0025FE  2018               	addwfc	??___ftge+2,w,c
  6965  002600  6E12               	movwf	___ftge@ff1+2,c
  6966  002602                     l5595:
  6967  002602  AE15               	btfss	___ftge@ff2+2,7,c
  6968  002604  D016               	goto	l5599
  6969  002606  C013  F016         	movff	___ftge@ff2,??___ftge
  6970  00260A  C014  F017         	movff	___ftge@ff2+1,??___ftge+1
  6971  00260E  C015  F018         	movff	___ftge@ff2+2,??___ftge+2
  6972  002612  1E16               	comf	??___ftge,f,c
  6973  002614  1E17               	comf	??___ftge+1,f,c
  6974  002616  1E18               	comf	??___ftge+2,f,c
  6975  002618  2A16               	incf	??___ftge,f,c
  6976  00261A  0E00               	movlw	0
  6977  00261C  2217               	addwfc	??___ftge+1,f,c
  6978  00261E  2218               	addwfc	??___ftge+2,f,c
  6979  002620  0E00               	movlw	0
  6980  002622  2416               	addwf	??___ftge,w,c
  6981  002624  6E13               	movwf	___ftge@ff2,c
  6982  002626  0E00               	movlw	0
  6983  002628  2017               	addwfc	??___ftge+1,w,c
  6984  00262A  6E14               	movwf	___ftge@ff2+1,c
  6985  00262C  0E80               	movlw	128
  6986  00262E  2018               	addwfc	??___ftge+2,w,c
  6987  002630  6E15               	movwf	___ftge@ff2+2,c
  6988  002632                     l5599:
  6989  002632  0E00               	movlw	0
  6990  002634  1A10               	xorwf	___ftge@ff1,f,c
  6991  002636  0E00               	movlw	0
  6992  002638  1A11               	xorwf	___ftge@ff1+1,f,c
  6993  00263A  0E80               	movlw	128
  6994  00263C  1A12               	xorwf	___ftge@ff1+2,f,c
  6995  00263E  0E00               	movlw	0
  6996  002640  1A13               	xorwf	___ftge@ff2,f,c
  6997  002642  0E00               	movlw	0
  6998  002644  1A14               	xorwf	___ftge@ff2+1,f,c
  6999  002646  0E80               	movlw	128
  7000  002648  1A15               	xorwf	___ftge@ff2+2,f,c
  7001  00264A  5013               	movf	___ftge@ff2,w,c
  7002  00264C  5C10               	subwf	___ftge@ff1,w,c
  7003  00264E  5014               	movf	___ftge@ff2+1,w,c
  7004  002650  5811               	subwfb	___ftge@ff1+1,w,c
  7005  002652  5015               	movf	___ftge@ff2+2,w,c
  7006  002654  5812               	subwfb	___ftge@ff1+2,w,c
  7007  002656  B0D8               	btfsc	status,0,c
  7008  002658  D002               	goto	l5605
  7009  00265A  90D8               	bcf	status,0,c
  7010  00265C  0012               	return	
  7011  00265E                     l5605:
  7012  00265E  80D8               	bsf	status,0,c
  7013  002660  0012               	return	
  7014  002662                     __end_of___ftge:
  7015                           	opt stack 0
  7016                           tblptru	equ	0xFF8
  7017                           tblptrh	equ	0xFF7
  7018                           tblptrl	equ	0xFF6
  7019                           tablat	equ	0xFF5
  7020                           prodh	equ	0xFF4
  7021                           prodl	equ	0xFF3
  7022                           postinc0	equ	0xFEE
  7023                           wreg	equ	0xFE8
  7024                           indf1	equ	0xFE7
  7025                           postdec1	equ	0xFE5
  7026                           fsr1h	equ	0xFE2
  7027                           fsr1l	equ	0xFE1
  7028                           indf2	equ	0xFDF
  7029                           postinc2	equ	0xFDE
  7030                           postdec2	equ	0xFDD
  7031                           fsr2h	equ	0xFDA
  7032                           fsr2l	equ	0xFD9
  7033                           status	equ	0xFD8
  7034                           
  7035 ;; *************** function _log *****************
  7036 ;; Defined at:
  7037 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\log.c"
  7038 ;; Parameters:    Size  Location     Type
  7039 ;;  x               3   18[BANK0 ] float 
  7040 ;; Auto vars:     Size  Location     Type
  7041 ;;  exponent        2   21[BANK0 ] int 
  7042 ;; Return value:  Size  Location     Type
  7043 ;;                  3   18[BANK0 ] int 
  7044 ;; Registers used:
  7045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7051 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7052 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7054 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7055 ;;Total ram usage:        5 bytes
  7056 ;; Hardware stack levels used:    1
  7057 ;; Hardware stack levels required when called:    5
  7058 ;; This function calls:
  7059 ;;		___awtoft
  7060 ;;		___ftadd
  7061 ;;		___ftmul
  7062 ;;		_eval_poly
  7063 ;;		_frexp
  7064 ;; This function is called by:
  7065 ;;		_output_logic
  7066 ;; This function uses a non-reentrant model
  7067 ;;
  7068                           
  7069                           	psect	text17
  7070  001D76                     __ptext17:
  7071                           	opt stack 0
  7072  001D76                     _log:
  7073                           	opt stack 24
  7074                           
  7075                           ;incstack = 0
  7076  001D76  0100               	movlb	0	; () banked
  7077  001D78  AF74               	btfss	(log@x+2)& (0+255),7,b
  7078  001D7A  D00F               	goto	l6117
  7079                           
  7080                           ; BSR set to: 0
  7081  001D7C  0E00               	movlw	0
  7082  001D7E  0100               	movlb	0	; () banked
  7083  001D80  6FD4               	movwf	(_errno+1)& (0+255),b
  7084  001D82  0E21               	movlw	33
  7085  001D84  6FD3               	movwf	_errno& (0+255),b
  7086  001D86  0E00               	movlw	0
  7087  001D88  0100               	movlb	0	; () banked
  7088  001D8A  6F72               	movwf	?_log& (0+255),b
  7089  001D8C  0E00               	movlw	0
  7090  001D8E  0100               	movlb	0	; () banked
  7091  001D90  6F73               	movwf	(?_log+1)& (0+255),b
  7092  001D92  0E00               	movlw	0
  7093  001D94  0100               	movlb	0	; () banked
  7094  001D96  6F74               	movwf	(?_log+2)& (0+255),b
  7095                           
  7096                           ; BSR set to: 0
  7097  001D98  0012               	return	
  7098  001D9A                     l6117:
  7099                           
  7100                           ; BSR set to: 0
  7101  001D9A  0100               	movlb	0	; () banked
  7102  001D9C  5172               	movf	log@x& (0+255),w,b
  7103  001D9E  0100               	movlb	0	; () banked
  7104  001DA0  1173               	iorwf	(log@x+1)& (0+255),w,b
  7105  001DA2  0100               	movlb	0	; () banked
  7106  001DA4  1174               	iorwf	(log@x+2)& (0+255),w,b
  7107  001DA6  A4D8               	btfss	status,2,c
  7108  001DA8  D00F               	goto	l6123
  7109                           
  7110                           ; BSR set to: 0
  7111  001DAA  0E00               	movlw	0
  7112  001DAC  0100               	movlb	0	; () banked
  7113  001DAE  6FD4               	movwf	(_errno+1)& (0+255),b
  7114  001DB0  0E22               	movlw	34
  7115  001DB2  6FD3               	movwf	_errno& (0+255),b
  7116  001DB4  0E00               	movlw	0
  7117  001DB6  0100               	movlb	0	; () banked
  7118  001DB8  6F72               	movwf	?_log& (0+255),b
  7119  001DBA  0E00               	movlw	0
  7120  001DBC  0100               	movlb	0	; () banked
  7121  001DBE  6F73               	movwf	(?_log+1)& (0+255),b
  7122  001DC0  0E00               	movlw	0
  7123  001DC2  0100               	movlb	0	; () banked
  7124  001DC4  6F74               	movwf	(?_log+2)& (0+255),b
  7125                           
  7126                           ; BSR set to: 0
  7127  001DC6  0012               	return	
  7128  001DC8                     l6123:
  7129                           
  7130                           ; BSR set to: 0
  7131  001DC8  0E00               	movlw	0
  7132  001DCA  6E3A               	movwf	___ftmul@f2,c
  7133  001DCC  0E00               	movlw	0
  7134  001DCE  6E3B               	movwf	___ftmul@f2+1,c
  7135  001DD0  0E40               	movlw	64
  7136  001DD2  6E3C               	movwf	___ftmul@f2+2,c
  7137  001DD4  0E75               	movlw	low log@exponent
  7138  001DD6  6E13               	movwf	frexp@eptr,c
  7139  001DD8  0E00               	movlw	high log@exponent
  7140  001DDA  6E14               	movwf	frexp@eptr+1,c
  7141  001DDC  C072  F010         	movff	log@x,frexp@value
  7142  001DE0  C073  F011         	movff	log@x+1,frexp@value+1
  7143  001DE4  C074  F012         	movff	log@x+2,frexp@value+2
  7144  001DE8  EC31  F013         	call	_frexp	;wreg free
  7145  001DEC  C010  F037         	movff	?_frexp,___ftmul@f1
  7146  001DF0  C011  F038         	movff	?_frexp+1,___ftmul@f1+1
  7147  001DF4  C012  F039         	movff	?_frexp+2,___ftmul@f1+2
  7148  001DF8  EC1F  F011         	call	___ftmul	;wreg free
  7149  001DFC  C037  F02B         	movff	?___ftmul,___ftadd@f1
  7150  001E00  C038  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  7151  001E04  C039  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  7152  001E08  0E00               	movlw	0
  7153  001E0A  6E2E               	movwf	___ftadd@f2,c
  7154  001E0C  0E80               	movlw	128
  7155  001E0E  6E2F               	movwf	___ftadd@f2+1,c
  7156  001E10  0EBF               	movlw	191
  7157  001E12  6E30               	movwf	___ftadd@f2+2,c
  7158  001E14  EC99  F00C         	call	___ftadd	;wreg free
  7159  001E18  C02B  F072         	movff	?___ftadd,log@x
  7160  001E1C  C02C  F073         	movff	?___ftadd+1,log@x+1
  7161  001E20  C02D  F074         	movff	?___ftadd+2,log@x+2
  7162  001E24  0100               	movlb	0	; () banked
  7163  001E26  0775               	decf	log@exponent& (0+255),f,b
  7164  001E28  A0D8               	btfss	status,0,c
  7165  001E2A  0776               	decf	(log@exponent+1)& (0+255),f,b
  7166                           
  7167                           ; BSR set to: 0
  7168  001E2C  C072  F066         	movff	log@x,eval_poly@x
  7169  001E30  C073  F067         	movff	log@x+1,eval_poly@x+1
  7170  001E34  C074  F068         	movff	log@x+2,eval_poly@x+2
  7171  001E38  0E71               	movlw	low log@coeff
  7172  001E3A  0100               	movlb	0	; () banked
  7173  001E3C  6F69               	movwf	eval_poly@d& (0+255),b
  7174  001E3E  0EFE               	movlw	high log@coeff
  7175  001E40  0100               	movlb	0	; () banked
  7176  001E42  6F6A               	movwf	(eval_poly@d+1)& (0+255),b
  7177  001E44  0E00               	movlw	0
  7178  001E46  0100               	movlb	0	; () banked
  7179  001E48  6F6C               	movwf	(eval_poly@n+1)& (0+255),b
  7180  001E4A  0E08               	movlw	8
  7181  001E4C  6F6B               	movwf	eval_poly@n& (0+255),b
  7182  001E4E  EC22  F012         	call	_eval_poly	;wreg free
  7183  001E52  C066  F072         	movff	?_eval_poly,log@x
  7184  001E56  C067  F073         	movff	?_eval_poly+1,log@x+1
  7185  001E5A  C068  F074         	movff	?_eval_poly+2,log@x+2
  7186  001E5E  0E72               	movlw	114
  7187  001E60  6E3A               	movwf	___ftmul@f2,c
  7188  001E62  0E31               	movlw	49
  7189  001E64  6E3B               	movwf	___ftmul@f2+1,c
  7190  001E66  0E3F               	movlw	63
  7191  001E68  6E3C               	movwf	___ftmul@f2+2,c
  7192  001E6A  C075  F018         	movff	log@exponent,___awtoft@c
  7193  001E6E  C076  F019         	movff	log@exponent+1,___awtoft@c+1
  7194  001E72  EC02  F016         	call	___awtoft	;wreg free
  7195  001E76  C018  F037         	movff	?___awtoft,___ftmul@f1
  7196  001E7A  C019  F038         	movff	?___awtoft+1,___ftmul@f1+1
  7197  001E7E  C01A  F039         	movff	?___awtoft+2,___ftmul@f1+2
  7198  001E82  EC1F  F011         	call	___ftmul	;wreg free
  7199  001E86  C037  F02B         	movff	?___ftmul,___ftadd@f1
  7200  001E8A  C038  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  7201  001E8E  C039  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  7202  001E92  C072  F02E         	movff	log@x,___ftadd@f2
  7203  001E96  C073  F02F         	movff	log@x+1,___ftadd@f2+1
  7204  001E9A  C074  F030         	movff	log@x+2,___ftadd@f2+2
  7205  001E9E  EC99  F00C         	call	___ftadd	;wreg free
  7206  001EA2  C02B  F072         	movff	?___ftadd,?_log
  7207  001EA6  C02C  F073         	movff	?___ftadd+1,?_log+1
  7208  001EAA  C02D  F074         	movff	?___ftadd+2,?_log+2
  7209  001EAE  0012               	return	
  7210  001EB0                     __end_of_log:
  7211                           	opt stack 0
  7212                           tblptru	equ	0xFF8
  7213                           tblptrh	equ	0xFF7
  7214                           tblptrl	equ	0xFF6
  7215                           tablat	equ	0xFF5
  7216                           prodh	equ	0xFF4
  7217                           prodl	equ	0xFF3
  7218                           postinc0	equ	0xFEE
  7219                           wreg	equ	0xFE8
  7220                           indf1	equ	0xFE7
  7221                           postdec1	equ	0xFE5
  7222                           fsr1h	equ	0xFE2
  7223                           fsr1l	equ	0xFE1
  7224                           indf2	equ	0xFDF
  7225                           postinc2	equ	0xFDE
  7226                           postdec2	equ	0xFDD
  7227                           fsr2h	equ	0xFDA
  7228                           fsr2l	equ	0xFD9
  7229                           status	equ	0xFD8
  7230                           
  7231 ;; *************** function _frexp *****************
  7232 ;; Defined at:
  7233 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\frexp.c"
  7234 ;; Parameters:    Size  Location     Type
  7235 ;;  value           3   15[COMRAM] int 
  7236 ;;  eptr            2   18[COMRAM] PTR int 
  7237 ;;		 -> log@exponent(2), 
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;		None
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  3   15[COMRAM] PTR int 
  7242 ;; Registers used:
  7243 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7249 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7251 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7252 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7253 ;;Total ram usage:        7 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:    2
  7256 ;; This function calls:
  7257 ;;		Nothing
  7258 ;; This function is called by:
  7259 ;;		_log
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           	psect	text18
  7264  002662                     __ptext18:
  7265                           	opt stack 0
  7266  002662                     _frexp:
  7267                           	opt stack 26
  7268                           
  7269                           ;incstack = 0
  7270  002662  5010               	movf	frexp@value,w,c
  7271  002664  1011               	iorwf	frexp@value+1,w,c
  7272  002666  1012               	iorwf	frexp@value+2,w,c
  7273  002668  A4D8               	btfss	status,2,c
  7274  00266A  D00F               	goto	l5719
  7275  00266C  C013  FFD9         	movff	frexp@eptr,fsr2l
  7276  002670  C014  FFDA         	movff	frexp@eptr+1,fsr2h
  7277  002674  0E00               	movlw	0
  7278  002676  6EDE               	movwf	postinc2,c
  7279  002678  0E00               	movlw	0
  7280  00267A  6EDD               	movwf	postdec2,c
  7281  00267C  0E00               	movlw	0
  7282  00267E  6E10               	movwf	?_frexp,c
  7283  002680  0E00               	movlw	0
  7284  002682  6E11               	movwf	?_frexp+1,c
  7285  002684  0E00               	movlw	0
  7286  002686  6E12               	movwf	?_frexp+2,c
  7287  002688  0012               	return	
  7288  00268A                     l5719:
  7289  00268A  5012               	movf	frexp@value+2,w,c
  7290  00268C  0B7F               	andlw	127
  7291  00268E  6E15               	movwf	??_frexp& (0+255),c
  7292  002690  6A16               	clrf	(??_frexp+1)& (0+255),c
  7293  002692  90D8               	bcf	status,0,c
  7294  002694  3615               	rlcf	??_frexp,f,c
  7295  002696  3616               	rlcf	??_frexp+1,f,c
  7296  002698  C013  FFD9         	movff	frexp@eptr,fsr2l
  7297  00269C  C014  FFDA         	movff	frexp@eptr+1,fsr2h
  7298  0026A0  C015  FFDE         	movff	??_frexp,postinc2
  7299  0026A4  C016  FFDD         	movff	??_frexp+1,postdec2
  7300  0026A8  AE11               	btfss	frexp@value+1,7,c
  7301  0026AA  D003               	goto	u6140
  7302  0026AC  6A15               	clrf	??_frexp& (0+255),c
  7303  0026AE  2A15               	incf	??_frexp& (0+255),f,c
  7304  0026B0  D001               	goto	u6148
  7305  0026B2                     u6140:
  7306  0026B2  6A15               	clrf	??_frexp& (0+255),c
  7307  0026B4                     u6148:
  7308  0026B4  5015               	movf	??_frexp,w,c
  7309  0026B6  C013  FFD9         	movff	frexp@eptr,fsr2l
  7310  0026BA  C014  FFDA         	movff	frexp@eptr+1,fsr2h
  7311  0026BE  12DE               	iorwf	postinc2,f,c
  7312  0026C0  0E00               	movlw	0
  7313  0026C2  12DD               	iorwf	postdec2,f,c
  7314  0026C4  C013  FFD9         	movff	frexp@eptr,fsr2l
  7315  0026C8  C014  FFDA         	movff	frexp@eptr+1,fsr2h
  7316  0026CC  0E82               	movlw	130
  7317  0026CE  26DE               	addwf	postinc2,f,c
  7318  0026D0  0EFF               	movlw	255
  7319  0026D2  22DD               	addwfc	postdec2,f,c
  7320  0026D4  8012               	bsf	frexp@value+2,0,c
  7321  0026D6  8212               	bsf	frexp@value+2,1,c
  7322  0026D8  8412               	bsf	frexp@value+2,2,c
  7323  0026DA  8612               	bsf	frexp@value+2,3,c
  7324  0026DC  8812               	bsf	frexp@value+2,4,c
  7325  0026DE  8A12               	bsf	frexp@value+2,5,c
  7326  0026E0  9C12               	bcf	frexp@value+2,6,c
  7327  0026E2  9E11               	bcf	frexp@value+1,7,c
  7328  0026E4  C010  F010         	movff	frexp@value,?_frexp
  7329  0026E8  C011  F011         	movff	frexp@value+1,?_frexp+1
  7330  0026EC  C012  F012         	movff	frexp@value+2,?_frexp+2
  7331  0026F0  0012               	return	
  7332  0026F2                     __end_of_frexp:
  7333                           	opt stack 0
  7334                           tblptru	equ	0xFF8
  7335                           tblptrh	equ	0xFF7
  7336                           tblptrl	equ	0xFF6
  7337                           tablat	equ	0xFF5
  7338                           prodh	equ	0xFF4
  7339                           prodl	equ	0xFF3
  7340                           postinc0	equ	0xFEE
  7341                           wreg	equ	0xFE8
  7342                           indf1	equ	0xFE7
  7343                           postdec1	equ	0xFE5
  7344                           fsr1h	equ	0xFE2
  7345                           fsr1l	equ	0xFE1
  7346                           indf2	equ	0xFDF
  7347                           postinc2	equ	0xFDE
  7348                           postdec2	equ	0xFDD
  7349                           fsr2h	equ	0xFDA
  7350                           fsr2l	equ	0xFD9
  7351                           status	equ	0xFD8
  7352                           
  7353 ;; *************** function _eval_poly *****************
  7354 ;; Defined at:
  7355 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\evalpoly.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;  x               3    6[BANK0 ] PTR int 
  7358 ;;  d               2    9[BANK0 ] PTR const 
  7359 ;;		 -> log@coeff(27), 
  7360 ;;  n               2   11[BANK0 ] int 
  7361 ;; Auto vars:     Size  Location     Type
  7362 ;;  res             3   15[BANK0 ] int 
  7363 ;; Return value:  Size  Location     Type
  7364 ;;                  3    6[BANK0 ] int 
  7365 ;; Registers used:
  7366 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7367 ;; Tracked objects:
  7368 ;;		On entry : 0/0
  7369 ;;		On exit  : 0/0
  7370 ;;		Unchanged: 0/0
  7371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7372 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7374 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7375 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7376 ;;Total ram usage:       12 bytes
  7377 ;; Hardware stack levels used:    1
  7378 ;; Hardware stack levels required when called:    4
  7379 ;; This function calls:
  7380 ;;		___ftadd
  7381 ;;		___ftmul
  7382 ;;		___wmul
  7383 ;; This function is called by:
  7384 ;;		_log
  7385 ;; This function uses a non-reentrant model
  7386 ;;
  7387                           
  7388                           	psect	text19
  7389  002444                     __ptext19:
  7390                           	opt stack 0
  7391  002444                     _eval_poly:
  7392                           	opt stack 24
  7393                           
  7394                           ;incstack = 0
  7395  002444  C06B  F01E         	movff	eval_poly@n,___wmul@multiplier
  7396  002448  C06C  F01F         	movff	eval_poly@n+1,___wmul@multiplier+1
  7397  00244C  0E00               	movlw	0
  7398  00244E  6E21               	movwf	___wmul@multiplicand+1,c
  7399  002450  0E03               	movlw	3
  7400  002452  6E20               	movwf	___wmul@multiplicand,c
  7401  002454  EC5E  F016         	call	___wmul	;wreg free
  7402  002458  C069  F06D         	movff	eval_poly@d,??_eval_poly
  7403  00245C  C06A  F06E         	movff	eval_poly@d+1,??_eval_poly+1
  7404  002460  501E               	movf	?___wmul,w,c
  7405  002462  0100               	movlb	0	; () banked
  7406  002464  276D               	addwf	??_eval_poly& (0+255),f,b
  7407  002466  501F               	movf	?___wmul+1,w,c
  7408  002468  0100               	movlb	0	; () banked
  7409  00246A  236E               	addwfc	(??_eval_poly+1)& (0+255),f,b
  7410  00246C  C06D  FFF6         	movff	??_eval_poly,tblptrl
  7411  002470  C06E  FFF7         	movff	??_eval_poly+1,tblptrh
  7412  002474                     	if	0	;tblptru may be non-zero
  7413  002474                     	endif
  7414  002474                     	if	0	;tblptru may be non-zero
  7415  002474                     	endif
  7416  002474  0009               	tblrd		*+
  7417  002476  CFF5 F06F          	movff	tablat,eval_poly@res
  7418  00247A  0009               	tblrd		*+
  7419  00247C  CFF5 F070          	movff	tablat,eval_poly@res+1
  7420  002480  000A               	tblrd		*-
  7421  002482  CFF5 F071          	movff	tablat,eval_poly@res+2
  7422  002486  D041               	goto	l5735
  7423  002488                     l5733:
  7424                           
  7425                           ; BSR set to: 0
  7426  002488  C06F  F03A         	movff	eval_poly@res,___ftmul@f2
  7427  00248C  C070  F03B         	movff	eval_poly@res+1,___ftmul@f2+1
  7428  002490  C071  F03C         	movff	eval_poly@res+2,___ftmul@f2+2
  7429  002494  C066  F037         	movff	eval_poly@x,___ftmul@f1
  7430  002498  C067  F038         	movff	eval_poly@x+1,___ftmul@f1+1
  7431  00249C  C068  F039         	movff	eval_poly@x+2,___ftmul@f1+2
  7432  0024A0  EC1F  F011         	call	___ftmul	;wreg free
  7433  0024A4  C037  F02B         	movff	?___ftmul,___ftadd@f1
  7434  0024A8  C038  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  7435  0024AC  C039  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  7436  0024B0  0E00               	movlw	0
  7437  0024B2  6E21               	movwf	___wmul@multiplicand+1,c
  7438  0024B4  0E03               	movlw	3
  7439  0024B6  6E20               	movwf	___wmul@multiplicand,c
  7440  0024B8  0100               	movlb	0	; () banked
  7441  0024BA  076B               	decf	eval_poly@n& (0+255),f,b
  7442  0024BC  A0D8               	btfss	status,0,c
  7443  0024BE  076C               	decf	(eval_poly@n+1)& (0+255),f,b
  7444  0024C0  C06B  F01E         	movff	eval_poly@n,___wmul@multiplier
  7445  0024C4  C06C  F01F         	movff	eval_poly@n+1,___wmul@multiplier+1
  7446  0024C8  EC5E  F016         	call	___wmul	;wreg free
  7447  0024CC  C069  F06D         	movff	eval_poly@d,??_eval_poly
  7448  0024D0  C06A  F06E         	movff	eval_poly@d+1,??_eval_poly+1
  7449  0024D4  501E               	movf	?___wmul,w,c
  7450  0024D6  0100               	movlb	0	; () banked
  7451  0024D8  276D               	addwf	??_eval_poly& (0+255),f,b
  7452  0024DA  501F               	movf	?___wmul+1,w,c
  7453  0024DC  0100               	movlb	0	; () banked
  7454  0024DE  236E               	addwfc	(??_eval_poly+1)& (0+255),f,b
  7455  0024E0  C06D  FFF6         	movff	??_eval_poly,tblptrl
  7456  0024E4  C06E  FFF7         	movff	??_eval_poly+1,tblptrh
  7457  0024E8                     	if	0	;tblptru may be non-zero
  7458  0024E8                     	endif
  7459  0024E8                     	if	0	;tblptru may be non-zero
  7460  0024E8                     	endif
  7461  0024E8  0009               	tblrd		*+
  7462  0024EA  CFF5 F02E          	movff	tablat,___ftadd@f2
  7463  0024EE  0009               	tblrd		*+
  7464  0024F0  CFF5 F02F          	movff	tablat,___ftadd@f2+1
  7465  0024F4  000A               	tblrd		*-
  7466  0024F6  CFF5 F030          	movff	tablat,___ftadd@f2+2
  7467  0024FA  EC99  F00C         	call	___ftadd	;wreg free
  7468  0024FE  C02B  F06F         	movff	?___ftadd,eval_poly@res
  7469  002502  C02C  F070         	movff	?___ftadd+1,eval_poly@res+1
  7470  002506  C02D  F071         	movff	?___ftadd+2,eval_poly@res+2
  7471  00250A                     l5735:
  7472  00250A  0100               	movlb	0	; () banked
  7473  00250C  516B               	movf	eval_poly@n& (0+255),w,b
  7474  00250E  0100               	movlb	0	; () banked
  7475  002510  116C               	iorwf	(eval_poly@n+1)& (0+255),w,b
  7476  002512  A4D8               	btfss	status,2,c
  7477  002514  D7B9               	goto	l5733
  7478                           
  7479                           ; BSR set to: 0
  7480  002516  C06F  F066         	movff	eval_poly@res,?_eval_poly
  7481  00251A  C070  F067         	movff	eval_poly@res+1,?_eval_poly+1
  7482  00251E  C071  F068         	movff	eval_poly@res+2,?_eval_poly+2
  7483                           
  7484                           ; BSR set to: 0
  7485  002522  0012               	return		;funcret
  7486  002524                     __end_of_eval_poly:
  7487                           	opt stack 0
  7488                           tblptru	equ	0xFF8
  7489                           tblptrh	equ	0xFF7
  7490                           tblptrl	equ	0xFF6
  7491                           tablat	equ	0xFF5
  7492                           prodh	equ	0xFF4
  7493                           prodl	equ	0xFF3
  7494                           postinc0	equ	0xFEE
  7495                           wreg	equ	0xFE8
  7496                           indf1	equ	0xFE7
  7497                           postdec1	equ	0xFE5
  7498                           fsr1h	equ	0xFE2
  7499                           fsr1l	equ	0xFE1
  7500                           indf2	equ	0xFDF
  7501                           postinc2	equ	0xFDE
  7502                           postdec2	equ	0xFDD
  7503                           fsr2h	equ	0xFDA
  7504                           fsr2l	equ	0xFD9
  7505                           status	equ	0xFD8
  7506                           
  7507 ;; *************** function ___wmul *****************
  7508 ;; Defined at:
  7509 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;  multiplier      2   29[COMRAM] unsigned int 
  7512 ;;  multiplicand    2   31[COMRAM] unsigned int 
  7513 ;; Auto vars:     Size  Location     Type
  7514 ;;  product         2   33[COMRAM] unsigned int 
  7515 ;; Return value:  Size  Location     Type
  7516 ;;                  2   29[COMRAM] unsigned int 
  7517 ;; Registers used:
  7518 ;;		wreg, status,2, status,0, prodl, prodh
  7519 ;; Tracked objects:
  7520 ;;		On entry : 0/0
  7521 ;;		On exit  : 0/0
  7522 ;;		Unchanged: 0/0
  7523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7524 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7527 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7528 ;;Total ram usage:        6 bytes
  7529 ;; Hardware stack levels used:    1
  7530 ;; Hardware stack levels required when called:    2
  7531 ;; This function calls:
  7532 ;;		Nothing
  7533 ;; This function is called by:
  7534 ;;		_fround
  7535 ;;		_scale
  7536 ;;		_sprintf
  7537 ;;		_eval_poly
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           	psect	text20
  7542  002CBC                     __ptext20:
  7543                           	opt stack 0
  7544  002CBC                     ___wmul:
  7545                           	opt stack 25
  7546                           
  7547                           ; BSR set to: 0
  7548                           ;incstack = 0
  7549  002CBC  501E               	movf	___wmul@multiplier,w,c
  7550  002CBE  0220               	mulwf	___wmul@multiplicand,c
  7551  002CC0  CFF3 F022          	movff	prodl,___wmul@product
  7552  002CC4  CFF4 F023          	movff	prodh,___wmul@product+1
  7553  002CC8  501E               	movf	___wmul@multiplier,w,c
  7554  002CCA  0221               	mulwf	___wmul@multiplicand+1,c
  7555  002CCC  50F3               	movf	prodl,w,c
  7556  002CCE  2623               	addwf	___wmul@product+1,f,c
  7557  002CD0  501F               	movf	___wmul@multiplier+1,w,c
  7558  002CD2  0220               	mulwf	___wmul@multiplicand,c
  7559  002CD4  50F3               	movf	prodl,w,c
  7560  002CD6  2623               	addwf	___wmul@product+1,f,c
  7561  002CD8  C022  F01E         	movff	___wmul@product,?___wmul
  7562  002CDC  C023  F01F         	movff	___wmul@product+1,?___wmul+1
  7563  002CE0  0012               	return	
  7564  002CE2                     __end_of___wmul:
  7565                           	opt stack 0
  7566                           tblptru	equ	0xFF8
  7567                           tblptrh	equ	0xFF7
  7568                           tblptrl	equ	0xFF6
  7569                           tablat	equ	0xFF5
  7570                           prodh	equ	0xFF4
  7571                           prodl	equ	0xFF3
  7572                           postinc0	equ	0xFEE
  7573                           wreg	equ	0xFE8
  7574                           indf1	equ	0xFE7
  7575                           postdec1	equ	0xFE5
  7576                           fsr1h	equ	0xFE2
  7577                           fsr1l	equ	0xFE1
  7578                           indf2	equ	0xFDF
  7579                           postinc2	equ	0xFDE
  7580                           postdec2	equ	0xFDD
  7581                           fsr2h	equ	0xFDA
  7582                           fsr2l	equ	0xFD9
  7583                           status	equ	0xFD8
  7584                           
  7585 ;; *************** function ___awtoft *****************
  7586 ;; Defined at:
  7587 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awtoft.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;  c               2   23[COMRAM] int 
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;  sign            1   26[COMRAM] unsigned char 
  7592 ;; Return value:  Size  Location     Type
  7593 ;;                  3   23[COMRAM] float 
  7594 ;; Registers used:
  7595 ;;		wreg, status,2, status,0, cstack
  7596 ;; Tracked objects:
  7597 ;;		On entry : 0/0
  7598 ;;		On exit  : 0/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7601 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7602 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7604 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7605 ;;Total ram usage:        4 bytes
  7606 ;; Hardware stack levels used:    1
  7607 ;; Hardware stack levels required when called:    3
  7608 ;; This function calls:
  7609 ;;		___ftpack
  7610 ;; This function is called by:
  7611 ;;		_log
  7612 ;; This function uses a non-reentrant model
  7613 ;;
  7614                           
  7615                           	psect	text21
  7616  002C04                     __ptext21:
  7617                           	opt stack 0
  7618  002C04                     ___awtoft:
  7619                           	opt stack 25
  7620                           
  7621                           ;incstack = 0
  7622  002C04  0E00               	movlw	0
  7623  002C06  6E1B               	movwf	___awtoft@sign,c
  7624  002C08  AE19               	btfss	___awtoft@c+1,7,c
  7625  002C0A  D006               	goto	l5587
  7626  002C0C  6C18               	negf	___awtoft@c,c
  7627  002C0E  1E19               	comf	___awtoft@c+1,f,c
  7628  002C10  B0D8               	btfsc	status,0,c
  7629  002C12  2A19               	incf	___awtoft@c+1,f,c
  7630  002C14  0E01               	movlw	1
  7631  002C16  6E1B               	movwf	___awtoft@sign,c
  7632  002C18                     l5587:
  7633  002C18  C018  F010         	movff	___awtoft@c,___ftpack@arg
  7634  002C1C  C019  F011         	movff	___awtoft@c+1,___ftpack@arg+1
  7635  002C20  6A12               	clrf	___ftpack@arg+2,c
  7636  002C22  0E8E               	movlw	142
  7637  002C24  6E13               	movwf	___ftpack@exp,c
  7638  002C26  C01B  F014         	movff	___awtoft@sign,___ftpack@sign
  7639  002C2A  EC92  F012         	call	___ftpack	;wreg free
  7640  002C2E  C010  F018         	movff	?___ftpack,?___awtoft
  7641  002C32  C011  F019         	movff	?___ftpack+1,?___awtoft+1
  7642  002C36  C012  F01A         	movff	?___ftpack+2,?___awtoft+2
  7643  002C3A  0012               	return	
  7644  002C3C                     __end_of___awtoft:
  7645                           	opt stack 0
  7646                           tblptru	equ	0xFF8
  7647                           tblptrh	equ	0xFF7
  7648                           tblptrl	equ	0xFF6
  7649                           tablat	equ	0xFF5
  7650                           prodh	equ	0xFF4
  7651                           prodl	equ	0xFF3
  7652                           postinc0	equ	0xFEE
  7653                           wreg	equ	0xFE8
  7654                           indf1	equ	0xFE7
  7655                           postdec1	equ	0xFE5
  7656                           fsr1h	equ	0xFE2
  7657                           fsr1l	equ	0xFE1
  7658                           indf2	equ	0xFDF
  7659                           postinc2	equ	0xFDE
  7660                           postdec2	equ	0xFDD
  7661                           fsr2h	equ	0xFDA
  7662                           fsr2l	equ	0xFD9
  7663                           status	equ	0xFD8
  7664                           
  7665 ;; *************** function _StopADC *****************
  7666 ;; Defined at:
  7667 ;;		line 31 in file "../ADC.c"
  7668 ;; Parameters:    Size  Location     Type
  7669 ;;		None
  7670 ;; Auto vars:     Size  Location     Type
  7671 ;;		None
  7672 ;; Return value:  Size  Location     Type
  7673 ;;		None               void
  7674 ;; Registers used:
  7675 ;;		None
  7676 ;; Tracked objects:
  7677 ;;		On entry : 0/0
  7678 ;;		On exit  : 0/0
  7679 ;;		Unchanged: 0/0
  7680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7685 ;;Total ram usage:        0 bytes
  7686 ;; Hardware stack levels used:    1
  7687 ;; Hardware stack levels required when called:    2
  7688 ;; This function calls:
  7689 ;;		Nothing
  7690 ;; This function is called by:
  7691 ;;		_output_logic
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           	psect	text22
  7696  002EC8                     __ptext22:
  7697                           	opt stack 0
  7698  002EC8                     _StopADC:
  7699                           	opt stack 27
  7700                           
  7701                           ;ADC.c: 33: ADON = 0;
  7702                           
  7703                           ;incstack = 0
  7704  002EC8  90C2               	bcf	4034,0,c	;volatile
  7705  002ECA  0012               	return		;funcret
  7706  002ECC                     __end_of_StopADC:
  7707                           	opt stack 0
  7708                           tblptru	equ	0xFF8
  7709                           tblptrh	equ	0xFF7
  7710                           tblptrl	equ	0xFF6
  7711                           tablat	equ	0xFF5
  7712                           prodh	equ	0xFF4
  7713                           prodl	equ	0xFF3
  7714                           postinc0	equ	0xFEE
  7715                           wreg	equ	0xFE8
  7716                           indf1	equ	0xFE7
  7717                           postdec1	equ	0xFE5
  7718                           fsr1h	equ	0xFE2
  7719                           fsr1l	equ	0xFE1
  7720                           indf2	equ	0xFDF
  7721                           postinc2	equ	0xFDE
  7722                           postdec2	equ	0xFDD
  7723                           fsr2h	equ	0xFDA
  7724                           fsr2l	equ	0xFD9
  7725                           status	equ	0xFD8
  7726                           
  7727 ;; *************** function _SelectChannelADC *****************
  7728 ;; Defined at:
  7729 ;;		line 27 in file "../ADC.c"
  7730 ;; Parameters:    Size  Location     Type
  7731 ;;  channel         2   15[COMRAM] int 
  7732 ;; Auto vars:     Size  Location     Type
  7733 ;;		None
  7734 ;; Return value:  Size  Location     Type
  7735 ;;		None               void
  7736 ;; Registers used:
  7737 ;;		wreg, status,2, status,0
  7738 ;; Tracked objects:
  7739 ;;		On entry : 0/0
  7740 ;;		On exit  : 0/0
  7741 ;;		Unchanged: 0/0
  7742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7743 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7745 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7746 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7747 ;;Total ram usage:        3 bytes
  7748 ;; Hardware stack levels used:    1
  7749 ;; Hardware stack levels required when called:    2
  7750 ;; This function calls:
  7751 ;;		Nothing
  7752 ;; This function is called by:
  7753 ;;		_output_logic
  7754 ;; This function uses a non-reentrant model
  7755 ;;
  7756                           
  7757                           	psect	text23
  7758  002E5C                     __ptext23:
  7759                           	opt stack 0
  7760  002E5C                     _SelectChannelADC:
  7761                           	opt stack 27
  7762                           
  7763                           ;ADC.c: 28: ADCON0bits.CHS = channel;
  7764                           
  7765                           ;incstack = 0
  7766  002E5C  C010  F012         	movff	SelectChannelADC@channel,??_SelectChannelADC
  7767  002E60  4612               	rlncf	??_SelectChannelADC,f,c
  7768  002E62  4612               	rlncf	??_SelectChannelADC,f,c
  7769  002E64  50C2               	movf	4034,w,c	;volatile
  7770  002E66  1812               	xorwf	??_SelectChannelADC,w,c
  7771  002E68  0BC3               	andlw	-61
  7772  002E6A  1812               	xorwf	??_SelectChannelADC,w,c
  7773  002E6C  6EC2               	movwf	4034,c	;volatile
  7774  002E6E  0012               	return		;funcret
  7775  002E70                     __end_of_SelectChannelADC:
  7776                           	opt stack 0
  7777                           tblptru	equ	0xFF8
  7778                           tblptrh	equ	0xFF7
  7779                           tblptrl	equ	0xFF6
  7780                           tablat	equ	0xFF5
  7781                           prodh	equ	0xFF4
  7782                           prodl	equ	0xFF3
  7783                           postinc0	equ	0xFEE
  7784                           wreg	equ	0xFE8
  7785                           indf1	equ	0xFE7
  7786                           postdec1	equ	0xFE5
  7787                           fsr1h	equ	0xFE2
  7788                           fsr1l	equ	0xFE1
  7789                           indf2	equ	0xFDF
  7790                           postinc2	equ	0xFDE
  7791                           postdec2	equ	0xFDD
  7792                           fsr2h	equ	0xFDA
  7793                           fsr2l	equ	0xFD9
  7794                           status	equ	0xFD8
  7795                           
  7796 ;; *************** function _ReadByte_I2C *****************
  7797 ;; Defined at:
  7798 ;;		line 129 in file "../I2C1.c"
  7799 ;; Parameters:    Size  Location     Type
  7800 ;;  ReadAddressI    1    wreg     unsigned char 
  7801 ;;  RegisterAddr    1    9[BANK0 ] unsigned char 
  7802 ;; Auto vars:     Size  Location     Type
  7803 ;;  ReadAddressI    1   20[BANK0 ] unsigned char 
  7804 ;;  Temperature     3   17[BANK0 ] float 
  7805 ;;  tmp             2   12[BANK0 ] unsigned int 
  7806 ;;  UpperByte       1   22[BANK0 ] unsigned char 
  7807 ;;  LowerByte       1   21[BANK0 ] unsigned char 
  7808 ;; Return value:  Size  Location     Type
  7809 ;;                  3    9[BANK0 ] float 
  7810 ;; Registers used:
  7811 ;;		wreg, status,2, status,0, cstack
  7812 ;; Tracked objects:
  7813 ;;		On entry : 0/0
  7814 ;;		On exit  : 0/0
  7815 ;;		Unchanged: 0/0
  7816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7817 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7818 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7819 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7820 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7821 ;;Total ram usage:       15 bytes
  7822 ;; Hardware stack levels used:    1
  7823 ;; Hardware stack levels required when called:    4
  7824 ;; This function calls:
  7825 ;;		_IdleI2C
  7826 ;;		_ReadI2C
  7827 ;;		_ResetVariables_I2C
  7828 ;;		_WaitFlag
  7829 ;;		_WaitForACK
  7830 ;;		_WriteI2C
  7831 ;;		___ftadd
  7832 ;;		___ftdiv
  7833 ;;		___ftmul
  7834 ;;		___ftneg
  7835 ;;		___lbtoft
  7836 ;; This function is called by:
  7837 ;;		_output_logic
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           	psect	text24
  7842  00171A                     __ptext24:
  7843                           	opt stack 0
  7844  00171A                     _ReadByte_I2C:
  7845                           	opt stack 25
  7846                           
  7847                           ;incstack = 0
  7848                           ;ReadByte_I2C@ReadAddressIC stored from wreg
  7849  00171A  0100               	movlb	0	; () banked
  7850  00171C  6F74               	movwf	ReadByte_I2C@ReadAddressIC& (0+255),b
  7851                           
  7852                           ;I2C1.c: 131: unsigned char UpperByte = 0;
  7853  00171E  0E00               	movlw	0
  7854  001720  0100               	movlb	0	; () banked
  7855  001722  6F76               	movwf	ReadByte_I2C@UpperByte& (0+255),b
  7856                           
  7857                           ;I2C1.c: 132: unsigned char LowerByte = 0;
  7858  001724  0E00               	movlw	0
  7859  001726  0100               	movlb	0	; () banked
  7860  001728  6F75               	movwf	ReadByte_I2C@LowerByte& (0+255),b
  7861                           
  7862                           ;I2C1.c: 133: unsigned int tmp = 0;
  7863  00172A  0E00               	movlw	0
  7864  00172C  0100               	movlb	0	; () banked
  7865  00172E  6F6D               	movwf	(ReadByte_I2C@tmp+1)& (0+255),b
  7866  001730  0E00               	movlw	0
  7867  001732  6F6C               	movwf	ReadByte_I2C@tmp& (0+255),b
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;I2C1.c: 134: float Temperature = 0;
  7871  001734  0E00               	movlw	0
  7872  001736  0100               	movlb	0	; () banked
  7873  001738  6F71               	movwf	ReadByte_I2C@Temperature& (0+255),b
  7874  00173A  0E00               	movlw	0
  7875  00173C  0100               	movlb	0	; () banked
  7876  00173E  6F72               	movwf	(ReadByte_I2C@Temperature+1)& (0+255),b
  7877  001740  0E00               	movlw	0
  7878  001742  0100               	movlb	0	; () banked
  7879  001744  6F73               	movwf	(ReadByte_I2C@Temperature+2)& (0+255),b
  7880                           
  7881                           ; BSR set to: 0
  7882                           ;I2C1.c: 135: ResetVariables_I2C();
  7883  001746  EC54  F017         	call	_ResetVariables_I2C	;wreg free
  7884                           
  7885                           ;I2C1.c: 136: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  7886  00174A  80C5               	bsf	4037,0,c	;volatile
  7887  00174C                     l67:
  7888  00174C  B0C5               	btfsc	4037,0,c	;volatile
  7889  00174E  D7FE               	goto	l67
  7890                           
  7891                           ;I2C1.c: 138: WaitFlag();
  7892  001750  EC5A  F017         	call	_WaitFlag	;wreg free
  7893                           
  7894                           ;I2C1.c: 141: WriteI2C(ReadAddressIC);
  7895  001754  0100               	movlb	0	; () banked
  7896  001756  5174               	movf	ReadByte_I2C@ReadAddressIC& (0+255),w,b
  7897  001758  EC9E  F015         	call	_WriteI2C
  7898                           
  7899                           ;I2C1.c: 142: WaitFlag();
  7900  00175C  EC5A  F017         	call	_WaitFlag	;wreg free
  7901                           
  7902                           ;I2C1.c: 144: WaitForACK();
  7903  001760  EC5E  F017         	call	_WaitForACK	;wreg free
  7904                           
  7905                           ;I2C1.c: 146: WriteI2C(RegisterAddress);
  7906  001764  0100               	movlb	0	; () banked
  7907  001766  5169               	movf	ReadByte_I2C@RegisterAddress& (0+255),w,b
  7908  001768  EC9E  F015         	call	_WriteI2C
  7909                           
  7910                           ;I2C1.c: 147: WaitFlag();
  7911  00176C  EC5A  F017         	call	_WaitFlag	;wreg free
  7912                           
  7913                           ;I2C1.c: 148: WaitForACK();
  7914  001770  EC5E  F017         	call	_WaitForACK	;wreg free
  7915                           
  7916                           ;I2C1.c: 149: _delay((unsigned long)((45)*(16000000/4000.0)));
  7917  001774  0EEA               	movlw	234
  7918  001776  6E40               	movwf	??_ReadByte_I2C& (0+255),c
  7919  001778  0EC3               	movlw	195
  7920  00177A                     u6887:
  7921  00177A  2EE8               	decfsz	wreg,f,c
  7922  00177C  D7FE               	goto	u6887
  7923  00177E  2E40               	decfsz	??_ReadByte_I2C& (0+255),f,c
  7924  001780  D7FC               	goto	u6887
  7925  001782  F000               	nop	
  7926                           
  7927                           ;I2C1.c: 150: _delay((unsigned long)((45)*(16000000/4000.0)));
  7928  001784  0EEA               	movlw	234
  7929  001786  6E40               	movwf	??_ReadByte_I2C& (0+255),c
  7930  001788  0EC3               	movlw	195
  7931  00178A                     u6897:
  7932  00178A  2EE8               	decfsz	wreg,f,c
  7933  00178C  D7FE               	goto	u6897
  7934  00178E  2E40               	decfsz	??_ReadByte_I2C& (0+255),f,c
  7935  001790  D7FC               	goto	u6897
  7936  001792  F000               	nop	
  7937                           
  7938                           ;I2C1.c: 151: ResetVariables_I2C();
  7939  001794  EC54  F017         	call	_ResetVariables_I2C	;wreg free
  7940                           
  7941                           ;I2C1.c: 152: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  7942  001798  82C5               	bsf	4037,1,c	;volatile
  7943  00179A                     l70:
  7944  00179A  B2C5               	btfsc	4037,1,c	;volatile
  7945  00179C  D7FE               	goto	l70
  7946                           
  7947                           ;I2C1.c: 153: WaitFlag();
  7948  00179E  EC5A  F017         	call	_WaitFlag	;wreg free
  7949                           
  7950                           ;I2C1.c: 155: WriteI2C(ReadAddressIC + 1);
  7951  0017A2  0100               	movlb	0	; () banked
  7952  0017A4  2974               	incf	ReadByte_I2C@ReadAddressIC& (0+255),w,b
  7953  0017A6  EC9E  F015         	call	_WriteI2C
  7954                           
  7955                           ;I2C1.c: 156: WaitFlag();
  7956  0017AA  EC5A  F017         	call	_WaitFlag	;wreg free
  7957                           
  7958                           ;I2C1.c: 157: WaitForACK();
  7959  0017AE  EC5E  F017         	call	_WaitForACK	;wreg free
  7960                           
  7961                           ;I2C1.c: 158: ResetVariables_I2C();
  7962  0017B2  EC54  F017         	call	_ResetVariables_I2C	;wreg free
  7963                           
  7964                           ;I2C1.c: 160: UpperByte = ReadI2C();
  7965  0017B6  ECE3  F016         	call	_ReadI2C	;wreg free
  7966  0017BA  0100               	movlb	0	; () banked
  7967  0017BC  6F76               	movwf	ReadByte_I2C@UpperByte& (0+255),b
  7968                           
  7969                           ; BSR set to: 0
  7970                           ;I2C1.c: 161: WaitFlag();
  7971  0017BE  EC5A  F017         	call	_WaitFlag	;wreg free
  7972                           
  7973                           ;I2C1.c: 162: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  7974  0017C2  9AC5               	bcf	4037,5,c	;volatile
  7975  0017C4  88C5               	bsf	4037,4,c	;volatile
  7976  0017C6                     l73:
  7977  0017C6  B8C5               	btfsc	4037,4,c	;volatile
  7978  0017C8  D7FE               	goto	l73
  7979                           
  7980                           ;I2C1.c: 163: ResetVariables_I2C();
  7981  0017CA  EC54  F017         	call	_ResetVariables_I2C	;wreg free
  7982                           
  7983                           ;I2C1.c: 165: LowerByte = ReadI2C();
  7984  0017CE  ECE3  F016         	call	_ReadI2C	;wreg free
  7985  0017D2  0100               	movlb	0	; () banked
  7986  0017D4  6F75               	movwf	ReadByte_I2C@LowerByte& (0+255),b
  7987                           
  7988                           ; BSR set to: 0
  7989                           ;I2C1.c: 166: WaitFlag();
  7990  0017D6  EC5A  F017         	call	_WaitFlag	;wreg free
  7991                           
  7992                           ;I2C1.c: 167: ResetVariables_I2C();
  7993  0017DA  EC54  F017         	call	_ResetVariables_I2C	;wreg free
  7994                           
  7995                           ;I2C1.c: 169: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  7996  0017DE  8AC5               	bsf	4037,5,c	;volatile
  7997  0017E0  88C5               	bsf	4037,4,c	;volatile
  7998  0017E2                     l76:
  7999  0017E2  B8C5               	btfsc	4037,4,c	;volatile
  8000  0017E4  D7FE               	goto	l76
  8001                           
  8002                           ;I2C1.c: 170: WaitFlag();
  8003  0017E6  EC5A  F017         	call	_WaitFlag	;wreg free
  8004                           
  8005                           ;I2C1.c: 171: ResetVariables_I2C();
  8006  0017EA  EC54  F017         	call	_ResetVariables_I2C	;wreg free
  8007                           
  8008                           ;I2C1.c: 172: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  8009  0017EE  84C5               	bsf	4037,2,c	;volatile
  8010  0017F0                     l79:
  8011  0017F0  B4C5               	btfsc	4037,2,c	;volatile
  8012  0017F2  D7FE               	goto	l79
  8013                           
  8014                           ;I2C1.c: 173: WaitFlag();
  8015  0017F4  EC5A  F017         	call	_WaitFlag	;wreg free
  8016                           
  8017                           ;I2C1.c: 174: IdleI2C();
  8018  0017F8  EC42  F017         	call	_IdleI2C	;wreg free
  8019                           
  8020                           ;I2C1.c: 181: }
  8021                           ;I2C1.c: 182: UpperByte = UpperByte & 0x1F;
  8022  0017FC  0100               	movlb	0	; () banked
  8023  0017FE  5176               	movf	ReadByte_I2C@UpperByte& (0+255),w,b
  8024  001800  0B1F               	andlw	31
  8025  001802  0100               	movlb	0	; () banked
  8026  001804  6F76               	movwf	ReadByte_I2C@UpperByte& (0+255),b
  8027                           
  8028                           ; BSR set to: 0
  8029                           ;I2C1.c: 183: if ((UpperByte & 0x10) == 0x10) {
  8030  001806  0100               	movlb	0	; () banked
  8031  001808  A976               	btfss	ReadByte_I2C@UpperByte& (0+255),4,b
  8032  00180A  D054               	goto	l5819
  8033                           
  8034                           ; BSR set to: 0
  8035                           ;I2C1.c: 184: UpperByte = UpperByte & 0x0F;
  8036  00180C  0100               	movlb	0	; () banked
  8037  00180E  5176               	movf	ReadByte_I2C@UpperByte& (0+255),w,b
  8038  001810  0B0F               	andlw	15
  8039  001812  0100               	movlb	0	; () banked
  8040  001814  6F76               	movwf	ReadByte_I2C@UpperByte& (0+255),b
  8041                           
  8042                           ; BSR set to: 0
  8043                           ;I2C1.c: 185: Temperature = (float)(256.0 - (UpperByte * 16.0 + LowerByte / 16.0));
  8044  001816  0E00               	movlw	0
  8045  001818  6E1F               	movwf	___ftdiv@f2,c
  8046  00181A  0E80               	movlw	128
  8047  00181C  6E20               	movwf	___ftdiv@f2+1,c
  8048  00181E  0E41               	movlw	65
  8049  001820  6E21               	movwf	___ftdiv@f2+2,c
  8050  001822  0100               	movlb	0	; () banked
  8051  001824  5175               	movf	ReadByte_I2C@LowerByte& (0+255),w,b
  8052  001826  EC71  F016         	call	___lbtoft
  8053  00182A  C018  F01C         	movff	?___lbtoft,___ftdiv@f1
  8054  00182E  C019  F01D         	movff	?___lbtoft+1,___ftdiv@f1+1
  8055  001832  C01A  F01E         	movff	?___lbtoft+2,___ftdiv@f1+2
  8056  001836  ECAF  F011         	call	___ftdiv	;wreg free
  8057  00183A  C01C  F02E         	movff	?___ftdiv,___ftadd@f2
  8058  00183E  C01D  F02F         	movff	?___ftdiv+1,___ftadd@f2+1
  8059  001842  C01E  F030         	movff	?___ftdiv+2,___ftadd@f2+2
  8060  001846  0E00               	movlw	0
  8061  001848  6E3A               	movwf	___ftmul@f2,c
  8062  00184A  0E80               	movlw	128
  8063  00184C  6E3B               	movwf	___ftmul@f2+1,c
  8064  00184E  0E41               	movlw	65
  8065  001850  6E3C               	movwf	___ftmul@f2+2,c
  8066  001852  0100               	movlb	0	; () banked
  8067  001854  5176               	movf	ReadByte_I2C@UpperByte& (0+255),w,b
  8068  001856  EC71  F016         	call	___lbtoft
  8069  00185A  C018  F037         	movff	?___lbtoft,___ftmul@f1
  8070  00185E  C019  F038         	movff	?___lbtoft+1,___ftmul@f1+1
  8071  001862  C01A  F039         	movff	?___lbtoft+2,___ftmul@f1+2
  8072  001866  EC1F  F011         	call	___ftmul	;wreg free
  8073  00186A  C037  F02B         	movff	?___ftmul,___ftadd@f1
  8074  00186E  C038  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  8075  001872  C039  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  8076  001876  EC99  F00C         	call	___ftadd	;wreg free
  8077  00187A  C02B  F066         	movff	?___ftadd,___ftneg@f1
  8078  00187E  C02C  F067         	movff	?___ftadd+1,___ftneg@f1+1
  8079  001882  C02D  F068         	movff	?___ftadd+2,___ftneg@f1+2
  8080  001886  EC1E  F016         	call	___ftneg	;wreg free
  8081  00188A  C066  F06E         	movff	?___ftneg,_ReadByte_I2C$2538
  8082  00188E  C067  F06F         	movff	?___ftneg+1,_ReadByte_I2C$2538+1
  8083  001892  C068  F070         	movff	?___ftneg+2,_ReadByte_I2C$2538+2
  8084                           
  8085                           ;I2C1.c: 185: Temperature = (float)(256.0 - (UpperByte * 16.0 + LowerByte / 16.0));
  8086  001896  C06E  F02B         	movff	_ReadByte_I2C$2538,___ftadd@f1
  8087  00189A  C06F  F02C         	movff	_ReadByte_I2C$2538+1,___ftadd@f1+1
  8088  00189E  C070  F02D         	movff	_ReadByte_I2C$2538+2,___ftadd@f1+2
  8089  0018A2  0E00               	movlw	0
  8090  0018A4  6E2E               	movwf	___ftadd@f2,c
  8091  0018A6  0E80               	movlw	128
  8092  0018A8  6E2F               	movwf	___ftadd@f2+1,c
  8093  0018AA  0E43               	movlw	67
  8094  0018AC  6E30               	movwf	___ftadd@f2+2,c
  8095  0018AE  EC99  F00C         	call	___ftadd	;wreg free
  8096  0018B2  D032               	goto	L6
  8097  0018B4                     l5819:
  8098                           
  8099                           ;I2C1.c: 187: Temperature = (float)((UpperByte * 16.0 + LowerByte / 16.0));
  8100  0018B4  0E00               	movlw	0
  8101  0018B6  6E3A               	movwf	___ftmul@f2,c
  8102  0018B8  0E80               	movlw	128
  8103  0018BA  6E3B               	movwf	___ftmul@f2+1,c
  8104  0018BC  0E41               	movlw	65
  8105  0018BE  6E3C               	movwf	___ftmul@f2+2,c
  8106  0018C0  0100               	movlb	0	; () banked
  8107  0018C2  5176               	movf	ReadByte_I2C@UpperByte& (0+255),w,b
  8108  0018C4  EC71  F016         	call	___lbtoft
  8109  0018C8  C018  F037         	movff	?___lbtoft,___ftmul@f1
  8110  0018CC  C019  F038         	movff	?___lbtoft+1,___ftmul@f1+1
  8111  0018D0  C01A  F039         	movff	?___lbtoft+2,___ftmul@f1+2
  8112  0018D4  EC1F  F011         	call	___ftmul	;wreg free
  8113  0018D8  C037  F02B         	movff	?___ftmul,___ftadd@f1
  8114  0018DC  C038  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  8115  0018E0  C039  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  8116  0018E4  0E00               	movlw	0
  8117  0018E6  6E1F               	movwf	___ftdiv@f2,c
  8118  0018E8  0E80               	movlw	128
  8119  0018EA  6E20               	movwf	___ftdiv@f2+1,c
  8120  0018EC  0E41               	movlw	65
  8121  0018EE  6E21               	movwf	___ftdiv@f2+2,c
  8122  0018F0  0100               	movlb	0	; () banked
  8123  0018F2  5175               	movf	ReadByte_I2C@LowerByte& (0+255),w,b
  8124  0018F4  EC71  F016         	call	___lbtoft
  8125  0018F8  C018  F01C         	movff	?___lbtoft,___ftdiv@f1
  8126  0018FC  C019  F01D         	movff	?___lbtoft+1,___ftdiv@f1+1
  8127  001900  C01A  F01E         	movff	?___lbtoft+2,___ftdiv@f1+2
  8128  001904  ECAF  F011         	call	___ftdiv	;wreg free
  8129  001908  C01C  F02E         	movff	?___ftdiv,___ftadd@f2
  8130  00190C  C01D  F02F         	movff	?___ftdiv+1,___ftadd@f2+1
  8131  001910  C01E  F030         	movff	?___ftdiv+2,___ftadd@f2+2
  8132  001914  EC99  F00C         	call	___ftadd	;wreg free
  8133  001918                     L6:
  8134  001918  C02B  F071         	movff	?___ftadd,ReadByte_I2C@Temperature
  8135  00191C  C02C  F072         	movff	?___ftadd+1,ReadByte_I2C@Temperature+1
  8136  001920  C02D  F073         	movff	?___ftadd+2,ReadByte_I2C@Temperature+2
  8137                           
  8138                           ;I2C1.c: 193: return Temperature;
  8139  001924  C071  F069         	movff	ReadByte_I2C@Temperature,?_ReadByte_I2C
  8140  001928  C072  F06A         	movff	ReadByte_I2C@Temperature+1,?_ReadByte_I2C+1
  8141  00192C  C073  F06B         	movff	ReadByte_I2C@Temperature+2,?_ReadByte_I2C+2
  8142  001930  0012               	return	
  8143  001932                     __end_of_ReadByte_I2C:
  8144                           	opt stack 0
  8145                           tblptru	equ	0xFF8
  8146                           tblptrh	equ	0xFF7
  8147                           tblptrl	equ	0xFF6
  8148                           tablat	equ	0xFF5
  8149                           prodh	equ	0xFF4
  8150                           prodl	equ	0xFF3
  8151                           postinc0	equ	0xFEE
  8152                           wreg	equ	0xFE8
  8153                           indf1	equ	0xFE7
  8154                           postdec1	equ	0xFE5
  8155                           fsr1h	equ	0xFE2
  8156                           fsr1l	equ	0xFE1
  8157                           indf2	equ	0xFDF
  8158                           postinc2	equ	0xFDE
  8159                           postdec2	equ	0xFDD
  8160                           fsr2h	equ	0xFDA
  8161                           fsr2l	equ	0xFD9
  8162                           status	equ	0xFD8
  8163                           
  8164 ;; *************** function ___lbtoft *****************
  8165 ;; Defined at:
  8166 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lbtoft.c"
  8167 ;; Parameters:    Size  Location     Type
  8168 ;;  c               1    wreg     unsigned char 
  8169 ;; Auto vars:     Size  Location     Type
  8170 ;;  c               1   26[COMRAM] unsigned char 
  8171 ;; Return value:  Size  Location     Type
  8172 ;;                  3   23[COMRAM] float 
  8173 ;; Registers used:
  8174 ;;		wreg, status,2, status,0, cstack
  8175 ;; Tracked objects:
  8176 ;;		On entry : 0/0
  8177 ;;		On exit  : 0/0
  8178 ;;		Unchanged: 0/0
  8179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8180 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8181 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8183 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8184 ;;Total ram usage:        4 bytes
  8185 ;; Hardware stack levels used:    1
  8186 ;; Hardware stack levels required when called:    3
  8187 ;; This function calls:
  8188 ;;		___ftpack
  8189 ;; This function is called by:
  8190 ;;		_ReadByte_I2C
  8191 ;; This function uses a non-reentrant model
  8192 ;;
  8193                           
  8194                           	psect	text25
  8195  002CE2                     __ptext25:
  8196                           	opt stack 0
  8197  002CE2                     ___lbtoft:
  8198                           	opt stack 25
  8199                           
  8200                           ;incstack = 0
  8201                           ;___lbtoft@c stored from wreg
  8202  002CE2  6E1B               	movwf	___lbtoft@c,c
  8203  002CE4  501B               	movf	___lbtoft@c,w,c
  8204  002CE6  6E10               	movwf	___ftpack@arg,c
  8205  002CE8  6A11               	clrf	___ftpack@arg+1,c
  8206  002CEA  6A12               	clrf	___ftpack@arg+2,c
  8207  002CEC  0E8E               	movlw	142
  8208  002CEE  6E13               	movwf	___ftpack@exp,c
  8209  002CF0  0E00               	movlw	0
  8210  002CF2  6E14               	movwf	___ftpack@sign,c
  8211  002CF4  EC92  F012         	call	___ftpack	;wreg free
  8212  002CF8  C010  F018         	movff	?___ftpack,?___lbtoft
  8213  002CFC  C011  F019         	movff	?___ftpack+1,?___lbtoft+1
  8214  002D00  C012  F01A         	movff	?___ftpack+2,?___lbtoft+2
  8215  002D04  0012               	return	
  8216  002D06                     __end_of___lbtoft:
  8217                           	opt stack 0
  8218                           tblptru	equ	0xFF8
  8219                           tblptrh	equ	0xFF7
  8220                           tblptrl	equ	0xFF6
  8221                           tablat	equ	0xFF5
  8222                           prodh	equ	0xFF4
  8223                           prodl	equ	0xFF3
  8224                           postinc0	equ	0xFEE
  8225                           wreg	equ	0xFE8
  8226                           indf1	equ	0xFE7
  8227                           postdec1	equ	0xFE5
  8228                           fsr1h	equ	0xFE2
  8229                           fsr1l	equ	0xFE1
  8230                           indf2	equ	0xFDF
  8231                           postinc2	equ	0xFDE
  8232                           postdec2	equ	0xFDD
  8233                           fsr2h	equ	0xFDA
  8234                           fsr2l	equ	0xFD9
  8235                           status	equ	0xFD8
  8236                           
  8237 ;; *************** function ___ftneg *****************
  8238 ;; Defined at:
  8239 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftneg.c"
  8240 ;; Parameters:    Size  Location     Type
  8241 ;;  f1              3    6[BANK0 ] float 
  8242 ;; Auto vars:     Size  Location     Type
  8243 ;;		None
  8244 ;; Return value:  Size  Location     Type
  8245 ;;                  3    6[BANK0 ] float 
  8246 ;; Registers used:
  8247 ;;		wreg, status,2, status,0
  8248 ;; Tracked objects:
  8249 ;;		On entry : 0/0
  8250 ;;		On exit  : 0/0
  8251 ;;		Unchanged: 0/0
  8252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8253 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8256 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8257 ;;Total ram usage:        3 bytes
  8258 ;; Hardware stack levels used:    1
  8259 ;; Hardware stack levels required when called:    2
  8260 ;; This function calls:
  8261 ;;		Nothing
  8262 ;; This function is called by:
  8263 ;;		_ReadByte_I2C
  8264 ;;		_sprintf
  8265 ;; This function uses a non-reentrant model
  8266 ;;
  8267                           
  8268                           	psect	text26
  8269  002C3C                     __ptext26:
  8270                           	opt stack 0
  8271  002C3C                     ___ftneg:
  8272                           	opt stack 26
  8273                           
  8274                           ;incstack = 0
  8275  002C3C  0100               	movlb	0	; () banked
  8276  002C3E  5166               	movf	___ftneg@f1& (0+255),w,b
  8277  002C40  0100               	movlb	0	; () banked
  8278  002C42  1167               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  8279  002C44  0100               	movlb	0	; () banked
  8280  002C46  1168               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  8281  002C48  B4D8               	btfsc	status,2,c
  8282  002C4A  D009               	goto	l1129
  8283                           
  8284                           ; BSR set to: 0
  8285  002C4C  0E00               	movlw	0
  8286  002C4E  0100               	movlb	0	; () banked
  8287  002C50  1B66               	xorwf	___ftneg@f1& (0+255),f,b
  8288  002C52  0E00               	movlw	0
  8289  002C54  0100               	movlb	0	; () banked
  8290  002C56  1B67               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  8291  002C58  0E80               	movlw	128
  8292  002C5A  0100               	movlb	0	; () banked
  8293  002C5C  1B68               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  8294  002C5E                     l1129:
  8295                           
  8296                           ; BSR set to: 0
  8297  002C5E  C066  F066         	movff	___ftneg@f1,?___ftneg
  8298  002C62  C067  F067         	movff	___ftneg@f1+1,?___ftneg+1
  8299  002C66  C068  F068         	movff	___ftneg@f1+2,?___ftneg+2
  8300                           
  8301                           ; BSR set to: 0
  8302  002C6A  0012               	return		;funcret
  8303  002C6C                     __end_of___ftneg:
  8304                           	opt stack 0
  8305                           tblptru	equ	0xFF8
  8306                           tblptrh	equ	0xFF7
  8307                           tblptrl	equ	0xFF6
  8308                           tablat	equ	0xFF5
  8309                           prodh	equ	0xFF4
  8310                           prodl	equ	0xFF3
  8311                           postinc0	equ	0xFEE
  8312                           wreg	equ	0xFE8
  8313                           indf1	equ	0xFE7
  8314                           postdec1	equ	0xFE5
  8315                           fsr1h	equ	0xFE2
  8316                           fsr1l	equ	0xFE1
  8317                           indf2	equ	0xFDF
  8318                           postinc2	equ	0xFDE
  8319                           postdec2	equ	0xFDD
  8320                           fsr2h	equ	0xFDA
  8321                           fsr2l	equ	0xFD9
  8322                           status	equ	0xFD8
  8323                           
  8324 ;; *************** function ___ftmul *****************
  8325 ;; Defined at:
  8326 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;  f1              3   54[COMRAM] float 
  8329 ;;  f2              3   57[COMRAM] float 
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  8332 ;;  sign            1    5[BANK0 ] unsigned char 
  8333 ;;  cntr            1    4[BANK0 ] unsigned char 
  8334 ;;  exp             1    0[BANK0 ] unsigned char 
  8335 ;; Return value:  Size  Location     Type
  8336 ;;                  3   54[COMRAM] float 
  8337 ;; Registers used:
  8338 ;;		wreg, status,2, status,0, cstack
  8339 ;; Tracked objects:
  8340 ;;		On entry : 0/0
  8341 ;;		On exit  : 0/0
  8342 ;;		Unchanged: 0/0
  8343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8344 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8346 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8347 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8348 ;;Total ram usage:       15 bytes
  8349 ;; Hardware stack levels used:    1
  8350 ;; Hardware stack levels required when called:    3
  8351 ;; This function calls:
  8352 ;;		___ftpack
  8353 ;; This function is called by:
  8354 ;;		_ReadByte_I2C
  8355 ;;		_output_logic
  8356 ;;		_fround
  8357 ;;		_scale
  8358 ;;		_sprintf
  8359 ;;		_log
  8360 ;;		_eval_poly
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           	psect	text27
  8365  00223E                     __ptext27:
  8366                           	opt stack 0
  8367  00223E                     ___ftmul:
  8368                           	opt stack 24
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;incstack = 0
  8372  00223E  C039  F03D         	movff	___ftmul@f1+2,??___ftmul
  8373  002242  6A3E               	clrf	(??___ftmul+1)& (0+255),c
  8374  002244  6A3F               	clrf	(??___ftmul+2)& (0+255),c
  8375  002246  3438               	rlcf	___ftmul@f1+1,w,c
  8376  002248  363D               	rlcf	??___ftmul& (0+255),f,c
  8377  00224A  E301               	bnc	u5161
  8378  00224C  803E               	bsf	(??___ftmul+1)& (0+255),0,c
  8379  00224E                     u5161:
  8380  00224E  503D               	movf	??___ftmul,w,c
  8381  002250  0100               	movlb	0	; () banked
  8382  002252  6F60               	movwf	___ftmul@exp& (0+255),b
  8383  002254  0100               	movlb	0	; () banked
  8384  002256  5160               	movf	___ftmul@exp& (0+255),w,b
  8385  002258  A4D8               	btfss	status,2,c
  8386  00225A  D007               	goto	l5091
  8387                           
  8388                           ; BSR set to: 0
  8389  00225C  0E00               	movlw	0
  8390  00225E  6E37               	movwf	?___ftmul,c
  8391  002260  0E00               	movlw	0
  8392  002262  6E38               	movwf	?___ftmul+1,c
  8393  002264  0E00               	movlw	0
  8394  002266  6E39               	movwf	?___ftmul+2,c
  8395                           
  8396                           ; BSR set to: 0
  8397  002268  0012               	return	
  8398  00226A                     l5091:
  8399                           
  8400                           ; BSR set to: 0
  8401  00226A  C03C  F03D         	movff	___ftmul@f2+2,??___ftmul
  8402  00226E  6A3E               	clrf	(??___ftmul+1)& (0+255),c
  8403  002270  6A3F               	clrf	(??___ftmul+2)& (0+255),c
  8404  002272  343B               	rlcf	___ftmul@f2+1,w,c
  8405  002274  363D               	rlcf	??___ftmul& (0+255),f,c
  8406  002276  E301               	bnc	u5181
  8407  002278  803E               	bsf	(??___ftmul+1)& (0+255),0,c
  8408  00227A                     u5181:
  8409  00227A  503D               	movf	??___ftmul,w,c
  8410  00227C  0100               	movlb	0	; () banked
  8411  00227E  6F65               	movwf	___ftmul@sign& (0+255),b
  8412  002280  0100               	movlb	0	; () banked
  8413  002282  5165               	movf	___ftmul@sign& (0+255),w,b
  8414  002284  A4D8               	btfss	status,2,c
  8415  002286  D007               	goto	l5097
  8416                           
  8417                           ; BSR set to: 0
  8418  002288  0E00               	movlw	0
  8419  00228A  6E37               	movwf	?___ftmul,c
  8420  00228C  0E00               	movlw	0
  8421  00228E  6E38               	movwf	?___ftmul+1,c
  8422  002290  0E00               	movlw	0
  8423  002292  6E39               	movwf	?___ftmul+2,c
  8424                           
  8425                           ; BSR set to: 0
  8426  002294  0012               	return	
  8427  002296                     l5097:
  8428                           
  8429                           ; BSR set to: 0
  8430  002296  0100               	movlb	0	; () banked
  8431  002298  5165               	movf	___ftmul@sign& (0+255),w,b
  8432  00229A  0F7B               	addlw	123
  8433  00229C  0100               	movlb	0	; () banked
  8434  00229E  2760               	addwf	___ftmul@exp& (0+255),f,b
  8435                           
  8436                           ; BSR set to: 0
  8437  0022A0  C039  F065         	movff	___ftmul@f1+2,___ftmul@sign
  8438  0022A4  503C               	movf	___ftmul@f2+2,w,c
  8439  0022A6  0100               	movlb	0	; () banked
  8440  0022A8  1B65               	xorwf	___ftmul@sign& (0+255),f,b
  8441  0022AA  0E80               	movlw	128
  8442  0022AC  0100               	movlb	0	; () banked
  8443  0022AE  1765               	andwf	___ftmul@sign& (0+255),f,b
  8444                           
  8445                           ; BSR set to: 0
  8446  0022B0  8E38               	bsf	___ftmul@f1+1,7,c
  8447                           
  8448                           ; BSR set to: 0
  8449  0022B2  8E3B               	bsf	___ftmul@f2+1,7,c
  8450                           
  8451                           ; BSR set to: 0
  8452  0022B4  0EFF               	movlw	255
  8453  0022B6  163A               	andwf	___ftmul@f2,f,c
  8454  0022B8  0EFF               	movlw	255
  8455  0022BA  163B               	andwf	___ftmul@f2+1,f,c
  8456  0022BC  0E00               	movlw	0
  8457  0022BE  163C               	andwf	___ftmul@f2+2,f,c
  8458                           
  8459                           ; BSR set to: 0
  8460  0022C0  0E00               	movlw	0
  8461  0022C2  0100               	movlb	0	; () banked
  8462  0022C4  6F61               	movwf	___ftmul@f3_as_product& (0+255),b
  8463  0022C6  0E00               	movlw	0
  8464  0022C8  0100               	movlb	0	; () banked
  8465  0022CA  6F62               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8466  0022CC  0E00               	movlw	0
  8467  0022CE  0100               	movlb	0	; () banked
  8468  0022D0  6F63               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8469                           
  8470                           ; BSR set to: 0
  8471  0022D2  0E07               	movlw	7
  8472  0022D4  0100               	movlb	0	; () banked
  8473  0022D6  6F64               	movwf	___ftmul@cntr& (0+255),b
  8474  0022D8                     l5111:
  8475                           
  8476                           ; BSR set to: 0
  8477  0022D8  A037               	btfss	___ftmul@f1,0,c
  8478  0022DA  D009               	goto	l5115
  8479                           
  8480                           ; BSR set to: 0
  8481  0022DC  503A               	movf	___ftmul@f2,w,c
  8482  0022DE  0100               	movlb	0	; () banked
  8483  0022E0  2761               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8484  0022E2  503B               	movf	___ftmul@f2+1,w,c
  8485  0022E4  0100               	movlb	0	; () banked
  8486  0022E6  2362               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8487  0022E8  503C               	movf	___ftmul@f2+2,w,c
  8488  0022EA  0100               	movlb	0	; () banked
  8489  0022EC  2363               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8490  0022EE                     l5115:
  8491                           
  8492                           ; BSR set to: 0
  8493  0022EE  90D8               	bcf	status,0,c
  8494  0022F0  3239               	rrcf	___ftmul@f1+2,f,c
  8495  0022F2  3238               	rrcf	___ftmul@f1+1,f,c
  8496  0022F4  3237               	rrcf	___ftmul@f1,f,c
  8497  0022F6  90D8               	bcf	status,0,c
  8498  0022F8  363A               	rlcf	___ftmul@f2,f,c
  8499  0022FA  363B               	rlcf	___ftmul@f2+1,f,c
  8500  0022FC  363C               	rlcf	___ftmul@f2+2,f,c
  8501                           
  8502                           ; BSR set to: 0
  8503  0022FE  0100               	movlb	0	; () banked
  8504  002300  2F64               	decfsz	___ftmul@cntr& (0+255),f,b
  8505  002302  D7EA               	goto	l5111
  8506                           
  8507                           ; BSR set to: 0
  8508                           
  8509                           ; BSR set to: 0
  8510  002304  0E09               	movlw	9
  8511  002306  0100               	movlb	0	; () banked
  8512  002308  6F64               	movwf	___ftmul@cntr& (0+255),b
  8513  00230A                     l5121:
  8514                           
  8515                           ; BSR set to: 0
  8516  00230A  A037               	btfss	___ftmul@f1,0,c
  8517  00230C  D009               	goto	l5125
  8518                           
  8519                           ; BSR set to: 0
  8520  00230E  503A               	movf	___ftmul@f2,w,c
  8521  002310  0100               	movlb	0	; () banked
  8522  002312  2761               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8523  002314  503B               	movf	___ftmul@f2+1,w,c
  8524  002316  0100               	movlb	0	; () banked
  8525  002318  2362               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8526  00231A  503C               	movf	___ftmul@f2+2,w,c
  8527  00231C  0100               	movlb	0	; () banked
  8528  00231E  2363               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8529  002320                     l5125:
  8530                           
  8531                           ; BSR set to: 0
  8532  002320  90D8               	bcf	status,0,c
  8533  002322  3239               	rrcf	___ftmul@f1+2,f,c
  8534  002324  3238               	rrcf	___ftmul@f1+1,f,c
  8535  002326  3237               	rrcf	___ftmul@f1,f,c
  8536  002328  0100               	movlb	0	; () banked
  8537  00232A  90D8               	bcf	status,0,c
  8538  00232C  3363               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8539  00232E  3362               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8540  002330  3361               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8541                           
  8542                           ; BSR set to: 0
  8543  002332  0100               	movlb	0	; () banked
  8544  002334  2F64               	decfsz	___ftmul@cntr& (0+255),f,b
  8545  002336  D7E9               	goto	l5121
  8546                           
  8547                           ; BSR set to: 0
  8548                           
  8549                           ; BSR set to: 0
  8550  002338  C061  F010         	movff	___ftmul@f3_as_product,___ftpack@arg
  8551  00233C  C062  F011         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8552  002340  C063  F012         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8553  002344  C060  F013         	movff	___ftmul@exp,___ftpack@exp
  8554  002348  C065  F014         	movff	___ftmul@sign,___ftpack@sign
  8555  00234C  EC92  F012         	call	___ftpack	;wreg free
  8556  002350  C010  F037         	movff	?___ftpack,?___ftmul
  8557  002354  C011  F038         	movff	?___ftpack+1,?___ftmul+1
  8558  002358  C012  F039         	movff	?___ftpack+2,?___ftmul+2
  8559  00235C  0012               	return	
  8560  00235E                     __end_of___ftmul:
  8561                           	opt stack 0
  8562                           tblptru	equ	0xFF8
  8563                           tblptrh	equ	0xFF7
  8564                           tblptrl	equ	0xFF6
  8565                           tablat	equ	0xFF5
  8566                           prodh	equ	0xFF4
  8567                           prodl	equ	0xFF3
  8568                           postinc0	equ	0xFEE
  8569                           wreg	equ	0xFE8
  8570                           indf1	equ	0xFE7
  8571                           postdec1	equ	0xFE5
  8572                           fsr1h	equ	0xFE2
  8573                           fsr1l	equ	0xFE1
  8574                           indf2	equ	0xFDF
  8575                           postinc2	equ	0xFDE
  8576                           postdec2	equ	0xFDD
  8577                           fsr2h	equ	0xFDA
  8578                           fsr2l	equ	0xFD9
  8579                           status	equ	0xFD8
  8580                           
  8581 ;; *************** function ___ftadd *****************
  8582 ;; Defined at:
  8583 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftadd.c"
  8584 ;; Parameters:    Size  Location     Type
  8585 ;;  f1              3   42[COMRAM] float 
  8586 ;;  f2              3   45[COMRAM] float 
  8587 ;; Auto vars:     Size  Location     Type
  8588 ;;  exp1            1   53[COMRAM] unsigned char 
  8589 ;;  exp2            1   52[COMRAM] unsigned char 
  8590 ;;  sign            1   51[COMRAM] unsigned char 
  8591 ;; Return value:  Size  Location     Type
  8592 ;;                  3   42[COMRAM] float 
  8593 ;; Registers used:
  8594 ;;		wreg, status,2, status,0, cstack
  8595 ;; Tracked objects:
  8596 ;;		On entry : 0/0
  8597 ;;		On exit  : 0/0
  8598 ;;		Unchanged: 0/0
  8599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8600 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8601 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8602 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8603 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8604 ;;Total ram usage:       12 bytes
  8605 ;; Hardware stack levels used:    1
  8606 ;; Hardware stack levels required when called:    3
  8607 ;; This function calls:
  8608 ;;		___ftpack
  8609 ;; This function is called by:
  8610 ;;		_ReadByte_I2C
  8611 ;;		_output_logic
  8612 ;;		_sprintf
  8613 ;;		___ftsub
  8614 ;;		_log
  8615 ;;		_eval_poly
  8616 ;; This function uses a non-reentrant model
  8617 ;;
  8618                           
  8619                           	psect	text28
  8620  001932                     __ptext28:
  8621                           	opt stack 0
  8622  001932                     ___ftadd:
  8623                           	opt stack 24
  8624                           
  8625                           ;incstack = 0
  8626  001932  C02D  F031         	movff	___ftadd@f1+2,??___ftadd
  8627  001936  6A32               	clrf	(??___ftadd+1)& (0+255),c
  8628  001938  6A33               	clrf	(??___ftadd+2)& (0+255),c
  8629  00193A  342C               	rlcf	___ftadd@f1+1,w,c
  8630  00193C  3631               	rlcf	??___ftadd& (0+255),f,c
  8631  00193E  E301               	bnc	u4951
  8632  001940  8032               	bsf	(??___ftadd+1)& (0+255),0,c
  8633  001942                     u4951:
  8634  001942  5031               	movf	??___ftadd,w,c
  8635  001944  6E36               	movwf	___ftadd@exp1,c
  8636  001946  C030  F031         	movff	___ftadd@f2+2,??___ftadd
  8637  00194A  6A32               	clrf	(??___ftadd+1)& (0+255),c
  8638  00194C  6A33               	clrf	(??___ftadd+2)& (0+255),c
  8639  00194E  342F               	rlcf	___ftadd@f2+1,w,c
  8640  001950  3631               	rlcf	??___ftadd& (0+255),f,c
  8641  001952  E301               	bnc	u4961
  8642  001954  8032               	bsf	(??___ftadd+1)& (0+255),0,c
  8643  001956                     u4961:
  8644  001956  5031               	movf	??___ftadd,w,c
  8645  001958  6E35               	movwf	___ftadd@exp2,c
  8646  00195A  5036               	movf	___ftadd@exp1,w,c
  8647  00195C  B4D8               	btfsc	status,2,c
  8648  00195E  D00B               	goto	l1055
  8649  001960  5035               	movf	___ftadd@exp2,w,c
  8650  001962  5C36               	subwf	___ftadd@exp1,w,c
  8651  001964  B0D8               	btfsc	status,0,c
  8652  001966  D00E               	goto	l5023
  8653  001968  5036               	movf	___ftadd@exp1,w,c
  8654  00196A  0800               	sublw	0
  8655  00196C  2435               	addwf	___ftadd@exp2,w,c
  8656  00196E  6E31               	movwf	??___ftadd& (0+255),c
  8657  001970  0E18               	movlw	24
  8658  001972  6431               	cpfsgt	??___ftadd,c
  8659  001974  D007               	goto	l5023
  8660  001976                     l1055:
  8661  001976  C02E  F02B         	movff	___ftadd@f2,?___ftadd
  8662  00197A  C02F  F02C         	movff	___ftadd@f2+1,?___ftadd+1
  8663  00197E  C030  F02D         	movff	___ftadd@f2+2,?___ftadd+2
  8664  001982  0012               	return	
  8665  001984                     l5023:
  8666  001984  5035               	movf	___ftadd@exp2,w,c
  8667  001986  B4D8               	btfsc	status,2,c
  8668  001988  D00B               	goto	l1059
  8669  00198A  5036               	movf	___ftadd@exp1,w,c
  8670  00198C  5C35               	subwf	___ftadd@exp2,w,c
  8671  00198E  B0D8               	btfsc	status,0,c
  8672  001990  D00E               	goto	l5029
  8673  001992  5035               	movf	___ftadd@exp2,w,c
  8674  001994  0800               	sublw	0
  8675  001996  2436               	addwf	___ftadd@exp1,w,c
  8676  001998  6E31               	movwf	??___ftadd& (0+255),c
  8677  00199A  0E18               	movlw	24
  8678  00199C  6431               	cpfsgt	??___ftadd,c
  8679  00199E  D007               	goto	l5029
  8680  0019A0                     l1059:
  8681  0019A0  C02B  F02B         	movff	___ftadd@f1,?___ftadd
  8682  0019A4  C02C  F02C         	movff	___ftadd@f1+1,?___ftadd+1
  8683  0019A8  C02D  F02D         	movff	___ftadd@f1+2,?___ftadd+2
  8684  0019AC  0012               	return	
  8685  0019AE                     l5029:
  8686  0019AE  0E06               	movlw	6
  8687  0019B0  6E34               	movwf	___ftadd@sign,c
  8688  0019B2  BE2D               	btfsc	___ftadd@f1+2,7,c
  8689  0019B4  8E34               	bsf	___ftadd@sign,7,c
  8690  0019B6  BE30               	btfsc	___ftadd@f2+2,7,c
  8691  0019B8  8C34               	bsf	___ftadd@sign,6,c
  8692  0019BA  8E2C               	bsf	___ftadd@f1+1,7,c
  8693  0019BC  0EFF               	movlw	255
  8694  0019BE  162B               	andwf	___ftadd@f1,f,c
  8695  0019C0  0EFF               	movlw	255
  8696  0019C2  162C               	andwf	___ftadd@f1+1,f,c
  8697  0019C4  0E00               	movlw	0
  8698  0019C6  162D               	andwf	___ftadd@f1+2,f,c
  8699  0019C8  8E2F               	bsf	___ftadd@f2+1,7,c
  8700  0019CA  0EFF               	movlw	255
  8701  0019CC  162E               	andwf	___ftadd@f2,f,c
  8702  0019CE  0EFF               	movlw	255
  8703  0019D0  162F               	andwf	___ftadd@f2+1,f,c
  8704  0019D2  0E00               	movlw	0
  8705  0019D4  1630               	andwf	___ftadd@f2+2,f,c
  8706  0019D6  5035               	movf	___ftadd@exp2,w,c
  8707  0019D8  5C36               	subwf	___ftadd@exp1,w,c
  8708  0019DA  B0D8               	btfsc	status,0,c
  8709  0019DC  D01B               	goto	l5055
  8710  0019DE                     l5045:
  8711  0019DE  90D8               	bcf	status,0,c
  8712  0019E0  362E               	rlcf	___ftadd@f2,f,c
  8713  0019E2  362F               	rlcf	___ftadd@f2+1,f,c
  8714  0019E4  3630               	rlcf	___ftadd@f2+2,f,c
  8715  0019E6  0635               	decf	___ftadd@exp2,f,c
  8716  0019E8  5036               	movf	___ftadd@exp1,w,c
  8717  0019EA  1835               	xorwf	___ftadd@exp2,w,c
  8718  0019EC  B4D8               	btfsc	status,2,c
  8719  0019EE  D00D               	goto	l5053
  8720  0019F0  0634               	decf	___ftadd@sign,f,c
  8721  0019F2  C034  F031         	movff	___ftadd@sign,??___ftadd
  8722  0019F6  0E07               	movlw	7
  8723  0019F8  1631               	andwf	??___ftadd,f,c
  8724  0019FA  B4D8               	btfsc	status,2,c
  8725  0019FC  D006               	goto	l5053
  8726  0019FE  D7EF               	goto	l5045
  8727  001A00                     l5051:
  8728  001A00  90D8               	bcf	status,0,c
  8729  001A02  322D               	rrcf	___ftadd@f1+2,f,c
  8730  001A04  322C               	rrcf	___ftadd@f1+1,f,c
  8731  001A06  322B               	rrcf	___ftadd@f1,f,c
  8732  001A08  2A36               	incf	___ftadd@exp1,f,c
  8733  001A0A                     l5053:
  8734  001A0A  5035               	movf	___ftadd@exp2,w,c
  8735  001A0C  1836               	xorwf	___ftadd@exp1,w,c
  8736  001A0E  B4D8               	btfsc	status,2,c
  8737  001A10  D01F               	goto	l1070
  8738  001A12  D7F6               	goto	l5051
  8739  001A14                     l5055:
  8740  001A14  5036               	movf	___ftadd@exp1,w,c
  8741  001A16  5C35               	subwf	___ftadd@exp2,w,c
  8742  001A18  B0D8               	btfsc	status,0,c
  8743  001A1A  D01A               	goto	l1070
  8744  001A1C                     l5057:
  8745  001A1C  90D8               	bcf	status,0,c
  8746  001A1E  362B               	rlcf	___ftadd@f1,f,c
  8747  001A20  362C               	rlcf	___ftadd@f1+1,f,c
  8748  001A22  362D               	rlcf	___ftadd@f1+2,f,c
  8749  001A24  0636               	decf	___ftadd@exp1,f,c
  8750  001A26  5036               	movf	___ftadd@exp1,w,c
  8751  001A28  1835               	xorwf	___ftadd@exp2,w,c
  8752  001A2A  B4D8               	btfsc	status,2,c
  8753  001A2C  D00D               	goto	l5065
  8754  001A2E  0634               	decf	___ftadd@sign,f,c
  8755  001A30  C034  F031         	movff	___ftadd@sign,??___ftadd
  8756  001A34  0E07               	movlw	7
  8757  001A36  1631               	andwf	??___ftadd,f,c
  8758  001A38  B4D8               	btfsc	status,2,c
  8759  001A3A  D006               	goto	l5065
  8760  001A3C  D7EF               	goto	l5057
  8761  001A3E                     l5063:
  8762  001A3E  90D8               	bcf	status,0,c
  8763  001A40  3230               	rrcf	___ftadd@f2+2,f,c
  8764  001A42  322F               	rrcf	___ftadd@f2+1,f,c
  8765  001A44  322E               	rrcf	___ftadd@f2,f,c
  8766  001A46  2A35               	incf	___ftadd@exp2,f,c
  8767  001A48                     l5065:
  8768  001A48  5035               	movf	___ftadd@exp2,w,c
  8769  001A4A  1836               	xorwf	___ftadd@exp1,w,c
  8770  001A4C  A4D8               	btfss	status,2,c
  8771  001A4E  D7F7               	goto	l5063
  8772  001A50                     l1070:
  8773  001A50  AE34               	btfss	___ftadd@sign,7,c
  8774  001A52  D00C               	goto	l1079
  8775  001A54  0EFF               	movlw	255
  8776  001A56  1A2B               	xorwf	___ftadd@f1,f,c
  8777  001A58  0EFF               	movlw	255
  8778  001A5A  1A2C               	xorwf	___ftadd@f1+1,f,c
  8779  001A5C  0EFF               	movlw	255
  8780  001A5E  1A2D               	xorwf	___ftadd@f1+2,f,c
  8781  001A60  0E01               	movlw	1
  8782  001A62  262B               	addwf	___ftadd@f1,f,c
  8783  001A64  0E00               	movlw	0
  8784  001A66  222C               	addwfc	___ftadd@f1+1,f,c
  8785  001A68  0E00               	movlw	0
  8786  001A6A  222D               	addwfc	___ftadd@f1+2,f,c
  8787  001A6C                     l1079:
  8788  001A6C  AC34               	btfss	___ftadd@sign,6,c
  8789  001A6E  D00C               	goto	l5071
  8790  001A70  0EFF               	movlw	255
  8791  001A72  1A2E               	xorwf	___ftadd@f2,f,c
  8792  001A74  0EFF               	movlw	255
  8793  001A76  1A2F               	xorwf	___ftadd@f2+1,f,c
  8794  001A78  0EFF               	movlw	255
  8795  001A7A  1A30               	xorwf	___ftadd@f2+2,f,c
  8796  001A7C  0E01               	movlw	1
  8797  001A7E  262E               	addwf	___ftadd@f2,f,c
  8798  001A80  0E00               	movlw	0
  8799  001A82  222F               	addwfc	___ftadd@f2+1,f,c
  8800  001A84  0E00               	movlw	0
  8801  001A86  2230               	addwfc	___ftadd@f2+2,f,c
  8802  001A88                     l5071:
  8803  001A88  0E00               	movlw	0
  8804  001A8A  6E34               	movwf	___ftadd@sign,c
  8805  001A8C  502B               	movf	___ftadd@f1,w,c
  8806  001A8E  262E               	addwf	___ftadd@f2,f,c
  8807  001A90  502C               	movf	___ftadd@f1+1,w,c
  8808  001A92  222F               	addwfc	___ftadd@f2+1,f,c
  8809  001A94  502D               	movf	___ftadd@f1+2,w,c
  8810  001A96  2230               	addwfc	___ftadd@f2+2,f,c
  8811  001A98  AE30               	btfss	___ftadd@f2+2,7,c
  8812  001A9A  D00E               	goto	l5081
  8813  001A9C  0EFF               	movlw	255
  8814  001A9E  1A2E               	xorwf	___ftadd@f2,f,c
  8815  001AA0  0EFF               	movlw	255
  8816  001AA2  1A2F               	xorwf	___ftadd@f2+1,f,c
  8817  001AA4  0EFF               	movlw	255
  8818  001AA6  1A30               	xorwf	___ftadd@f2+2,f,c
  8819  001AA8  0E01               	movlw	1
  8820  001AAA  262E               	addwf	___ftadd@f2,f,c
  8821  001AAC  0E00               	movlw	0
  8822  001AAE  222F               	addwfc	___ftadd@f2+1,f,c
  8823  001AB0  0E00               	movlw	0
  8824  001AB2  2230               	addwfc	___ftadd@f2+2,f,c
  8825  001AB4  0E01               	movlw	1
  8826  001AB6  6E34               	movwf	___ftadd@sign,c
  8827  001AB8                     l5081:
  8828  001AB8  C02E  F010         	movff	___ftadd@f2,___ftpack@arg
  8829  001ABC  C02F  F011         	movff	___ftadd@f2+1,___ftpack@arg+1
  8830  001AC0  C030  F012         	movff	___ftadd@f2+2,___ftpack@arg+2
  8831  001AC4  C036  F013         	movff	___ftadd@exp1,___ftpack@exp
  8832  001AC8  C034  F014         	movff	___ftadd@sign,___ftpack@sign
  8833  001ACC  EC92  F012         	call	___ftpack	;wreg free
  8834  001AD0  C010  F02B         	movff	?___ftpack,?___ftadd
  8835  001AD4  C011  F02C         	movff	?___ftpack+1,?___ftadd+1
  8836  001AD8  C012  F02D         	movff	?___ftpack+2,?___ftadd+2
  8837  001ADC  0012               	return	
  8838  001ADE                     __end_of___ftadd:
  8839                           	opt stack 0
  8840                           tblptru	equ	0xFF8
  8841                           tblptrh	equ	0xFF7
  8842                           tblptrl	equ	0xFF6
  8843                           tablat	equ	0xFF5
  8844                           prodh	equ	0xFF4
  8845                           prodl	equ	0xFF3
  8846                           postinc0	equ	0xFEE
  8847                           wreg	equ	0xFE8
  8848                           indf1	equ	0xFE7
  8849                           postdec1	equ	0xFE5
  8850                           fsr1h	equ	0xFE2
  8851                           fsr1l	equ	0xFE1
  8852                           indf2	equ	0xFDF
  8853                           postinc2	equ	0xFDE
  8854                           postdec2	equ	0xFDD
  8855                           fsr2h	equ	0xFDA
  8856                           fsr2l	equ	0xFD9
  8857                           status	equ	0xFD8
  8858                           
  8859 ;; *************** function _WriteI2C *****************
  8860 ;; Defined at:
  8861 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\i2c\i2c_writ.c"
  8862 ;; Parameters:    Size  Location     Type
  8863 ;;  data_out        1    wreg     unsigned char 
  8864 ;; Auto vars:     Size  Location     Type
  8865 ;;  data_out        1   16[COMRAM] unsigned char 
  8866 ;; Return value:  Size  Location     Type
  8867 ;;                  1    wreg      char 
  8868 ;; Registers used:
  8869 ;;		wreg, status,2, status,0, cstack
  8870 ;; Tracked objects:
  8871 ;;		On entry : 0/0
  8872 ;;		On exit  : 0/0
  8873 ;;		Unchanged: 0/0
  8874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8876 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8878 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8879 ;;Total ram usage:        1 bytes
  8880 ;; Hardware stack levels used:    1
  8881 ;; Hardware stack levels required when called:    3
  8882 ;; This function calls:
  8883 ;;		_IdleI2C
  8884 ;; This function is called by:
  8885 ;;		_ReadByte_I2C
  8886 ;;		_WriteMANU_I2C
  8887 ;;		_WriteDEVICE_I2C
  8888 ;; This function uses a non-reentrant model
  8889 ;;
  8890                           
  8891                           	psect	text29
  8892  002B3C                     __ptext29:
  8893                           	opt stack 0
  8894  002B3C                     _WriteI2C:
  8895                           	opt stack 25
  8896                           
  8897                           ;incstack = 0
  8898                           ;WriteI2C@data_out stored from wreg
  8899  002B3C  6E11               	movwf	WriteI2C@data_out,c
  8900  002B3E  C011  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  8901  002B42  BEC6               	btfsc	4038,7,c	;volatile
  8902  002B44  0012               	return	
  8903                           
  8904                           ;	Return value of _WriteI2C is never used
  8905  002B46  50C6               	movf	4038,w,c	;volatile
  8906  002B48  0B0F               	andlw	15
  8907  002B4A  0A08               	xorlw	8
  8908  002B4C  B4D8               	btfsc	status,2,c
  8909  002B4E  D00C               	goto	l5249
  8910  002B50  50C6               	movf	4038,w,c	;volatile
  8911  002B52  0B0F               	andlw	15
  8912  002B54  0A0B               	xorlw	11
  8913  002B56  B4D8               	btfsc	status,2,c
  8914  002B58  D007               	goto	l5249
  8915  002B5A  88C6               	bsf	4038,4,c	;volatile
  8916  002B5C                     l777:
  8917  002B5C  A69E               	btfss	3998,3,c	;volatile
  8918  002B5E  D7FE               	goto	l777
  8919  002B60  B4C7               	btfsc	4039,2,c	;volatile
  8920  002B62  0012               	return	
  8921  002B64  50C7               	movf	4039,w,c	;volatile
  8922                           
  8923                           ;	Return value of _WriteI2C is never used
  8924                           
  8925                           ;	Return value of _WriteI2C is never used
  8926  002B66  0012               	return	
  8927  002B68                     l5249:
  8928  002B68  50C6               	movf	4038,w,c	;volatile
  8929  002B6A  0B0F               	andlw	15
  8930  002B6C  0A08               	xorlw	8
  8931  002B6E  B4D8               	btfsc	status,2,c
  8932  002B70  D005               	goto	l786
  8933  002B72  50C6               	movf	4038,w,c	;volatile
  8934  002B74  0B0F               	andlw	15
  8935  002B76  0A0B               	xorlw	11
  8936  002B78  A4D8               	btfss	status,2,c
  8937  002B7A  0012               	return	
  8938  002B7C                     l786:
  8939  002B7C  B0C7               	btfsc	4039,0,c	;volatile
  8940  002B7E  D7FE               	goto	l786
  8941  002B80  EC42  F017         	call	_IdleI2C	;wreg free
  8942  002B84  50C5               	movf	4037,w,c	;volatile
  8943                           
  8944                           ;	Return value of _WriteI2C is never used
  8945                           
  8946                           ;	Return value of _WriteI2C is never used
  8947  002B86  0012               	return	
  8948  002B88                     __end_of_WriteI2C:
  8949                           	opt stack 0
  8950                           tblptru	equ	0xFF8
  8951                           tblptrh	equ	0xFF7
  8952                           tblptrl	equ	0xFF6
  8953                           tablat	equ	0xFF5
  8954                           prodh	equ	0xFF4
  8955                           prodl	equ	0xFF3
  8956                           postinc0	equ	0xFEE
  8957                           wreg	equ	0xFE8
  8958                           indf1	equ	0xFE7
  8959                           postdec1	equ	0xFE5
  8960                           fsr1h	equ	0xFE2
  8961                           fsr1l	equ	0xFE1
  8962                           indf2	equ	0xFDF
  8963                           postinc2	equ	0xFDE
  8964                           postdec2	equ	0xFDD
  8965                           fsr2h	equ	0xFDA
  8966                           fsr2l	equ	0xFD9
  8967                           status	equ	0xFD8
  8968                           
  8969 ;; *************** function _WaitForACK *****************
  8970 ;; Defined at:
  8971 ;;		line 211 in file "../I2C1.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;		None
  8974 ;; Auto vars:     Size  Location     Type
  8975 ;;		None
  8976 ;; Return value:  Size  Location     Type
  8977 ;;		None               void
  8978 ;; Registers used:
  8979 ;;		None
  8980 ;; Tracked objects:
  8981 ;;		On entry : 0/0
  8982 ;;		On exit  : 0/0
  8983 ;;		Unchanged: 0/0
  8984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8989 ;;Total ram usage:        0 bytes
  8990 ;; Hardware stack levels used:    1
  8991 ;; Hardware stack levels required when called:    2
  8992 ;; This function calls:
  8993 ;;		Nothing
  8994 ;; This function is called by:
  8995 ;;		_ReadByte_I2C
  8996 ;;		_WriteMANU_I2C
  8997 ;;		_WriteDEVICE_I2C
  8998 ;; This function uses a non-reentrant model
  8999 ;;
  9000                           
  9001                           	psect	text30
  9002  002EBC                     __ptext30:
  9003                           	opt stack 0
  9004  002EBC                     _WaitForACK:
  9005                           	opt stack 26
  9006  002EBC                     l99:
  9007  002EBC  ACC5               	btfss	4037,6,c	;volatile
  9008  002EBE  0012               	return	
  9009  002EC0  D7FD               	goto	l99
  9010  002EC2                     __end_of_WaitForACK:
  9011                           	opt stack 0
  9012                           tblptru	equ	0xFF8
  9013                           tblptrh	equ	0xFF7
  9014                           tblptrl	equ	0xFF6
  9015                           tablat	equ	0xFF5
  9016                           prodh	equ	0xFF4
  9017                           prodl	equ	0xFF3
  9018                           postinc0	equ	0xFEE
  9019                           wreg	equ	0xFE8
  9020                           indf1	equ	0xFE7
  9021                           postdec1	equ	0xFE5
  9022                           fsr1h	equ	0xFE2
  9023                           fsr1l	equ	0xFE1
  9024                           indf2	equ	0xFDF
  9025                           postinc2	equ	0xFDE
  9026                           postdec2	equ	0xFDD
  9027                           fsr2h	equ	0xFDA
  9028                           fsr2l	equ	0xFD9
  9029                           status	equ	0xFD8
  9030                           
  9031 ;; *************** function _WaitFlag *****************
  9032 ;; Defined at:
  9033 ;;		line 206 in file "../I2C1.c"
  9034 ;; Parameters:    Size  Location     Type
  9035 ;;		None
  9036 ;; Auto vars:     Size  Location     Type
  9037 ;;		None
  9038 ;; Return value:  Size  Location     Type
  9039 ;;		None               void
  9040 ;; Registers used:
  9041 ;;		None
  9042 ;; Tracked objects:
  9043 ;;		On entry : 0/0
  9044 ;;		On exit  : 0/0
  9045 ;;		Unchanged: 0/0
  9046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9051 ;;Total ram usage:        0 bytes
  9052 ;; Hardware stack levels used:    1
  9053 ;; Hardware stack levels required when called:    2
  9054 ;; This function calls:
  9055 ;;		Nothing
  9056 ;; This function is called by:
  9057 ;;		_ReadByte_I2C
  9058 ;;		_WriteMANU_I2C
  9059 ;;		_WriteDEVICE_I2C
  9060 ;; This function uses a non-reentrant model
  9061 ;;
  9062                           
  9063                           	psect	text31
  9064  002EB4                     __ptext31:
  9065                           	opt stack 0
  9066  002EB4                     _WaitFlag:
  9067                           	opt stack 26
  9068  002EB4                     l93:
  9069  002EB4  A69E               	btfss	3998,3,c	;volatile
  9070  002EB6  D7FE               	goto	l93
  9071                           
  9072                           ;I2C1.c: 209: PIR1bits.SSPIF=0;
  9073  002EB8  969E               	bcf	3998,3,c	;volatile
  9074  002EBA  0012               	return		;funcret
  9075  002EBC                     __end_of_WaitFlag:
  9076                           	opt stack 0
  9077                           tblptru	equ	0xFF8
  9078                           tblptrh	equ	0xFF7
  9079                           tblptrl	equ	0xFF6
  9080                           tablat	equ	0xFF5
  9081                           prodh	equ	0xFF4
  9082                           prodl	equ	0xFF3
  9083                           postinc0	equ	0xFEE
  9084                           wreg	equ	0xFE8
  9085                           indf1	equ	0xFE7
  9086                           postdec1	equ	0xFE5
  9087                           fsr1h	equ	0xFE2
  9088                           fsr1l	equ	0xFE1
  9089                           indf2	equ	0xFDF
  9090                           postinc2	equ	0xFDE
  9091                           postdec2	equ	0xFDD
  9092                           fsr2h	equ	0xFDA
  9093                           fsr2l	equ	0xFD9
  9094                           status	equ	0xFD8
  9095                           
  9096 ;; *************** function _ResetVariables_I2C *****************
  9097 ;; Defined at:
  9098 ;;		line 197 in file "../I2C1.c"
  9099 ;; Parameters:    Size  Location     Type
  9100 ;;		None
  9101 ;; Auto vars:     Size  Location     Type
  9102 ;;		None
  9103 ;; Return value:  Size  Location     Type
  9104 ;;		None               void
  9105 ;; Registers used:
  9106 ;;		None
  9107 ;; Tracked objects:
  9108 ;;		On entry : 0/0
  9109 ;;		On exit  : 0/0
  9110 ;;		Unchanged: 0/0
  9111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9116 ;;Total ram usage:        0 bytes
  9117 ;; Hardware stack levels used:    1
  9118 ;; Hardware stack levels required when called:    2
  9119 ;; This function calls:
  9120 ;;		Nothing
  9121 ;; This function is called by:
  9122 ;;		_ReadByte_I2C
  9123 ;;		_WriteMANU_I2C
  9124 ;;		_WriteDEVICE_I2C
  9125 ;; This function uses a non-reentrant model
  9126 ;;
  9127                           
  9128                           	psect	text32
  9129  002EA8                     __ptext32:
  9130                           	opt stack 0
  9131  002EA8                     _ResetVariables_I2C:
  9132                           	opt stack 26
  9133                           
  9134                           ;I2C1.c: 199: SSPCON2bits.ACKEN=0;
  9135                           
  9136                           ;incstack = 0
  9137  002EA8  98C5               	bcf	4037,4,c	;volatile
  9138                           
  9139                           ;I2C1.c: 200: SSPCON2bits.PEN=0;
  9140  002EAA  94C5               	bcf	4037,2,c	;volatile
  9141                           
  9142                           ;I2C1.c: 201: SSPCON2bits.RCEN=0;
  9143  002EAC  96C5               	bcf	4037,3,c	;volatile
  9144                           
  9145                           ;I2C1.c: 202: SSPCON2bits.RSEN=0;
  9146  002EAE  92C5               	bcf	4037,1,c	;volatile
  9147                           
  9148                           ;I2C1.c: 203: SSPCON2bits.SEN=0;
  9149  002EB0  90C5               	bcf	4037,0,c	;volatile
  9150  002EB2  0012               	return		;funcret
  9151  002EB4                     __end_of_ResetVariables_I2C:
  9152                           	opt stack 0
  9153                           tblptru	equ	0xFF8
  9154                           tblptrh	equ	0xFF7
  9155                           tblptrl	equ	0xFF6
  9156                           tablat	equ	0xFF5
  9157                           prodh	equ	0xFF4
  9158                           prodl	equ	0xFF3
  9159                           postinc0	equ	0xFEE
  9160                           wreg	equ	0xFE8
  9161                           indf1	equ	0xFE7
  9162                           postdec1	equ	0xFE5
  9163                           fsr1h	equ	0xFE2
  9164                           fsr1l	equ	0xFE1
  9165                           indf2	equ	0xFDF
  9166                           postinc2	equ	0xFDE
  9167                           postdec2	equ	0xFDD
  9168                           fsr2h	equ	0xFDA
  9169                           fsr2l	equ	0xFD9
  9170                           status	equ	0xFD8
  9171                           
  9172 ;; *************** function _ReadI2C *****************
  9173 ;; Defined at:
  9174 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\i2c\i2c_read.c"
  9175 ;; Parameters:    Size  Location     Type
  9176 ;;		None
  9177 ;; Auto vars:     Size  Location     Type
  9178 ;;		None
  9179 ;; Return value:  Size  Location     Type
  9180 ;;                  1    wreg      unsigned char 
  9181 ;; Registers used:
  9182 ;;		wreg, status,2, status,0
  9183 ;; Tracked objects:
  9184 ;;		On entry : 0/0
  9185 ;;		On exit  : 0/0
  9186 ;;		Unchanged: 0/0
  9187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9192 ;;Total ram usage:        0 bytes
  9193 ;; Hardware stack levels used:    1
  9194 ;; Hardware stack levels required when called:    2
  9195 ;; This function calls:
  9196 ;;		Nothing
  9197 ;; This function is called by:
  9198 ;;		_ReadByte_I2C
  9199 ;;		_WriteMANU_I2C
  9200 ;;		_WriteDEVICE_I2C
  9201 ;; This function uses a non-reentrant model
  9202 ;;
  9203                           
  9204                           	psect	text33
  9205  002DC6                     __ptext33:
  9206                           	opt stack 0
  9207  002DC6                     _ReadI2C:
  9208                           	opt stack 26
  9209                           
  9210                           ;incstack = 0
  9211  002DC6  50C6               	movf	4038,w,c	;volatile
  9212  002DC8  0B0F               	andlw	15
  9213  002DCA  0A08               	xorlw	8
  9214  002DCC  B4D8               	btfsc	status,2,c
  9215  002DCE  D004               	goto	l752
  9216  002DD0  50C6               	movf	4038,w,c	;volatile
  9217  002DD2  0B0F               	andlw	15
  9218  002DD4  0A0B               	xorlw	11
  9219  002DD6  B4D8               	btfsc	status,2,c
  9220  002DD8                     l752:
  9221  002DD8  86C5               	bsf	4037,3,c	;volatile
  9222  002DDA                     l753:
  9223  002DDA  A0C7               	btfss	4039,0,c	;volatile
  9224  002DDC  D7FE               	goto	l753
  9225  002DDE  50C9               	movf	4041,w,c	;volatile
  9226  002DE0  0012               	return	
  9227  002DE2                     __end_of_ReadI2C:
  9228                           	opt stack 0
  9229                           tblptru	equ	0xFF8
  9230                           tblptrh	equ	0xFF7
  9231                           tblptrl	equ	0xFF6
  9232                           tablat	equ	0xFF5
  9233                           prodh	equ	0xFF4
  9234                           prodl	equ	0xFF3
  9235                           postinc0	equ	0xFEE
  9236                           wreg	equ	0xFE8
  9237                           indf1	equ	0xFE7
  9238                           postdec1	equ	0xFE5
  9239                           fsr1h	equ	0xFE2
  9240                           fsr1l	equ	0xFE1
  9241                           indf2	equ	0xFDF
  9242                           postinc2	equ	0xFDE
  9243                           postdec2	equ	0xFDD
  9244                           fsr2h	equ	0xFDA
  9245                           fsr2l	equ	0xFD9
  9246                           status	equ	0xFD8
  9247                           
  9248 ;; *************** function _Open_I2C1 *****************
  9249 ;; Defined at:
  9250 ;;		line 2 in file "../I2C1.c"
  9251 ;; Parameters:    Size  Location     Type
  9252 ;;		None
  9253 ;; Auto vars:     Size  Location     Type
  9254 ;;		None
  9255 ;; Return value:  Size  Location     Type
  9256 ;;		None               void
  9257 ;; Registers used:
  9258 ;;		wreg, status,2, status,0, cstack
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 0/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9268 ;;Total ram usage:        0 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; Hardware stack levels required when called:    3
  9271 ;; This function calls:
  9272 ;;		_IdleI2C
  9273 ;;		_OpenI2C
  9274 ;; This function is called by:
  9275 ;;		_output_logic
  9276 ;; This function uses a non-reentrant model
  9277 ;;
  9278                           
  9279                           	psect	text34
  9280  002E70                     __ptext34:
  9281                           	opt stack 0
  9282  002E70                     _Open_I2C1:
  9283                           	opt stack 26
  9284                           
  9285                           ;I2C1.c: 7: SSPADD= 0x27;
  9286                           
  9287                           ;incstack = 0
  9288  002E70  0E27               	movlw	39
  9289  002E72  6EC8               	movwf	4040,c	;volatile
  9290                           
  9291                           ;I2C1.c: 8: OpenI2C(0b00001000, 0b10000000);
  9292  002E74  0E80               	movlw	128
  9293  002E76  6E10               	movwf	OpenI2C@slew,c
  9294  002E78  0E08               	movlw	8
  9295  002E7A  ECC5  F016         	call	_OpenI2C
  9296                           
  9297                           ;I2C1.c: 10: IdleI2C();
  9298  002E7E  EC42  F017         	call	_IdleI2C	;wreg free
  9299  002E82  0012               	return		;funcret
  9300  002E84                     __end_of_Open_I2C1:
  9301                           	opt stack 0
  9302                           tblptru	equ	0xFF8
  9303                           tblptrh	equ	0xFF7
  9304                           tblptrl	equ	0xFF6
  9305                           tablat	equ	0xFF5
  9306                           prodh	equ	0xFF4
  9307                           prodl	equ	0xFF3
  9308                           postinc0	equ	0xFEE
  9309                           wreg	equ	0xFE8
  9310                           indf1	equ	0xFE7
  9311                           postdec1	equ	0xFE5
  9312                           fsr1h	equ	0xFE2
  9313                           fsr1l	equ	0xFE1
  9314                           indf2	equ	0xFDF
  9315                           postinc2	equ	0xFDE
  9316                           postdec2	equ	0xFDD
  9317                           fsr2h	equ	0xFDA
  9318                           fsr2l	equ	0xFD9
  9319                           status	equ	0xFD8
  9320                           
  9321 ;; *************** function _OpenI2C *****************
  9322 ;; Defined at:
  9323 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\i2c\i2c_open.c"
  9324 ;; Parameters:    Size  Location     Type
  9325 ;;  sync_mode       1    wreg     unsigned char 
  9326 ;;  slew            1   15[COMRAM] unsigned char 
  9327 ;; Auto vars:     Size  Location     Type
  9328 ;;  sync_mode       1   16[COMRAM] unsigned char 
  9329 ;; Return value:  Size  Location     Type
  9330 ;;		None               void
  9331 ;; Registers used:
  9332 ;;		wreg, status,2, status,0
  9333 ;; Tracked objects:
  9334 ;;		On entry : 0/0
  9335 ;;		On exit  : 0/0
  9336 ;;		Unchanged: 0/0
  9337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9338 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9339 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9341 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9342 ;;Total ram usage:        2 bytes
  9343 ;; Hardware stack levels used:    1
  9344 ;; Hardware stack levels required when called:    2
  9345 ;; This function calls:
  9346 ;;		Nothing
  9347 ;; This function is called by:
  9348 ;;		_Open_I2C1
  9349 ;; This function uses a non-reentrant model
  9350 ;;
  9351                           
  9352                           	psect	text35
  9353  002D8A                     __ptext35:
  9354                           	opt stack 0
  9355  002D8A                     _OpenI2C:
  9356                           	opt stack 26
  9357                           
  9358                           ;incstack = 0
  9359                           ;OpenI2C@sync_mode stored from wreg
  9360  002D8A  6E11               	movwf	OpenI2C@sync_mode,c
  9361  002D8C  0E3F               	movlw	63
  9362  002D8E  16C7               	andwf	4039,f,c	;volatile
  9363  002D90  0E00               	movlw	0
  9364  002D92  6EC6               	movwf	4038,c	;volatile
  9365  002D94  0E00               	movlw	0
  9366  002D96  6EC5               	movwf	4037,c	;volatile
  9367  002D98  5011               	movf	OpenI2C@sync_mode,w,c
  9368  002D9A  12C6               	iorwf	4038,f,c	;volatile
  9369  002D9C  5010               	movf	OpenI2C@slew,w,c
  9370  002D9E  12C7               	iorwf	4039,f,c	;volatile
  9371  002DA0  8694               	bsf	3988,3,c	;volatile
  9372  002DA2  8894               	bsf	3988,4,c	;volatile
  9373  002DA4  8AC6               	bsf	4038,5,c	;volatile
  9374  002DA6  0012               	return		;funcret
  9375  002DA8                     __end_of_OpenI2C:
  9376                           	opt stack 0
  9377                           tblptru	equ	0xFF8
  9378                           tblptrh	equ	0xFF7
  9379                           tblptrl	equ	0xFF6
  9380                           tablat	equ	0xFF5
  9381                           prodh	equ	0xFF4
  9382                           prodl	equ	0xFF3
  9383                           postinc0	equ	0xFEE
  9384                           wreg	equ	0xFE8
  9385                           indf1	equ	0xFE7
  9386                           postdec1	equ	0xFE5
  9387                           fsr1h	equ	0xFE2
  9388                           fsr1l	equ	0xFE1
  9389                           indf2	equ	0xFDF
  9390                           postinc2	equ	0xFDE
  9391                           postdec2	equ	0xFDD
  9392                           fsr2h	equ	0xFDA
  9393                           fsr2l	equ	0xFD9
  9394                           status	equ	0xFD8
  9395                           
  9396 ;; *************** function _IdleI2C *****************
  9397 ;; Defined at:
  9398 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\i2c\i2c_idle.c"
  9399 ;; Parameters:    Size  Location     Type
  9400 ;;		None
  9401 ;; Auto vars:     Size  Location     Type
  9402 ;;		None
  9403 ;; Return value:  Size  Location     Type
  9404 ;;		None               void
  9405 ;; Registers used:
  9406 ;;		wreg, status,2, status,0
  9407 ;; Tracked objects:
  9408 ;;		On entry : 0/0
  9409 ;;		On exit  : 0/0
  9410 ;;		Unchanged: 0/0
  9411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9414 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9415 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9416 ;;Total ram usage:        1 bytes
  9417 ;; Hardware stack levels used:    1
  9418 ;; Hardware stack levels required when called:    2
  9419 ;; This function calls:
  9420 ;;		Nothing
  9421 ;; This function is called by:
  9422 ;;		_Open_I2C1
  9423 ;;		_ReadByte_I2C
  9424 ;;		_WriteI2C
  9425 ;;		_WriteMANU_I2C
  9426 ;;		_WriteDEVICE_I2C
  9427 ;; This function uses a non-reentrant model
  9428 ;;
  9429                           
  9430                           	psect	text36
  9431  002E84                     __ptext36:
  9432                           	opt stack 0
  9433  002E84                     _IdleI2C:
  9434                           	opt stack 25
  9435  002E84                     l4995:
  9436  002E84  CFC5 F010          	movff	4037,??_IdleI2C	;volatile
  9437  002E88  0E1F               	movlw	31
  9438  002E8A  1610               	andwf	??_IdleI2C,f,c
  9439  002E8C  A4D8               	btfss	status,2,c
  9440  002E8E  D7FA               	goto	l4995
  9441  002E90  A4C7               	btfss	4039,2,c	;volatile
  9442  002E92  0012               	return	
  9443  002E94  D7F7               	goto	l4995
  9444  002E96                     __end_of_IdleI2C:
  9445                           	opt stack 0
  9446                           tblptru	equ	0xFF8
  9447                           tblptrh	equ	0xFF7
  9448                           tblptrl	equ	0xFF6
  9449                           tablat	equ	0xFF5
  9450                           prodh	equ	0xFF4
  9451                           prodl	equ	0xFF3
  9452                           postinc0	equ	0xFEE
  9453                           wreg	equ	0xFE8
  9454                           indf1	equ	0xFE7
  9455                           postdec1	equ	0xFE5
  9456                           fsr1h	equ	0xFE2
  9457                           fsr1l	equ	0xFE1
  9458                           indf2	equ	0xFDF
  9459                           postinc2	equ	0xFDE
  9460                           postdec2	equ	0xFDD
  9461                           fsr2h	equ	0xFDA
  9462                           fsr2l	equ	0xFD9
  9463                           status	equ	0xFD8
  9464                           
  9465 ;; *************** function _InitializeTimer3 *****************
  9466 ;; Defined at:
  9467 ;;		line 11 in file "../TIMER3.c"
  9468 ;; Parameters:    Size  Location     Type
  9469 ;;		None
  9470 ;; Auto vars:     Size  Location     Type
  9471 ;;		None
  9472 ;; Return value:  Size  Location     Type
  9473 ;;		None               void
  9474 ;; Registers used:
  9475 ;;		wreg, status,2
  9476 ;; Tracked objects:
  9477 ;;		On entry : 0/0
  9478 ;;		On exit  : 0/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9485 ;;Total ram usage:        0 bytes
  9486 ;; Hardware stack levels used:    1
  9487 ;; Hardware stack levels required when called:    2
  9488 ;; This function calls:
  9489 ;;		Nothing
  9490 ;; This function is called by:
  9491 ;;		_output_logic
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           	psect	text37
  9496  002D2A                     __ptext37:
  9497                           	opt stack 0
  9498  002D2A                     _InitializeTimer3:
  9499                           	opt stack 27
  9500                           
  9501                           ;TIMER3.c: 13: TMR3IE = 1;
  9502                           
  9503                           ;incstack = 0
  9504  002D2A  82A0               	bsf	4000,1,c	;volatile
  9505                           
  9506                           ;TIMER3.c: 14: T3CON = 0;
  9507  002D2C  0E00               	movlw	0
  9508  002D2E  6EB1               	movwf	4017,c	;volatile
  9509                           
  9510                           ;TIMER3.c: 15: T3CONbits.RD16 = 1;
  9511  002D30  8EB1               	bsf	4017,7,c	;volatile
  9512                           
  9513                           ;TIMER3.c: 16: T3CONbits.T3CCP2 = 0;
  9514  002D32  9CB1               	bcf	4017,6,c	;volatile
  9515                           
  9516                           ;TIMER3.c: 17: T3CONbits.T3CKPS1 = 0;
  9517  002D34  9AB1               	bcf	4017,5,c	;volatile
  9518                           
  9519                           ;TIMER3.c: 18: T3CONbits.T3CKPS0 = 1;
  9520  002D36  88B1               	bsf	4017,4,c	;volatile
  9521                           
  9522                           ;TIMER3.c: 19: T3CONbits.T3CCP1 = 0;
  9523  002D38  96B1               	bcf	4017,3,c	;volatile
  9524                           
  9525                           ;TIMER3.c: 20: T3CONbits.T3SYNC = 0;
  9526  002D3A  94B1               	bcf	4017,2,c	;volatile
  9527                           
  9528                           ;TIMER3.c: 21: T3CONbits.TMR3CS = 0;
  9529  002D3C  92B1               	bcf	4017,1,c	;volatile
  9530                           
  9531                           ;TIMER3.c: 22: T3CONbits.TMR3ON = 1;
  9532  002D3E  80B1               	bsf	4017,0,c	;volatile
  9533                           
  9534                           ;TIMER3.c: 23: TMR3H = 0xF8;
  9535  002D40  0EF8               	movlw	248
  9536  002D42  6EB3               	movwf	4019,c	;volatile
  9537                           
  9538                           ;TIMER3.c: 24: TMR3L = 0x46;
  9539  002D44  0E46               	movlw	70
  9540  002D46  6EB2               	movwf	4018,c	;volatile
  9541                           
  9542                           ;TIMER3.c: 25: TMR3IF = 0;
  9543  002D48  92A1               	bcf	4001,1,c	;volatile
  9544  002D4A  0012               	return		;funcret
  9545  002D4C                     __end_of_InitializeTimer3:
  9546                           	opt stack 0
  9547                           tblptru	equ	0xFF8
  9548                           tblptrh	equ	0xFF7
  9549                           tblptrl	equ	0xFF6
  9550                           tablat	equ	0xFF5
  9551                           prodh	equ	0xFF4
  9552                           prodl	equ	0xFF3
  9553                           postinc0	equ	0xFEE
  9554                           wreg	equ	0xFE8
  9555                           indf1	equ	0xFE7
  9556                           postdec1	equ	0xFE5
  9557                           fsr1h	equ	0xFE2
  9558                           fsr1l	equ	0xFE1
  9559                           indf2	equ	0xFDF
  9560                           postinc2	equ	0xFDE
  9561                           postdec2	equ	0xFDD
  9562                           fsr2h	equ	0xFDA
  9563                           fsr2l	equ	0xFD9
  9564                           status	equ	0xFD8
  9565                           
  9566 ;; *************** function _InitADC *****************
  9567 ;; Defined at:
  9568 ;;		line 11 in file "../ADC.c"
  9569 ;; Parameters:    Size  Location     Type
  9570 ;;		None
  9571 ;; Auto vars:     Size  Location     Type
  9572 ;;		None
  9573 ;; Return value:  Size  Location     Type
  9574 ;;		None               void
  9575 ;; Registers used:
  9576 ;;		None
  9577 ;; Tracked objects:
  9578 ;;		On entry : 0/0
  9579 ;;		On exit  : 0/0
  9580 ;;		Unchanged: 0/0
  9581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9586 ;;Total ram usage:        0 bytes
  9587 ;; Hardware stack levels used:    1
  9588 ;; Hardware stack levels required when called:    2
  9589 ;; This function calls:
  9590 ;;		Nothing
  9591 ;; This function is called by:
  9592 ;;		_output_logic
  9593 ;; This function uses a non-reentrant model
  9594 ;;
  9595                           
  9596                           	psect	text38
  9597  002EC2                     __ptext38:
  9598                           	opt stack 0
  9599  002EC2                     _InitADC:
  9600                           	opt stack 27
  9601                           
  9602                           ;ADC.c: 13: ADON = 1;
  9603                           
  9604                           ;incstack = 0
  9605  002EC2  80C2               	bsf	4034,0,c	;volatile
  9606                           
  9607                           ;ADC.c: 14: ADFM = 1;
  9608  002EC4  8EC0               	bsf	4032,7,c	;volatile
  9609  002EC6  0012               	return		;funcret
  9610  002EC8                     __end_of_InitADC:
  9611                           	opt stack 0
  9612                           tblptru	equ	0xFF8
  9613                           tblptrh	equ	0xFF7
  9614                           tblptrl	equ	0xFF6
  9615                           tablat	equ	0xFF5
  9616                           prodh	equ	0xFF4
  9617                           prodl	equ	0xFF3
  9618                           postinc0	equ	0xFEE
  9619                           wreg	equ	0xFE8
  9620                           indf1	equ	0xFE7
  9621                           postdec1	equ	0xFE5
  9622                           fsr1h	equ	0xFE2
  9623                           fsr1l	equ	0xFE1
  9624                           indf2	equ	0xFDF
  9625                           postinc2	equ	0xFDE
  9626                           postdec2	equ	0xFDD
  9627                           fsr2h	equ	0xFDA
  9628                           fsr2l	equ	0xFD9
  9629                           status	equ	0xFD8
  9630                           
  9631 ;; *************** function _GetSampleADC *****************
  9632 ;; Defined at:
  9633 ;;		line 17 in file "../ADC.c"
  9634 ;; Parameters:    Size  Location     Type
  9635 ;;		None
  9636 ;; Auto vars:     Size  Location     Type
  9637 ;;		None
  9638 ;; Return value:  Size  Location     Type
  9639 ;;                  2   15[COMRAM] unsigned int 
  9640 ;; Registers used:
  9641 ;;		None
  9642 ;; Tracked objects:
  9643 ;;		On entry : 0/0
  9644 ;;		On exit  : 0/0
  9645 ;;		Unchanged: 0/0
  9646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9647 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9650 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9651 ;;Total ram usage:        2 bytes
  9652 ;; Hardware stack levels used:    1
  9653 ;; Hardware stack levels required when called:    2
  9654 ;; This function calls:
  9655 ;;		Nothing
  9656 ;; This function is called by:
  9657 ;;		_output_logic
  9658 ;; This function uses a non-reentrant model
  9659 ;;
  9660                           
  9661                           	psect	text39
  9662  002E18                     __ptext39:
  9663                           	opt stack 0
  9664  002E18                     _GetSampleADC:
  9665                           	opt stack 27
  9666                           
  9667                           ;ADC.c: 19: GO = 1;
  9668                           
  9669                           ;incstack = 0
  9670  002E18  82C2               	bsf	4034,1,c	;volatile
  9671  002E1A                     l362:
  9672  002E1A  B2C2               	btfsc	4034,1,c	;volatile
  9673  002E1C  D7FE               	goto	l362
  9674                           
  9675                           ;ADC.c: 22: }
  9676                           ;ADC.c: 23: Value_AD = ADRES;
  9677  002E1E  CFC3 F0BB          	movff	4035,ADC@Value_AD	;volatile
  9678  002E22  CFC4 F0BC          	movff	4036,ADC@Value_AD+1	;volatile
  9679                           
  9680                           ;ADC.c: 25: return Value_AD;
  9681  002E26  C0BB  F010         	movff	ADC@Value_AD,?_GetSampleADC
  9682  002E2A  C0BC  F011         	movff	ADC@Value_AD+1,?_GetSampleADC+1
  9683  002E2E  0012               	return		;funcret
  9684  002E30                     __end_of_GetSampleADC:
  9685                           	opt stack 0
  9686                           tblptru	equ	0xFF8
  9687                           tblptrh	equ	0xFF7
  9688                           tblptrl	equ	0xFF6
  9689                           tablat	equ	0xFF5
  9690                           prodh	equ	0xFF4
  9691                           prodl	equ	0xFF3
  9692                           postinc0	equ	0xFEE
  9693                           wreg	equ	0xFE8
  9694                           indf1	equ	0xFE7
  9695                           postdec1	equ	0xFE5
  9696                           fsr1h	equ	0xFE2
  9697                           fsr1l	equ	0xFE1
  9698                           indf2	equ	0xFDF
  9699                           postinc2	equ	0xFDE
  9700                           postdec2	equ	0xFDD
  9701                           fsr2h	equ	0xFDA
  9702                           fsr2l	equ	0xFD9
  9703                           status	equ	0xFD8
  9704                           
  9705 ;; *************** function _GetDataSensorDHT22 *****************
  9706 ;; Defined at:
  9707 ;;		line 44 in file "../DHT22.c"
  9708 ;; Parameters:    Size  Location     Type
  9709 ;;		None
  9710 ;; Auto vars:     Size  Location     Type
  9711 ;;  CharTX          0    0        unsigned char [0]
  9712 ;; Return value:  Size  Location     Type
  9713 ;;		None               void
  9714 ;; Registers used:
  9715 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9716 ;; Tracked objects:
  9717 ;;		On entry : 0/0
  9718 ;;		On exit  : 0/0
  9719 ;;		Unchanged: 0/0
  9720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9723 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9724 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9725 ;;Total ram usage:        2 bytes
  9726 ;; Hardware stack levels used:    1
  9727 ;; Hardware stack levels required when called:    5
  9728 ;; This function calls:
  9729 ;;		_SendStringUSART
  9730 ;;		___ftdiv
  9731 ;;		___lwtoft
  9732 ;;		_check_response
  9733 ;;		_read_byte
  9734 ;;		_start_signal
  9735 ;; This function is called by:
  9736 ;;		_output_logic
  9737 ;; This function uses a non-reentrant model
  9738 ;;
  9739                           
  9740                           	psect	text40
  9741  001EB0                     __ptext40:
  9742                           	opt stack 0
  9743  001EB0                     _GetDataSensorDHT22:
  9744                           	opt stack 24
  9745                           
  9746                           ;DHT22.c: 45: char CharTX[];
  9747                           ;DHT22.c: 46: start_signal();
  9748                           
  9749                           ;incstack = 0
  9750  001EB0  ECA6  F016         	call	_start_signal	;wreg free
  9751                           
  9752                           ;DHT22.c: 47: check = check_response();
  9753  001EB4  EC71  F015         	call	_check_response	;wreg free
  9754  001EB8  C010  F045         	movff	?_check_response,_check
  9755  001EBC  C011  F046         	movff	?_check_response+1,_check+1
  9756                           
  9757                           ;DHT22.c: 49: if (!check)
  9758  001EC0  5045               	movf	_check,w,c
  9759  001EC2  1046               	iorwf	_check+1,w,c
  9760  001EC4  A4D8               	btfss	status,2,c
  9761  001EC6  D007               	goto	l6141
  9762                           
  9763                           ;DHT22.c: 50: {
  9764                           ;DHT22.c: 52: SendStringUSART("No response  from the sensor DHT22");
  9765  001EC8  0EB0               	movlw	low STR_15
  9766  001ECA  6E15               	movwf	SendStringUSART@text,c
  9767  001ECC  0EFE               	movlw	high STR_15
  9768  001ECE  6E16               	movwf	SendStringUSART@text+1,c
  9769  001ED0  EC18  F017         	call	_SendStringUSART	;wreg free
  9770                           
  9771                           ;DHT22.c: 54: }
  9772  001ED4  0012               	return	
  9773  001ED6                     l6141:
  9774                           
  9775                           ;DHT22.c: 55: else
  9776                           ;DHT22.c: 56: {
  9777                           ;DHT22.c: 57: RH_Byte1 = read_byte();
  9778  001ED6  ECFC  F013         	call	_read_byte	;wreg free
  9779  001EDA  C010  F0C3         	movff	?_read_byte,_RH_Byte1
  9780  001EDE  C011  F0C4         	movff	?_read_byte+1,_RH_Byte1+1
  9781                           
  9782                           ;DHT22.c: 58: RH_Byte2 = read_byte();
  9783  001EE2  ECFC  F013         	call	_read_byte	;wreg free
  9784  001EE6  C010  F0C5         	movff	?_read_byte,_RH_Byte2
  9785  001EEA  C011  F0C6         	movff	?_read_byte+1,_RH_Byte2+1
  9786                           
  9787                           ;DHT22.c: 59: T_Byte1 = read_byte();
  9788  001EEE  ECFC  F013         	call	_read_byte	;wreg free
  9789  001EF2  C010  F0C9         	movff	?_read_byte,_T_Byte1
  9790  001EF6  C011  F0CA         	movff	?_read_byte+1,_T_Byte1+1
  9791                           
  9792                           ;DHT22.c: 60: T_Byte2 = read_byte();
  9793  001EFA  ECFC  F013         	call	_read_byte	;wreg free
  9794  001EFE  C010  F0CB         	movff	?_read_byte,_T_Byte2
  9795  001F02  C011  F0CC         	movff	?_read_byte+1,_T_Byte2+1
  9796                           
  9797                           ;DHT22.c: 61: CheckSum = read_byte();
  9798  001F06  ECFC  F013         	call	_read_byte	;wreg free
  9799  001F0A  C010  F0BD         	movff	?_read_byte,_CheckSum
  9800  001F0E  C011  F0BE         	movff	?_read_byte+1,_CheckSum+1
  9801                           
  9802                           ;DHT22.c: 62: _delay((unsigned long)((50)*(16000000/4000000.0)));
  9803  001F12  0E42               	movlw	66
  9804  001F14                     u6907:
  9805  001F14  2EE8               	decfsz	wreg,f,c
  9806  001F16  D7FE               	goto	u6907
  9807  001F18  F000 F000          	nop2		;nop
  9808                           
  9809                           ;DHT22.c: 63: TRISBbits.TRISB4 = 0;
  9810  001F1C  9893               	bcf	3987,4,c	;volatile
  9811                           
  9812                           ;DHT22.c: 64: PORTBbits.RB4 = 1;
  9813  001F1E  8881               	bsf	3969,4,c	;volatile
  9814                           
  9815                           ;DHT22.c: 67: rh = RH_Byte2 | (RH_Byte1<<8);
  9816  001F20  0100               	movlb	0	; () banked
  9817  001F22  51C3               	movf	_RH_Byte1& (0+255),w,b
  9818  001F24  6E2C               	movwf	(??_GetDataSensorDHT22+1)& (0+255),c
  9819  001F26  6A2B               	clrf	??_GetDataSensorDHT22& (0+255),c
  9820  001F28  0100               	movlb	0	; () banked
  9821  001F2A  51C5               	movf	_RH_Byte2& (0+255),w,b
  9822  001F2C  102B               	iorwf	??_GetDataSensorDHT22,w,c
  9823  001F2E  0100               	movlb	0	; () banked
  9824  001F30  6FDD               	movwf	_rh& (0+255),b
  9825  001F32  0100               	movlb	0	; () banked
  9826  001F34  51C6               	movf	(_RH_Byte2+1)& (0+255),w,b
  9827  001F36  102C               	iorwf	??_GetDataSensorDHT22+1,w,c
  9828  001F38  0100               	movlb	0	; () banked
  9829  001F3A  6FDE               	movwf	(_rh+1)& (0+255),b
  9830                           
  9831                           ; BSR set to: 0
  9832                           ;DHT22.c: 68: temp = T_Byte2 | (T_Byte1<<8);
  9833  001F3C  0100               	movlb	0	; () banked
  9834  001F3E  51C9               	movf	_T_Byte1& (0+255),w,b
  9835  001F40  6E2C               	movwf	(??_GetDataSensorDHT22+1)& (0+255),c
  9836  001F42  6A2B               	clrf	??_GetDataSensorDHT22& (0+255),c
  9837  001F44  0100               	movlb	0	; () banked
  9838  001F46  51CB               	movf	_T_Byte2& (0+255),w,b
  9839  001F48  102B               	iorwf	??_GetDataSensorDHT22,w,c
  9840  001F4A  6E49               	movwf	_temp,c
  9841  001F4C  0100               	movlb	0	; () banked
  9842  001F4E  51CC               	movf	(_T_Byte2+1)& (0+255),w,b
  9843  001F50  102C               	iorwf	??_GetDataSensorDHT22+1,w,c
  9844  001F52  6E4A               	movwf	_temp+1,c
  9845                           
  9846                           ; BSR set to: 0
  9847                           ;DHT22.c: 69: sign = 0;
  9848  001F54  0E00               	movlw	0
  9849  001F56  0100               	movlb	0	; () banked
  9850  001F58  6FE0               	movwf	(_sign+1)& (0+255),b
  9851  001F5A  0E00               	movlw	0
  9852  001F5C  6FDF               	movwf	_sign& (0+255),b
  9853                           
  9854                           ; BSR set to: 0
  9855                           ;DHT22.c: 70: if (temp>0x8000)
  9856  001F5E  0449               	decf	_temp,w,c
  9857  001F60  0E80               	movlw	128
  9858  001F62  584A               	subwfb	_temp+1,w,c
  9859  001F64  A0D8               	btfss	status,0,c
  9860  001F66  D009               	goto	l6161
  9861                           
  9862                           ; BSR set to: 0
  9863                           ;DHT22.c: 71: { temp &= 0x0fff;
  9864  001F68  0EFF               	movlw	255
  9865  001F6A  1649               	andwf	_temp,f,c
  9866  001F6C  0E0F               	movlw	15
  9867  001F6E  164A               	andwf	_temp+1,f,c
  9868                           
  9869                           ; BSR set to: 0
  9870                           ;DHT22.c: 72: sign = 1;
  9871  001F70  0E00               	movlw	0
  9872  001F72  0100               	movlb	0	; () banked
  9873  001F74  6FE0               	movwf	(_sign+1)& (0+255),b
  9874  001F76  0E01               	movlw	1
  9875  001F78  6FDF               	movwf	_sign& (0+255),b
  9876  001F7A                     l6161:
  9877                           
  9878                           ; BSR set to: 0
  9879                           ;DHT22.c: 73: }
  9880                           ;DHT22.c: 74: Value_rhdht22 = (float)(rh/10.0);
  9881  001F7A  C0DD  F018         	movff	_rh,___lwtoft@c
  9882  001F7E  C0DE  F019         	movff	_rh+1,___lwtoft@c+1
  9883  001F82  EC83  F016         	call	___lwtoft	;wreg free
  9884  001F86  C018  F01C         	movff	?___lwtoft,___ftdiv@f1
  9885  001F8A  C019  F01D         	movff	?___lwtoft+1,___ftdiv@f1+1
  9886  001F8E  C01A  F01E         	movff	?___lwtoft+2,___ftdiv@f1+2
  9887  001F92  0E00               	movlw	0
  9888  001F94  6E1F               	movwf	___ftdiv@f2,c
  9889  001F96  0E20               	movlw	32
  9890  001F98  6E20               	movwf	___ftdiv@f2+1,c
  9891  001F9A  0E41               	movlw	65
  9892  001F9C  6E21               	movwf	___ftdiv@f2+2,c
  9893  001F9E  ECAF  F011         	call	___ftdiv	;wreg free
  9894  001FA2  C01C  F0B5         	movff	?___ftdiv,_Value_rhdht22
  9895  001FA6  C01D  F0B6         	movff	?___ftdiv+1,_Value_rhdht22+1
  9896  001FAA  C01E  F0B7         	movff	?___ftdiv+2,_Value_rhdht22+2
  9897                           
  9898                           ;DHT22.c: 75: Value_tempdht22 = (float)(temp/10.0);
  9899  001FAE  C049  F018         	movff	_temp,___lwtoft@c
  9900  001FB2  C04A  F019         	movff	_temp+1,___lwtoft@c+1
  9901  001FB6  EC83  F016         	call	___lwtoft	;wreg free
  9902  001FBA  C018  F01C         	movff	?___lwtoft,___ftdiv@f1
  9903  001FBE  C019  F01D         	movff	?___lwtoft+1,___ftdiv@f1+1
  9904  001FC2  C01A  F01E         	movff	?___lwtoft+2,___ftdiv@f1+2
  9905  001FC6  0E00               	movlw	0
  9906  001FC8  6E1F               	movwf	___ftdiv@f2,c
  9907  001FCA  0E20               	movlw	32
  9908  001FCC  6E20               	movwf	___ftdiv@f2+1,c
  9909  001FCE  0E41               	movlw	65
  9910  001FD0  6E21               	movwf	___ftdiv@f2+2,c
  9911  001FD2  ECAF  F011         	call	___ftdiv	;wreg free
  9912  001FD6  C01C  F0B8         	movff	?___ftdiv,_Value_tempdht22
  9913  001FDA  C01D  F0B9         	movff	?___ftdiv+1,_Value_tempdht22+1
  9914  001FDE  C01E  F0BA         	movff	?___ftdiv+2,_Value_tempdht22+2
  9915  001FE2  0012               	return	
  9916  001FE4                     __end_of_GetDataSensorDHT22:
  9917                           	opt stack 0
  9918                           tblptru	equ	0xFF8
  9919                           tblptrh	equ	0xFF7
  9920                           tblptrl	equ	0xFF6
  9921                           tablat	equ	0xFF5
  9922                           prodh	equ	0xFF4
  9923                           prodl	equ	0xFF3
  9924                           postinc0	equ	0xFEE
  9925                           wreg	equ	0xFE8
  9926                           indf1	equ	0xFE7
  9927                           postdec1	equ	0xFE5
  9928                           fsr1h	equ	0xFE2
  9929                           fsr1l	equ	0xFE1
  9930                           indf2	equ	0xFDF
  9931                           postinc2	equ	0xFDE
  9932                           postdec2	equ	0xFDD
  9933                           fsr2h	equ	0xFDA
  9934                           fsr2l	equ	0xFD9
  9935                           status	equ	0xFD8
  9936                           
  9937 ;; *************** function _start_signal *****************
  9938 ;; Defined at:
  9939 ;;		line 3 in file "../DHT22.c"
  9940 ;; Parameters:    Size  Location     Type
  9941 ;;		None
  9942 ;; Auto vars:     Size  Location     Type
  9943 ;;		None
  9944 ;; Return value:  Size  Location     Type
  9945 ;;		None               void
  9946 ;; Registers used:
  9947 ;;		wreg
  9948 ;; Tracked objects:
  9949 ;;		On entry : 0/0
  9950 ;;		On exit  : 0/0
  9951 ;;		Unchanged: 0/0
  9952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9955 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9956 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9957 ;;Total ram usage:        1 bytes
  9958 ;; Hardware stack levels used:    1
  9959 ;; Hardware stack levels required when called:    2
  9960 ;; This function calls:
  9961 ;;		Nothing
  9962 ;; This function is called by:
  9963 ;;		_GetDataSensorDHT22
  9964 ;; This function uses a non-reentrant model
  9965 ;;
  9966                           
  9967                           	psect	text41
  9968  002D4C                     __ptext41:
  9969                           	opt stack 0
  9970  002D4C                     _start_signal:
  9971                           	opt stack 26
  9972                           
  9973                           ;incstack = 0
  9974  002D4C  9893               	bcf	3987,4,c	;volatile
  9975                           
  9976                           ;DHT22.c: 5: PORTBbits.RB4 = 0;
  9977  002D4E  9881               	bcf	3969,4,c	;volatile
  9978                           
  9979                           ;DHT22.c: 6: _delay((unsigned long)((18)*(16000000/4000.0)));
  9980  002D50  0E5E               	movlw	94
  9981  002D52  6E10               	movwf	??_start_signal& (0+255),c
  9982  002D54  0E80               	movlw	128
  9983  002D56                     u6917:
  9984  002D56  2EE8               	decfsz	wreg,f,c
  9985  002D58  D7FE               	goto	u6917
  9986  002D5A  2E10               	decfsz	??_start_signal& (0+255),f,c
  9987  002D5C  D7FC               	goto	u6917
  9988  002D5E  F000 F000          	nop2	
  9989                           
  9990                           ;DHT22.c: 7: TRISBbits.TRISB4 = 1;
  9991  002D62  8893               	bsf	3987,4,c	;volatile
  9992                           
  9993                           ;DHT22.c: 8: _delay((unsigned long)((30)*(16000000/4000000.0)));
  9994  002D64  0E28               	movlw	40
  9995  002D66                     u6927:
  9996  002D66  2EE8               	decfsz	wreg,f,c
  9997  002D68  D7FE               	goto	u6927
  9998  002D6A  0012               	return		;funcret
  9999  002D6C                     __end_of_start_signal:
 10000                           	opt stack 0
 10001                           tblptru	equ	0xFF8
 10002                           tblptrh	equ	0xFF7
 10003                           tblptrl	equ	0xFF6
 10004                           tablat	equ	0xFF5
 10005                           prodh	equ	0xFF4
 10006                           prodl	equ	0xFF3
 10007                           postinc0	equ	0xFEE
 10008                           wreg	equ	0xFE8
 10009                           indf1	equ	0xFE7
 10010                           postdec1	equ	0xFE5
 10011                           fsr1h	equ	0xFE2
 10012                           fsr1l	equ	0xFE1
 10013                           indf2	equ	0xFDF
 10014                           postinc2	equ	0xFDE
 10015                           postdec2	equ	0xFDD
 10016                           fsr2h	equ	0xFDA
 10017                           fsr2l	equ	0xFD9
 10018                           status	equ	0xFD8
 10019                           
 10020 ;; *************** function _read_byte *****************
 10021 ;; Defined at:
 10022 ;;		line 30 in file "../DHT22.c"
 10023 ;; Parameters:    Size  Location     Type
 10024 ;;		None
 10025 ;; Auto vars:     Size  Location     Type
 10026 ;;  num             2   20[COMRAM] unsigned short 
 10027 ;; Return value:  Size  Location     Type
 10028 ;;                  2   15[COMRAM] unsigned short 
 10029 ;; Registers used:
 10030 ;;		wreg, status,2, status,0
 10031 ;; Tracked objects:
 10032 ;;		On entry : 0/0
 10033 ;;		On exit  : 0/0
 10034 ;;		Unchanged: 0/0
 10035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10036 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10038 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10039 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10040 ;;Total ram usage:        7 bytes
 10041 ;; Hardware stack levels used:    1
 10042 ;; Hardware stack levels required when called:    2
 10043 ;; This function calls:
 10044 ;;		Nothing
 10045 ;; This function is called by:
 10046 ;;		_GetDataSensorDHT22
 10047 ;; This function uses a non-reentrant model
 10048 ;;
 10049                           
 10050                           	psect	text42
 10051  0027F8                     __ptext42:
 10052                           	opt stack 0
 10053  0027F8                     _read_byte:
 10054                           	opt stack 26
 10055                           
 10056                           ;incstack = 0
 10057  0027F8  0E00               	movlw	0
 10058  0027FA  6E16               	movwf	read_byte@num+1,c
 10059  0027FC  0E00               	movlw	0
 10060  0027FE  6E15               	movwf	read_byte@num,c
 10061                           
 10062                           ;DHT22.c: 32: TRISBbits.TRISB4 = 1;
 10063  002800  8893               	bsf	3987,4,c	;volatile
 10064                           
 10065                           ;DHT22.c: 33: for (i=0; i<8; i++)
 10066  002802  0E00               	movlw	0
 10067  002804  6E48               	movwf	_i+1,c
 10068  002806  0E00               	movlw	0
 10069  002808  6E47               	movwf	_i,c
 10070  00280A  5048               	movf	_i+1,w,c
 10071  00280C  E130               	bnz	l519
 10072  00280E  0E08               	movlw	8
 10073  002810  5C47               	subwf	_i,w,c
 10074  002812  B0D8               	btfsc	status,0,c
 10075  002814  D02C               	goto	l519
 10076  002816                     l520:
 10077  002816  B881               	btfsc	3969,4,c	;volatile
 10078  002818  D004               	goto	l5323
 10079  00281A  5041               	movf	_TOUT,w,c
 10080  00281C  1042               	iorwf	_TOUT+1,w,c
 10081  00281E  B4D8               	btfsc	status,2,c
 10082  002820  D7FA               	goto	l520
 10083  002822                     l5323:
 10084                           
 10085                           ;DHT22.c: 35: TMR2 = 0;
 10086  002822  0E00               	movlw	0
 10087  002824  6ECC               	movwf	4044,c	;volatile
 10088                           
 10089                           ;DHT22.c: 36: TMR2ON = 1;
 10090  002826  84CA               	bsf	4042,2,c	;volatile
 10091  002828                     l525:
 10092  002828  A881               	btfss	3969,4,c	;volatile
 10093  00282A  D004               	goto	l529
 10094  00282C  5041               	movf	_TOUT,w,c
 10095  00282E  1042               	iorwf	_TOUT+1,w,c
 10096  002830  B4D8               	btfsc	status,2,c
 10097  002832  D7FA               	goto	l525
 10098  002834                     l529:
 10099                           
 10100                           ;DHT22.c: 38: TMR2ON = 0;
 10101  002834  94CA               	bcf	4042,2,c	;volatile
 10102                           
 10103                           ;DHT22.c: 39: if (TMR2 > 49)
 10104  002836  0E31               	movlw	49
 10105  002838  64CC               	cpfsgt	4044,c	;volatile
 10106  00283A  D014               	goto	l5333
 10107                           
 10108                           ;DHT22.c: 40: num |= 1<<(7-i);
 10109  00283C  5047               	movf	_i,w,c
 10110  00283E  0800               	sublw	0
 10111  002840  6E12               	movwf	??_read_byte& (0+255),c
 10112  002842  0E07               	movlw	7
 10113  002844  2612               	addwf	??_read_byte,f,c
 10114  002846  0E01               	movlw	1
 10115  002848  6E13               	movwf	(??_read_byte+1)& (0+255),c
 10116  00284A  0E00               	movlw	0
 10117  00284C  6E14               	movwf	(??_read_byte+2)& (0+255),c
 10118  00284E  2A12               	incf	??_read_byte,f,c
 10119  002850  D003               	goto	u5604
 10120  002852                     u5605:
 10121  002852  90D8               	bcf	status,0,c
 10122  002854  3613               	rlcf	??_read_byte+1,f,c
 10123  002856  3614               	rlcf	??_read_byte+2,f,c
 10124  002858                     u5604:
 10125  002858  2E12               	decfsz	??_read_byte,f,c
 10126  00285A  D7FB               	goto	u5605
 10127  00285C  5013               	movf	??_read_byte+1,w,c
 10128  00285E  1215               	iorwf	read_byte@num,f,c
 10129  002860  5014               	movf	??_read_byte+2,w,c
 10130  002862  1216               	iorwf	read_byte@num+1,f,c
 10131  002864                     l5333:
 10132  002864  4A47               	infsnz	_i,f,c
 10133  002866  2A48               	incf	_i+1,f,c
 10134  002868  5048               	movf	_i+1,w,c
 10135  00286A  E101               	bnz	u5610
 10136  00286C  D7D0               	goto	L7
 10137  00286E                     u5610:
 10138  00286E                     l519:
 10139                           
 10140                           ;DHT22.c: 41: }
 10141                           ;DHT22.c: 42: return num;
 10142  00286E  C015  F010         	movff	read_byte@num,?_read_byte
 10143  002872  C016  F011         	movff	read_byte@num+1,?_read_byte+1
 10144  002876  0012               	return		;funcret
 10145  002878                     __end_of_read_byte:
 10146                           	opt stack 0
 10147                           tblptru	equ	0xFF8
 10148                           tblptrh	equ	0xFF7
 10149                           tblptrl	equ	0xFF6
 10150                           tablat	equ	0xFF5
 10151                           prodh	equ	0xFF4
 10152                           prodl	equ	0xFF3
 10153                           postinc0	equ	0xFEE
 10154                           wreg	equ	0xFE8
 10155                           indf1	equ	0xFE7
 10156                           postdec1	equ	0xFE5
 10157                           fsr1h	equ	0xFE2
 10158                           fsr1l	equ	0xFE1
 10159                           indf2	equ	0xFDF
 10160                           postinc2	equ	0xFDE
 10161                           postdec2	equ	0xFDD
 10162                           fsr2h	equ	0xFDA
 10163                           fsr2l	equ	0xFD9
 10164                           status	equ	0xFD8
 10165                           
 10166 ;; *************** function _check_response *****************
 10167 ;; Defined at:
 10168 ;;		line 10 in file "../DHT22.c"
 10169 ;; Parameters:    Size  Location     Type
 10170 ;;		None
 10171 ;; Auto vars:     Size  Location     Type
 10172 ;;		None
 10173 ;; Return value:  Size  Location     Type
 10174 ;;                  2   15[COMRAM] unsigned short 
 10175 ;; Registers used:
 10176 ;;		wreg, status,2, status,0
 10177 ;; Tracked objects:
 10178 ;;		On entry : 0/0
 10179 ;;		On exit  : 0/0
 10180 ;;		Unchanged: 0/0
 10181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10182 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10185 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10186 ;;Total ram usage:        2 bytes
 10187 ;; Hardware stack levels used:    1
 10188 ;; Hardware stack levels required when called:    2
 10189 ;; This function calls:
 10190 ;;		Nothing
 10191 ;; This function is called by:
 10192 ;;		_GetDataSensorDHT22
 10193 ;; This function uses a non-reentrant model
 10194 ;;
 10195                           
 10196                           	psect	text43
 10197  002AE2                     __ptext43:
 10198                           	opt stack 0
 10199  002AE2                     _check_response:
 10200                           	opt stack 26
 10201                           
 10202                           ;incstack = 0
 10203  002AE2  0E00               	movlw	0
 10204  002AE4  6E42               	movwf	_TOUT+1,c
 10205  002AE6  0E00               	movlw	0
 10206  002AE8  6E41               	movwf	_TOUT,c
 10207                           
 10208                           ;DHT22.c: 12: TMR2 = 0;
 10209  002AEA  0E00               	movlw	0
 10210  002AEC  6ECC               	movwf	4044,c	;volatile
 10211                           
 10212                           ;DHT22.c: 13: TMR2ON = 1;
 10213  002AEE  84CA               	bsf	4042,2,c	;volatile
 10214  002AF0                     l501:
 10215  002AF0  B881               	btfsc	3969,4,c	;volatile
 10216  002AF2  D004               	goto	l5289
 10217  002AF4  5041               	movf	_TOUT,w,c
 10218  002AF6  1042               	iorwf	_TOUT+1,w,c
 10219  002AF8  B4D8               	btfsc	status,2,c
 10220  002AFA  D7FA               	goto	l501
 10221  002AFC                     l5289:
 10222                           
 10223                           ;DHT22.c: 15: if (TOUT)
 10224  002AFC  5041               	movf	_TOUT,w,c
 10225  002AFE  1042               	iorwf	_TOUT+1,w,c
 10226  002B00  B4D8               	btfsc	status,2,c
 10227  002B02  D005               	goto	l5297
 10228                           
 10229                           ;DHT22.c: 16: return 0;
 10230  002B04  0E00               	movlw	0
 10231  002B06  6E11               	movwf	?_check_response+1,c
 10232  002B08  0E00               	movlw	0
 10233  002B0A  6E10               	movwf	?_check_response,c
 10234  002B0C  0012               	return	
 10235  002B0E                     l5297:
 10236                           
 10237                           ;DHT22.c: 17: else
 10238                           ;DHT22.c: 18: { TMR2 = 0;
 10239  002B0E  0E00               	movlw	0
 10240  002B10  6ECC               	movwf	4044,c	;volatile
 10241  002B12                     l509:
 10242  002B12  A881               	btfss	3969,4,c	;volatile
 10243  002B14  D004               	goto	l5301
 10244  002B16  5041               	movf	_TOUT,w,c
 10245  002B18  1042               	iorwf	_TOUT+1,w,c
 10246  002B1A  B4D8               	btfsc	status,2,c
 10247  002B1C  D7FA               	goto	l509
 10248  002B1E                     l5301:
 10249                           
 10250                           ;DHT22.c: 20: if (TOUT)
 10251  002B1E  5041               	movf	_TOUT,w,c
 10252  002B20  1042               	iorwf	_TOUT+1,w,c
 10253  002B22  B4D8               	btfsc	status,2,c
 10254  002B24  D005               	goto	l514
 10255                           
 10256                           ;DHT22.c: 21: return 0;
 10257  002B26  0E00               	movlw	0
 10258  002B28  6E11               	movwf	?_check_response+1,c
 10259  002B2A  0E00               	movlw	0
 10260  002B2C  6E10               	movwf	?_check_response,c
 10261  002B2E  0012               	return	
 10262  002B30                     l514:
 10263                           
 10264                           ;DHT22.c: 22: else
 10265                           ;DHT22.c: 23: { TMR2ON = 0;
 10266  002B30  94CA               	bcf	4042,2,c	;volatile
 10267                           
 10268                           ;DHT22.c: 24: return 1;
 10269  002B32  0E00               	movlw	0
 10270  002B34  6E11               	movwf	?_check_response+1,c
 10271  002B36  0E01               	movlw	1
 10272  002B38  6E10               	movwf	?_check_response,c
 10273  002B3A  0012               	return	
 10274  002B3C                     __end_of_check_response:
 10275                           	opt stack 0
 10276                           tblptru	equ	0xFF8
 10277                           tblptrh	equ	0xFF7
 10278                           tblptrl	equ	0xFF6
 10279                           tablat	equ	0xFF5
 10280                           prodh	equ	0xFF4
 10281                           prodl	equ	0xFF3
 10282                           postinc0	equ	0xFEE
 10283                           wreg	equ	0xFE8
 10284                           indf1	equ	0xFE7
 10285                           postdec1	equ	0xFE5
 10286                           fsr1h	equ	0xFE2
 10287                           fsr1l	equ	0xFE1
 10288                           indf2	equ	0xFDF
 10289                           postinc2	equ	0xFDE
 10290                           postdec2	equ	0xFDD
 10291                           fsr2h	equ	0xFDA
 10292                           fsr2l	equ	0xFD9
 10293                           status	equ	0xFD8
 10294                           
 10295 ;; *************** function ___lwtoft *****************
 10296 ;; Defined at:
 10297 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
 10298 ;; Parameters:    Size  Location     Type
 10299 ;;  c               2   23[COMRAM] unsigned int 
 10300 ;; Auto vars:     Size  Location     Type
 10301 ;;		None
 10302 ;; Return value:  Size  Location     Type
 10303 ;;                  3   23[COMRAM] float 
 10304 ;; Registers used:
 10305 ;;		wreg, status,2, status,0, cstack
 10306 ;; Tracked objects:
 10307 ;;		On entry : 0/0
 10308 ;;		On exit  : 0/0
 10309 ;;		Unchanged: 0/0
 10310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10311 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10314 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10315 ;;Total ram usage:        3 bytes
 10316 ;; Hardware stack levels used:    1
 10317 ;; Hardware stack levels required when called:    3
 10318 ;; This function calls:
 10319 ;;		___ftpack
 10320 ;; This function is called by:
 10321 ;;		_output_logic
 10322 ;;		_GetDataSensorDHT22
 10323 ;; This function uses a non-reentrant model
 10324 ;;
 10325                           
 10326                           	psect	text44
 10327  002D06                     __ptext44:
 10328                           	opt stack 0
 10329  002D06                     ___lwtoft:
 10330                           	opt stack 26
 10331                           
 10332                           ;incstack = 0
 10333  002D06  C018  F010         	movff	___lwtoft@c,___ftpack@arg
 10334  002D0A  C019  F011         	movff	___lwtoft@c+1,___ftpack@arg+1
 10335  002D0E  6A12               	clrf	___ftpack@arg+2,c
 10336  002D10  0E8E               	movlw	142
 10337  002D12  6E13               	movwf	___ftpack@exp,c
 10338  002D14  0E00               	movlw	0
 10339  002D16  6E14               	movwf	___ftpack@sign,c
 10340  002D18  EC92  F012         	call	___ftpack	;wreg free
 10341  002D1C  C010  F018         	movff	?___ftpack,?___lwtoft
 10342  002D20  C011  F019         	movff	?___ftpack+1,?___lwtoft+1
 10343  002D24  C012  F01A         	movff	?___ftpack+2,?___lwtoft+2
 10344  002D28  0012               	return	
 10345  002D2A                     __end_of___lwtoft:
 10346                           	opt stack 0
 10347                           tblptru	equ	0xFF8
 10348                           tblptrh	equ	0xFF7
 10349                           tblptrl	equ	0xFF6
 10350                           tablat	equ	0xFF5
 10351                           prodh	equ	0xFF4
 10352                           prodl	equ	0xFF3
 10353                           postinc0	equ	0xFEE
 10354                           wreg	equ	0xFE8
 10355                           indf1	equ	0xFE7
 10356                           postdec1	equ	0xFE5
 10357                           fsr1h	equ	0xFE2
 10358                           fsr1l	equ	0xFE1
 10359                           indf2	equ	0xFDF
 10360                           postinc2	equ	0xFDE
 10361                           postdec2	equ	0xFDD
 10362                           fsr2h	equ	0xFDA
 10363                           fsr2l	equ	0xFD9
 10364                           status	equ	0xFD8
 10365                           
 10366 ;; *************** function ___ftdiv *****************
 10367 ;; Defined at:
 10368 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
 10369 ;; Parameters:    Size  Location     Type
 10370 ;;  f1              3   27[COMRAM] float 
 10371 ;;  f2              3   30[COMRAM] float 
 10372 ;; Auto vars:     Size  Location     Type
 10373 ;;  f3              3   37[COMRAM] float 
 10374 ;;  sign            1   41[COMRAM] unsigned char 
 10375 ;;  exp             1   40[COMRAM] unsigned char 
 10376 ;;  cntr            1   36[COMRAM] unsigned char 
 10377 ;; Return value:  Size  Location     Type
 10378 ;;                  3   27[COMRAM] float 
 10379 ;; Registers used:
 10380 ;;		wreg, status,2, status,0, cstack
 10381 ;; Tracked objects:
 10382 ;;		On entry : 0/0
 10383 ;;		On exit  : 0/0
 10384 ;;		Unchanged: 0/0
 10385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10386 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10387 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10388 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10389 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10390 ;;Total ram usage:       15 bytes
 10391 ;; Hardware stack levels used:    1
 10392 ;; Hardware stack levels required when called:    3
 10393 ;; This function calls:
 10394 ;;		___ftpack
 10395 ;; This function is called by:
 10396 ;;		_ReadByte_I2C
 10397 ;;		_output_logic
 10398 ;;		_GetDataSensorDHT22
 10399 ;; This function uses a non-reentrant model
 10400 ;;
 10401                           
 10402                           	psect	text45
 10403  00235E                     __ptext45:
 10404                           	opt stack 0
 10405  00235E                     ___ftdiv:
 10406                           	opt stack 26
 10407                           
 10408                           ;incstack = 0
 10409  00235E  C01E  F022         	movff	___ftdiv@f1+2,??___ftdiv
 10410  002362  6A23               	clrf	(??___ftdiv+1)& (0+255),c
 10411  002364  6A24               	clrf	(??___ftdiv+2)& (0+255),c
 10412  002366  341D               	rlcf	___ftdiv@f1+1,w,c
 10413  002368  3622               	rlcf	??___ftdiv& (0+255),f,c
 10414  00236A  E301               	bnc	u5871
 10415  00236C  8023               	bsf	(??___ftdiv+1)& (0+255),0,c
 10416  00236E                     u5871:
 10417  00236E  5022               	movf	??___ftdiv,w,c
 10418  002370  6E29               	movwf	___ftdiv@exp,c
 10419  002372  5029               	movf	___ftdiv@exp,w,c
 10420  002374  A4D8               	btfss	status,2,c
 10421  002376  D007               	goto	l5531
 10422  002378  0E00               	movlw	0
 10423  00237A  6E1C               	movwf	?___ftdiv,c
 10424  00237C  0E00               	movlw	0
 10425  00237E  6E1D               	movwf	?___ftdiv+1,c
 10426  002380  0E00               	movlw	0
 10427  002382  6E1E               	movwf	?___ftdiv+2,c
 10428  002384  0012               	return	
 10429  002386                     l5531:
 10430  002386  C021  F022         	movff	___ftdiv@f2+2,??___ftdiv
 10431  00238A  6A23               	clrf	(??___ftdiv+1)& (0+255),c
 10432  00238C  6A24               	clrf	(??___ftdiv+2)& (0+255),c
 10433  00238E  3420               	rlcf	___ftdiv@f2+1,w,c
 10434  002390  3622               	rlcf	??___ftdiv& (0+255),f,c
 10435  002392  E301               	bnc	u5891
 10436  002394  8023               	bsf	(??___ftdiv+1)& (0+255),0,c
 10437  002396                     u5891:
 10438  002396  5022               	movf	??___ftdiv,w,c
 10439  002398  6E2A               	movwf	___ftdiv@sign,c
 10440  00239A  502A               	movf	___ftdiv@sign,w,c
 10441  00239C  A4D8               	btfss	status,2,c
 10442  00239E  D007               	goto	l5537
 10443  0023A0  0E00               	movlw	0
 10444  0023A2  6E1C               	movwf	?___ftdiv,c
 10445  0023A4  0E00               	movlw	0
 10446  0023A6  6E1D               	movwf	?___ftdiv+1,c
 10447  0023A8  0E00               	movlw	0
 10448  0023AA  6E1E               	movwf	?___ftdiv+2,c
 10449  0023AC  0012               	return	
 10450  0023AE                     l5537:
 10451  0023AE  0E00               	movlw	0
 10452  0023B0  6E26               	movwf	___ftdiv@f3,c
 10453  0023B2  0E00               	movlw	0
 10454  0023B4  6E27               	movwf	___ftdiv@f3+1,c
 10455  0023B6  0E00               	movlw	0
 10456  0023B8  6E28               	movwf	___ftdiv@f3+2,c
 10457  0023BA  502A               	movf	___ftdiv@sign,w,c
 10458  0023BC  0F89               	addlw	137
 10459  0023BE  5E29               	subwf	___ftdiv@exp,f,c
 10460  0023C0  C01E  F02A         	movff	___ftdiv@f1+2,___ftdiv@sign
 10461  0023C4  5021               	movf	___ftdiv@f2+2,w,c
 10462  0023C6  1A2A               	xorwf	___ftdiv@sign,f,c
 10463  0023C8  0E80               	movlw	128
 10464  0023CA  162A               	andwf	___ftdiv@sign,f,c
 10465  0023CC  8E1D               	bsf	___ftdiv@f1+1,7,c
 10466  0023CE  0EFF               	movlw	255
 10467  0023D0  161C               	andwf	___ftdiv@f1,f,c
 10468  0023D2  0EFF               	movlw	255
 10469  0023D4  161D               	andwf	___ftdiv@f1+1,f,c
 10470  0023D6  0E00               	movlw	0
 10471  0023D8  161E               	andwf	___ftdiv@f1+2,f,c
 10472  0023DA  8E20               	bsf	___ftdiv@f2+1,7,c
 10473  0023DC  0EFF               	movlw	255
 10474  0023DE  161F               	andwf	___ftdiv@f2,f,c
 10475  0023E0  0EFF               	movlw	255
 10476  0023E2  1620               	andwf	___ftdiv@f2+1,f,c
 10477  0023E4  0E00               	movlw	0
 10478  0023E6  1621               	andwf	___ftdiv@f2+2,f,c
 10479  0023E8  0E18               	movlw	24
 10480  0023EA  6E25               	movwf	___ftdiv@cntr,c
 10481  0023EC                     l5557:
 10482  0023EC  90D8               	bcf	status,0,c
 10483  0023EE  3626               	rlcf	___ftdiv@f3,f,c
 10484  0023F0  3627               	rlcf	___ftdiv@f3+1,f,c
 10485  0023F2  3628               	rlcf	___ftdiv@f3+2,f,c
 10486  0023F4  501F               	movf	___ftdiv@f2,w,c
 10487  0023F6  5C1C               	subwf	___ftdiv@f1,w,c
 10488  0023F8  5020               	movf	___ftdiv@f2+1,w,c
 10489  0023FA  581D               	subwfb	___ftdiv@f1+1,w,c
 10490  0023FC  5021               	movf	___ftdiv@f2+2,w,c
 10491  0023FE  581E               	subwfb	___ftdiv@f1+2,w,c
 10492  002400  A0D8               	btfss	status,0,c
 10493  002402  D007               	goto	l1090
 10494  002404  501F               	movf	___ftdiv@f2,w,c
 10495  002406  5E1C               	subwf	___ftdiv@f1,f,c
 10496  002408  5020               	movf	___ftdiv@f2+1,w,c
 10497  00240A  5A1D               	subwfb	___ftdiv@f1+1,f,c
 10498  00240C  5021               	movf	___ftdiv@f2+2,w,c
 10499  00240E  5A1E               	subwfb	___ftdiv@f1+2,f,c
 10500  002410  8026               	bsf	___ftdiv@f3,0,c
 10501  002412                     l1090:
 10502  002412  90D8               	bcf	status,0,c
 10503  002414  361C               	rlcf	___ftdiv@f1,f,c
 10504  002416  361D               	rlcf	___ftdiv@f1+1,f,c
 10505  002418  361E               	rlcf	___ftdiv@f1+2,f,c
 10506  00241A  2E25               	decfsz	___ftdiv@cntr,f,c
 10507  00241C  D7E7               	goto	l5557
 10508  00241E  C026  F010         	movff	___ftdiv@f3,___ftpack@arg
 10509  002422  C027  F011         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10510  002426  C028  F012         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10511  00242A  C029  F013         	movff	___ftdiv@exp,___ftpack@exp
 10512  00242E  C02A  F014         	movff	___ftdiv@sign,___ftpack@sign
 10513  002432  EC92  F012         	call	___ftpack	;wreg free
 10514  002436  C010  F01C         	movff	?___ftpack,?___ftdiv
 10515  00243A  C011  F01D         	movff	?___ftpack+1,?___ftdiv+1
 10516  00243E  C012  F01E         	movff	?___ftpack+2,?___ftdiv+2
 10517  002442  0012               	return	
 10518  002444                     __end_of___ftdiv:
 10519                           	opt stack 0
 10520                           tblptru	equ	0xFF8
 10521                           tblptrh	equ	0xFF7
 10522                           tblptrl	equ	0xFF6
 10523                           tablat	equ	0xFF5
 10524                           prodh	equ	0xFF4
 10525                           prodl	equ	0xFF3
 10526                           postinc0	equ	0xFEE
 10527                           wreg	equ	0xFE8
 10528                           indf1	equ	0xFE7
 10529                           postdec1	equ	0xFE5
 10530                           fsr1h	equ	0xFE2
 10531                           fsr1l	equ	0xFE1
 10532                           indf2	equ	0xFDF
 10533                           postinc2	equ	0xFDE
 10534                           postdec2	equ	0xFDD
 10535                           fsr2h	equ	0xFDA
 10536                           fsr2l	equ	0xFD9
 10537                           status	equ	0xFD8
 10538                           
 10539 ;; *************** function ___ftpack *****************
 10540 ;; Defined at:
 10541 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 10542 ;; Parameters:    Size  Location     Type
 10543 ;;  arg             3   15[COMRAM] unsigned um
 10544 ;;  exp             1   18[COMRAM] unsigned char 
 10545 ;;  sign            1   19[COMRAM] unsigned char 
 10546 ;; Auto vars:     Size  Location     Type
 10547 ;;		None
 10548 ;; Return value:  Size  Location     Type
 10549 ;;                  3   15[COMRAM] float 
 10550 ;; Registers used:
 10551 ;;		wreg, status,2, status,0
 10552 ;; Tracked objects:
 10553 ;;		On entry : 0/0
 10554 ;;		On exit  : 0/0
 10555 ;;		Unchanged: 0/0
 10556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10557 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10559 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10560 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10561 ;;Total ram usage:        8 bytes
 10562 ;; Hardware stack levels used:    1
 10563 ;; Hardware stack levels required when called:    2
 10564 ;; This function calls:
 10565 ;;		Nothing
 10566 ;; This function is called by:
 10567 ;;		___awtoft
 10568 ;;		___ftadd
 10569 ;;		___ftdiv
 10570 ;;		___ftmul
 10571 ;;		___lbtoft
 10572 ;;		___lltoft
 10573 ;;		___lwtoft
 10574 ;; This function uses a non-reentrant model
 10575 ;;
 10576                           
 10577                           	psect	text46
 10578  002524                     __ptext46:
 10579                           	opt stack 0
 10580  002524                     ___ftpack:
 10581                           	opt stack 24
 10582                           
 10583                           ;incstack = 0
 10584  002524  5013               	movf	___ftpack@exp,w,c
 10585  002526  B4D8               	btfsc	status,2,c
 10586  002528  D005               	goto	l4961
 10587  00252A  5010               	movf	___ftpack@arg,w,c
 10588  00252C  1011               	iorwf	___ftpack@arg+1,w,c
 10589  00252E  1012               	iorwf	___ftpack@arg+2,w,c
 10590  002530  A4D8               	btfss	status,2,c
 10591  002532  D00C               	goto	l4967
 10592  002534                     l4961:
 10593  002534  0E00               	movlw	0
 10594  002536  6E10               	movwf	?___ftpack,c
 10595  002538  0E00               	movlw	0
 10596  00253A  6E11               	movwf	?___ftpack+1,c
 10597  00253C  0E00               	movlw	0
 10598  00253E  6E12               	movwf	?___ftpack+2,c
 10599  002540  0012               	return	
 10600  002542                     l4965:
 10601  002542  2A13               	incf	___ftpack@exp,f,c
 10602  002544  90D8               	bcf	status,0,c
 10603  002546  3212               	rrcf	___ftpack@arg+2,f,c
 10604  002548  3211               	rrcf	___ftpack@arg+1,f,c
 10605  00254A  3210               	rrcf	___ftpack@arg,f,c
 10606  00254C                     l4967:
 10607  00254C  0E00               	movlw	0
 10608  00254E  1410               	andwf	___ftpack@arg,w,c
 10609  002550  6E15               	movwf	??___ftpack& (0+255),c
 10610  002552  0E00               	movlw	0
 10611  002554  1411               	andwf	___ftpack@arg+1,w,c
 10612  002556  6E16               	movwf	(??___ftpack+1)& (0+255),c
 10613  002558  0EFE               	movlw	254
 10614  00255A  1412               	andwf	___ftpack@arg+2,w,c
 10615  00255C  6E17               	movwf	(??___ftpack+2)& (0+255),c
 10616  00255E  5015               	movf	??___ftpack,w,c
 10617  002560  1016               	iorwf	??___ftpack+1,w,c
 10618  002562  1017               	iorwf	??___ftpack+2,w,c
 10619  002564  B4D8               	btfsc	status,2,c
 10620  002566  D00C               	goto	l4973
 10621  002568  D7EC               	goto	l4965
 10622  00256A                     l4969:
 10623  00256A  2A13               	incf	___ftpack@exp,f,c
 10624  00256C  0E01               	movlw	1
 10625  00256E  2610               	addwf	___ftpack@arg,f,c
 10626  002570  0E00               	movlw	0
 10627  002572  2211               	addwfc	___ftpack@arg+1,f,c
 10628  002574  0E00               	movlw	0
 10629  002576  2212               	addwfc	___ftpack@arg+2,f,c
 10630  002578  90D8               	bcf	status,0,c
 10631  00257A  3212               	rrcf	___ftpack@arg+2,f,c
 10632  00257C  3211               	rrcf	___ftpack@arg+1,f,c
 10633  00257E  3210               	rrcf	___ftpack@arg,f,c
 10634  002580                     l4973:
 10635  002580  0E00               	movlw	0
 10636  002582  1410               	andwf	___ftpack@arg,w,c
 10637  002584  6E15               	movwf	??___ftpack& (0+255),c
 10638  002586  0E00               	movlw	0
 10639  002588  1411               	andwf	___ftpack@arg+1,w,c
 10640  00258A  6E16               	movwf	(??___ftpack+1)& (0+255),c
 10641  00258C  0EFF               	movlw	255
 10642  00258E  1412               	andwf	___ftpack@arg+2,w,c
 10643  002590  6E17               	movwf	(??___ftpack+2)& (0+255),c
 10644  002592  5015               	movf	??___ftpack,w,c
 10645  002594  1016               	iorwf	??___ftpack+1,w,c
 10646  002596  1017               	iorwf	??___ftpack+2,w,c
 10647  002598  B4D8               	btfsc	status,2,c
 10648  00259A  D006               	goto	l4977
 10649  00259C  D7E6               	goto	l4969
 10650  00259E                     l4975:
 10651  00259E  0613               	decf	___ftpack@exp,f,c
 10652  0025A0  90D8               	bcf	status,0,c
 10653  0025A2  3610               	rlcf	___ftpack@arg,f,c
 10654  0025A4  3611               	rlcf	___ftpack@arg+1,f,c
 10655  0025A6  3612               	rlcf	___ftpack@arg+2,f,c
 10656  0025A8                     l4977:
 10657  0025A8  BE11               	btfsc	___ftpack@arg+1,7,c
 10658  0025AA  D003               	goto	l1032
 10659  0025AC  0E02               	movlw	2
 10660  0025AE  6013               	cpfslt	___ftpack@exp,c
 10661  0025B0  D7F6               	goto	l4975
 10662  0025B2                     l1032:
 10663  0025B2  A013               	btfss	___ftpack@exp,0,c
 10664  0025B4  9E11               	bcf	___ftpack@arg+1,7,c
 10665  0025B6  90D8               	bcf	status,0,c
 10666  0025B8  3213               	rrcf	___ftpack@exp,f,c
 10667  0025BA  5013               	movf	___ftpack@exp,w,c
 10668  0025BC  1212               	iorwf	___ftpack@arg+2,f,c
 10669  0025BE  5014               	movf	___ftpack@sign,w,c
 10670  0025C0  A4D8               	btfss	status,2,c
 10671  0025C2  8E12               	bsf	___ftpack@arg+2,7,c
 10672  0025C4  C010  F010         	movff	___ftpack@arg,?___ftpack
 10673  0025C8  C011  F011         	movff	___ftpack@arg+1,?___ftpack+1
 10674  0025CC  C012  F012         	movff	___ftpack@arg+2,?___ftpack+2
 10675  0025D0  0012               	return	
 10676  0025D2                     __end_of___ftpack:
 10677                           	opt stack 0
 10678                           tblptru	equ	0xFF8
 10679                           tblptrh	equ	0xFF7
 10680                           tblptrl	equ	0xFF6
 10681                           tablat	equ	0xFF5
 10682                           prodh	equ	0xFF4
 10683                           prodl	equ	0xFF3
 10684                           postinc0	equ	0xFEE
 10685                           wreg	equ	0xFE8
 10686                           indf1	equ	0xFE7
 10687                           postdec1	equ	0xFE5
 10688                           fsr1h	equ	0xFE2
 10689                           fsr1l	equ	0xFE1
 10690                           indf2	equ	0xFDF
 10691                           postinc2	equ	0xFDE
 10692                           postdec2	equ	0xFDD
 10693                           fsr2h	equ	0xFDA
 10694                           fsr2l	equ	0xFD9
 10695                           status	equ	0xFD8
 10696                           
 10697 ;; *************** function _CloseI2C *****************
 10698 ;; Defined at:
 10699 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\i2c\i2c_clos.c"
 10700 ;; Parameters:    Size  Location     Type
 10701 ;;		None
 10702 ;; Auto vars:     Size  Location     Type
 10703 ;;		None
 10704 ;; Return value:  Size  Location     Type
 10705 ;;		None               void
 10706 ;; Registers used:
 10707 ;;		status,2, status,0
 10708 ;; Tracked objects:
 10709 ;;		On entry : 0/0
 10710 ;;		On exit  : 0/0
 10711 ;;		Unchanged: 0/0
 10712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10717 ;;Total ram usage:        0 bytes
 10718 ;; Hardware stack levels used:    1
 10719 ;; Hardware stack levels required when called:    2
 10720 ;; This function calls:
 10721 ;;		Nothing
 10722 ;; This function is called by:
 10723 ;;		_output_logic
 10724 ;; This function uses a non-reentrant model
 10725 ;;
 10726                           
 10727                           	psect	text47
 10728  002ECC                     __ptext47:
 10729                           	opt stack 0
 10730  002ECC                     _CloseI2C:
 10731                           	opt stack 27
 10732                           
 10733                           ;incstack = 0
 10734  002ECC  9AC6               	bcf	4038,5,c	;volatile
 10735  002ECE  0012               	return		;funcret
 10736  002ED0                     __end_of_CloseI2C:
 10737                           	opt stack 0
 10738                           tblptru	equ	0xFF8
 10739                           tblptrh	equ	0xFF7
 10740                           tblptrl	equ	0xFF6
 10741                           tablat	equ	0xFF5
 10742                           prodh	equ	0xFF4
 10743                           prodl	equ	0xFF3
 10744                           postinc0	equ	0xFEE
 10745                           wreg	equ	0xFE8
 10746                           indf1	equ	0xFE7
 10747                           postdec1	equ	0xFE5
 10748                           fsr1h	equ	0xFE2
 10749                           fsr1l	equ	0xFE1
 10750                           indf2	equ	0xFDF
 10751                           postinc2	equ	0xFDE
 10752                           postdec2	equ	0xFDD
 10753                           fsr2h	equ	0xFDA
 10754                           fsr2l	equ	0xFD9
 10755                           status	equ	0xFD8
 10756                           
 10757 ;; *************** function _init_system *****************
 10758 ;; Defined at:
 10759 ;;		line 11 in file "../init_system.c"
 10760 ;; Parameters:    Size  Location     Type
 10761 ;;		None
 10762 ;; Auto vars:     Size  Location     Type
 10763 ;;		None
 10764 ;; Return value:  Size  Location     Type
 10765 ;;		None               void
 10766 ;; Registers used:
 10767 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10768 ;; Tracked objects:
 10769 ;;		On entry : 0/0
 10770 ;;		On exit  : 0/0
 10771 ;;		Unchanged: 0/0
 10772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10777 ;;Total ram usage:        0 bytes
 10778 ;; Hardware stack levels used:    1
 10779 ;; Hardware stack levels required when called:    6
 10780 ;; This function calls:
 10781 ;;		_InitUSART
 10782 ;; This function is called by:
 10783 ;;		_main
 10784 ;; This function uses a non-reentrant model
 10785 ;;
 10786                           
 10787                           	psect	text48
 10788  002BC8                     __ptext48:
 10789                           	opt stack 0
 10790  002BC8                     _init_system:
 10791                           	opt stack 24
 10792                           
 10793                           ;init_system.c: 64: TRISA = 0b00000011;
 10794                           
 10795                           ;incstack = 0
 10796  002BC8  0E03               	movlw	3
 10797  002BCA  6E92               	movwf	3986,c	;volatile
 10798                           
 10799                           ;init_system.c: 65: LATA = 0x00;
 10800  002BCC  0E00               	movlw	0
 10801  002BCE  6E89               	movwf	3977,c	;volatile
 10802                           
 10803                           ;init_system.c: 66: PORTA = 0x00;
 10804  002BD0  0E00               	movlw	0
 10805  002BD2  6E80               	movwf	3968,c	;volatile
 10806                           
 10807                           ;init_system.c: 68: TRISB = 0b00001001;
 10808  002BD4  0E09               	movlw	9
 10809  002BD6  6E93               	movwf	3987,c	;volatile
 10810                           
 10811                           ;init_system.c: 69: LATB = 0x00;
 10812  002BD8  0E00               	movlw	0
 10813  002BDA  6E8A               	movwf	3978,c	;volatile
 10814                           
 10815                           ;init_system.c: 70: PORTB = 0xFF;
 10816  002BDC  6881               	setf	3969,c	;volatile
 10817                           
 10818                           ;init_system.c: 72: TRISC = 0b11111000;
 10819  002BDE  0EF8               	movlw	248
 10820  002BE0  6E94               	movwf	3988,c	;volatile
 10821                           
 10822                           ;init_system.c: 73: LATC = 0x00;
 10823  002BE2  0E00               	movlw	0
 10824  002BE4  6E8B               	movwf	3979,c	;volatile
 10825                           
 10826                           ;init_system.c: 74: PORTC = 0b00000111;
 10827  002BE6  0E07               	movlw	7
 10828  002BE8  6E82               	movwf	3970,c	;volatile
 10829                           
 10830                           ;init_system.c: 78: GIE = 1;
 10831  002BEA  8EF2               	bsf	intcon,7,c	;volatile
 10832                           
 10833                           ;init_system.c: 79: PEIE = 1;
 10834  002BEC  8CF2               	bsf	intcon,6,c	;volatile
 10835                           
 10836                           ;init_system.c: 80: INTCONbits.INT0IF = 0;
 10837  002BEE  92F2               	bcf	intcon,1,c	;volatile
 10838                           
 10839                           ;init_system.c: 81: INTCON2bits.INTEDG0 = 0;
 10840  002BF0  9CF1               	bcf	intcon2,6,c	;volatile
 10841                           
 10842                           ;init_system.c: 82: INTCONbits.INT0IE = 1;
 10843  002BF2  88F2               	bsf	intcon,4,c	;volatile
 10844                           
 10845                           ;init_system.c: 83: INTCON2bits.RBPU = 0;
 10846  002BF4  9EF1               	bcf	intcon2,7,c	;volatile
 10847                           
 10848                           ;init_system.c: 87: RBIE = 1;
 10849  002BF6  86F2               	bsf	intcon,3,c	;volatile
 10850                           
 10851                           ;init_system.c: 88: RBIP = 1;
 10852  002BF8  80F1               	bsf	intcon2,0,c	;volatile
 10853                           
 10854                           ;init_system.c: 89: OSCCON = 0b01110000;
 10855  002BFA  0E70               	movlw	112
 10856  002BFC  6ED3               	movwf	4051,c	;volatile
 10857                           
 10858                           ;init_system.c: 91: InitUSART();
 10859  002BFE  ECF1  F016         	call	_InitUSART	;wreg free
 10860  002C02  0012               	return		;funcret
 10861  002C04                     __end_of_init_system:
 10862                           	opt stack 0
 10863                           tblptru	equ	0xFF8
 10864                           tblptrh	equ	0xFF7
 10865                           tblptrl	equ	0xFF6
 10866                           tablat	equ	0xFF5
 10867                           prodh	equ	0xFF4
 10868                           prodl	equ	0xFF3
 10869                           intcon	equ	0xFF2
 10870                           intcon2	equ	0xFF1
 10871                           postinc0	equ	0xFEE
 10872                           wreg	equ	0xFE8
 10873                           indf1	equ	0xFE7
 10874                           postdec1	equ	0xFE5
 10875                           fsr1h	equ	0xFE2
 10876                           fsr1l	equ	0xFE1
 10877                           indf2	equ	0xFDF
 10878                           postinc2	equ	0xFDE
 10879                           postdec2	equ	0xFDD
 10880                           fsr2h	equ	0xFDA
 10881                           fsr2l	equ	0xFD9
 10882                           status	equ	0xFD8
 10883                           
 10884 ;; *************** function _InitUSART *****************
 10885 ;; Defined at:
 10886 ;;		line 10 in file "../USART.c"
 10887 ;; Parameters:    Size  Location     Type
 10888 ;;		None
 10889 ;; Auto vars:     Size  Location     Type
 10890 ;;		None
 10891 ;; Return value:  Size  Location     Type
 10892 ;;                  2  405[None  ] int 
 10893 ;; Registers used:
 10894 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10895 ;; Tracked objects:
 10896 ;;		On entry : 0/0
 10897 ;;		On exit  : 0/0
 10898 ;;		Unchanged: 0/0
 10899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10904 ;;Total ram usage:        0 bytes
 10905 ;; Hardware stack levels used:    1
 10906 ;; Hardware stack levels required when called:    5
 10907 ;; This function calls:
 10908 ;;		_OpenUSART
 10909 ;;		_SendStringUSART
 10910 ;; This function is called by:
 10911 ;;		_init_system
 10912 ;; This function uses a non-reentrant model
 10913 ;;
 10914                           
 10915                           	psect	text49
 10916  002DE2                     __ptext49:
 10917                           	opt stack 0
 10918  002DE2                     _InitUSART:
 10919                           	opt stack 24
 10920                           
 10921                           ;USART.c: 11: OpenUSART(0b01111111 &
 10922                           ;USART.c: 12: 0b11111111 &
 10923                           ;USART.c: 13: 0b11111110 &
 10924                           ;USART.c: 14: 0b11111101 &
 10925                           ;USART.c: 15: 0b11111111 &
 10926                           ;USART.c: 16: 0b11111111, 103);
 10927                           
 10928                           ;incstack = 0
 10929  002DE2  0E00               	movlw	0
 10930  002DE4  6E11               	movwf	OpenUSART@spbrg+1,c
 10931  002DE6  0E67               	movlw	103
 10932  002DE8  6E10               	movwf	OpenUSART@spbrg,c
 10933  002DEA  0E7C               	movlw	124
 10934  002DEC  EC13  F015         	call	_OpenUSART
 10935                           
 10936                           ;USART.c: 19: SendStringUSART("Idle mode ON");
 10937  002DF0  0EDC               	movlw	low STR_13
 10938  002DF2  6E15               	movwf	SendStringUSART@text,c
 10939  002DF4  0EFF               	movlw	high STR_13
 10940  002DF6  6E16               	movwf	SendStringUSART@text+1,c
 10941  002DF8  EC18  F017         	call	_SendStringUSART	;wreg free
 10942  002DFC  0012               	return		;funcret
 10943  002DFE                     __end_of_InitUSART:
 10944                           	opt stack 0
 10945                           tblptru	equ	0xFF8
 10946                           tblptrh	equ	0xFF7
 10947                           tblptrl	equ	0xFF6
 10948                           tablat	equ	0xFF5
 10949                           prodh	equ	0xFF4
 10950                           prodl	equ	0xFF3
 10951                           intcon	equ	0xFF2
 10952                           intcon2	equ	0xFF1
 10953                           postinc0	equ	0xFEE
 10954                           wreg	equ	0xFE8
 10955                           indf1	equ	0xFE7
 10956                           postdec1	equ	0xFE5
 10957                           fsr1h	equ	0xFE2
 10958                           fsr1l	equ	0xFE1
 10959                           indf2	equ	0xFDF
 10960                           postinc2	equ	0xFDE
 10961                           postdec2	equ	0xFDD
 10962                           fsr2h	equ	0xFDA
 10963                           fsr2l	equ	0xFD9
 10964                           status	equ	0xFD8
 10965                           
 10966 ;; *************** function _SendStringUSART *****************
 10967 ;; Defined at:
 10968 ;;		line 23 in file "../USART.c"
 10969 ;; Parameters:    Size  Location     Type
 10970 ;;  text            2   20[COMRAM] PTR unsigned char 
 10971 ;;		 -> STR_15(35), STR_14(13), STR_13(13), STR_12(9), 
 10972 ;;		 -> STR_10(12), CharTX2(12), STR_8(36), STR_3(19), 
 10973 ;;		 -> CharTX(12), STR_1(22), 
 10974 ;; Auto vars:     Size  Location     Type
 10975 ;;		None
 10976 ;; Return value:  Size  Location     Type
 10977 ;;		None               void
 10978 ;; Registers used:
 10979 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10980 ;; Tracked objects:
 10981 ;;		On entry : 0/0
 10982 ;;		On exit  : 0/0
 10983 ;;		Unchanged: 0/0
 10984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10985 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10988 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10989 ;;Total ram usage:        2 bytes
 10990 ;; Hardware stack levels used:    1
 10991 ;; Hardware stack levels required when called:    4
 10992 ;; This function calls:
 10993 ;;		_Salto_Enter
 10994 ;;		_putsUSART
 10995 ;; This function is called by:
 10996 ;;		_output_logic
 10997 ;;		_InitUSART
 10998 ;;		_GetDataSensorDHT22
 10999 ;; This function uses a non-reentrant model
 11000 ;;
 11001                           
 11002                           	psect	text50
 11003  002E30                     __ptext50:
 11004                           	opt stack 0
 11005  002E30                     _SendStringUSART:
 11006                           	opt stack 25
 11007  002E30                     l426:
 11008  002E30  A2AC               	btfss	4012,1,c	;volatile
 11009  002E32  D7FE               	goto	l426
 11010                           
 11011                           ;USART.c: 26: putsUSART(text);
 11012  002E34  C015  F011         	movff	SendStringUSART@text,putsUSART@data
 11013  002E38  C016  F012         	movff	SendStringUSART@text+1,putsUSART@data+1
 11014  002E3C  ECE3  F014         	call	_putsUSART	;wreg free
 11015                           
 11016                           ;USART.c: 27: Salto_Enter();
 11017  002E40  EC23  F017         	call	_Salto_Enter	;wreg free
 11018  002E44  0012               	return		;funcret
 11019  002E46                     __end_of_SendStringUSART:
 11020                           	opt stack 0
 11021                           tblptru	equ	0xFF8
 11022                           tblptrh	equ	0xFF7
 11023                           tblptrl	equ	0xFF6
 11024                           tablat	equ	0xFF5
 11025                           prodh	equ	0xFF4
 11026                           prodl	equ	0xFF3
 11027                           intcon	equ	0xFF2
 11028                           intcon2	equ	0xFF1
 11029                           postinc0	equ	0xFEE
 11030                           wreg	equ	0xFE8
 11031                           indf1	equ	0xFE7
 11032                           postdec1	equ	0xFE5
 11033                           fsr1h	equ	0xFE2
 11034                           fsr1l	equ	0xFE1
 11035                           indf2	equ	0xFDF
 11036                           postinc2	equ	0xFDE
 11037                           postdec2	equ	0xFDD
 11038                           fsr2h	equ	0xFDA
 11039                           fsr2l	equ	0xFD9
 11040                           status	equ	0xFD8
 11041                           
 11042 ;; *************** function _putsUSART *****************
 11043 ;; Defined at:
 11044 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\USART\uputs.c"
 11045 ;; Parameters:    Size  Location     Type
 11046 ;;  data            2   16[COMRAM] PTR unsigned char 
 11047 ;;		 -> STR_15(35), STR_14(13), STR_13(13), STR_12(9), 
 11048 ;;		 -> STR_10(12), CharTX2(12), STR_8(36), STR_3(19), 
 11049 ;;		 -> CharTX(12), STR_1(22), 
 11050 ;; Auto vars:     Size  Location     Type
 11051 ;;		None
 11052 ;; Return value:  Size  Location     Type
 11053 ;;		None               void
 11054 ;; Registers used:
 11055 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11056 ;; Tracked objects:
 11057 ;;		On entry : 0/0
 11058 ;;		On exit  : 0/0
 11059 ;;		Unchanged: 0/0
 11060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11061 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11063 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11064 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11065 ;;Total ram usage:        4 bytes
 11066 ;; Hardware stack levels used:    1
 11067 ;; Hardware stack levels required when called:    3
 11068 ;; This function calls:
 11069 ;;		_WriteUSART
 11070 ;; This function is called by:
 11071 ;;		_SendStringUSART
 11072 ;; This function uses a non-reentrant model
 11073 ;;
 11074                           
 11075                           	psect	text51
 11076  0029C6                     __ptext51:
 11077                           	opt stack 0
 11078  0029C6                     _putsUSART:
 11079                           	opt stack 25
 11080  0029C6                     l685:
 11081  0029C6  A2AC               	btfss	4012,1,c	;volatile
 11082  0029C8  D7FE               	goto	l685
 11083  0029CA  C011  FFF6         	movff	putsUSART@data,tblptrl
 11084  0029CE  C012  FFF7         	movff	putsUSART@data+1,tblptrh
 11085  0029D2  0E00               	movlw	low (__mediumconst shr (0+16))
 11086  0029D4  6EF8               	movwf	tblptru,c
 11087  0029D6  0E0F               	movlw	(high __ramtop+-1)
 11088  0029D8  64F7               	cpfsgt	tblptrh,c
 11089  0029DA  D003               	bra	u4907
 11090  0029DC  0008               	tblrd		*
 11091  0029DE  50F5               	movf	tablat,w,c
 11092  0029E0  D005               	bra	u4900
 11093  0029E2                     u4907:
 11094  0029E2  CFF6 FFE9          	movff	tblptrl,fsr0l
 11095  0029E6  CFF7 FFEA          	movff	tblptrh,fsr0h
 11096  0029EA  50EF               	movf	indf0,w,c
 11097  0029EC                     u4900:
 11098  0029EC  EC4B  F017         	call	_WriteUSART
 11099  0029F0  5011               	movf	putsUSART@data,w,c
 11100  0029F2  6E13               	movwf	??_putsUSART& (0+255),c
 11101  0029F4  5012               	movf	putsUSART@data+1,w,c
 11102  0029F6  6E14               	movwf	(??_putsUSART+1)& (0+255),c
 11103  0029F8  4A11               	infsnz	putsUSART@data,f,c
 11104  0029FA  2A12               	incf	putsUSART@data+1,f,c
 11105  0029FC  C013  FFF6         	movff	??_putsUSART,tblptrl
 11106  002A00  C014  FFF7         	movff	??_putsUSART+1,tblptrh
 11107  002A04  0E00               	movlw	low (__mediumconst shr (0+16))
 11108  002A06  6EF8               	movwf	tblptru,c
 11109  002A08  0E0F               	movlw	(high __ramtop+-1)
 11110  002A0A  64F7               	cpfsgt	tblptrh,c
 11111  002A0C  D003               	bra	u4917
 11112  002A0E  0008               	tblrd		*
 11113  002A10  50F5               	movf	tablat,w,c
 11114  002A12  D005               	bra	u4910
 11115  002A14                     u4917:
 11116  002A14  CFF6 FFE9          	movff	tblptrl,fsr0l
 11117  002A18  CFF7 FFEA          	movff	tblptrh,fsr0h
 11118  002A1C  50EF               	movf	indf0,w,c
 11119  002A1E                     u4910:
 11120  002A1E  0900               	iorlw	0
 11121  002A20  B4D8               	btfsc	status,2,c
 11122  002A22  0012               	return	
 11123  002A24  D7D0               	goto	l685
 11124  002A26                     __end_of_putsUSART:
 11125                           	opt stack 0
 11126                           tblptru	equ	0xFF8
 11127                           tblptrh	equ	0xFF7
 11128                           tblptrl	equ	0xFF6
 11129                           tablat	equ	0xFF5
 11130                           prodh	equ	0xFF4
 11131                           prodl	equ	0xFF3
 11132                           intcon	equ	0xFF2
 11133                           intcon2	equ	0xFF1
 11134                           indf0	equ	0xFEF
 11135                           postinc0	equ	0xFEE
 11136                           fsr0h	equ	0xFEA
 11137                           fsr0l	equ	0xFE9
 11138                           wreg	equ	0xFE8
 11139                           indf1	equ	0xFE7
 11140                           postdec1	equ	0xFE5
 11141                           fsr1h	equ	0xFE2
 11142                           fsr1l	equ	0xFE1
 11143                           indf2	equ	0xFDF
 11144                           postinc2	equ	0xFDE
 11145                           postdec2	equ	0xFDD
 11146                           fsr2h	equ	0xFDA
 11147                           fsr2l	equ	0xFD9
 11148                           status	equ	0xFD8
 11149                           
 11150 ;; *************** function _Salto_Enter *****************
 11151 ;; Defined at:
 11152 ;;		line 31 in file "../USART.c"
 11153 ;; Parameters:    Size  Location     Type
 11154 ;;		None
 11155 ;; Auto vars:     Size  Location     Type
 11156 ;;		None
 11157 ;; Return value:  Size  Location     Type
 11158 ;;		None               void
 11159 ;; Registers used:
 11160 ;;		wreg, cstack
 11161 ;; Tracked objects:
 11162 ;;		On entry : 0/0
 11163 ;;		On exit  : 0/0
 11164 ;;		Unchanged: 0/0
 11165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11170 ;;Total ram usage:        0 bytes
 11171 ;; Hardware stack levels used:    1
 11172 ;; Hardware stack levels required when called:    3
 11173 ;; This function calls:
 11174 ;;		_WriteUSART
 11175 ;; This function is called by:
 11176 ;;		_SendStringUSART
 11177 ;; This function uses a non-reentrant model
 11178 ;;
 11179                           
 11180                           	psect	text52
 11181  002E46                     __ptext52:
 11182                           	opt stack 0
 11183  002E46                     _Salto_Enter:
 11184                           	opt stack 25
 11185  002E46                     l432:
 11186  002E46  A2AC               	btfss	4012,1,c	;volatile
 11187  002E48  D7FE               	goto	l432
 11188                           
 11189                           ;USART.c: 33: WriteUSART(0x0D);
 11190  002E4A  0E0D               	movlw	13
 11191  002E4C  EC4B  F017         	call	_WriteUSART
 11192  002E50                     l435:
 11193  002E50  A2AC               	btfss	4012,1,c	;volatile
 11194  002E52  D7FE               	goto	l435
 11195                           
 11196                           ;USART.c: 35: WriteUSART(0x0A);
 11197  002E54  0E0A               	movlw	10
 11198  002E56  EC4B  F017         	call	_WriteUSART
 11199  002E5A  0012               	return		;funcret
 11200  002E5C                     __end_of_Salto_Enter:
 11201                           	opt stack 0
 11202                           tblptru	equ	0xFF8
 11203                           tblptrh	equ	0xFF7
 11204                           tblptrl	equ	0xFF6
 11205                           tablat	equ	0xFF5
 11206                           prodh	equ	0xFF4
 11207                           prodl	equ	0xFF3
 11208                           intcon	equ	0xFF2
 11209                           intcon2	equ	0xFF1
 11210                           indf0	equ	0xFEF
 11211                           postinc0	equ	0xFEE
 11212                           fsr0h	equ	0xFEA
 11213                           fsr0l	equ	0xFE9
 11214                           wreg	equ	0xFE8
 11215                           indf1	equ	0xFE7
 11216                           postdec1	equ	0xFE5
 11217                           fsr1h	equ	0xFE2
 11218                           fsr1l	equ	0xFE1
 11219                           indf2	equ	0xFDF
 11220                           postinc2	equ	0xFDE
 11221                           postdec2	equ	0xFDD
 11222                           fsr2h	equ	0xFDA
 11223                           fsr2l	equ	0xFD9
 11224                           status	equ	0xFD8
 11225                           
 11226 ;; *************** function _WriteUSART *****************
 11227 ;; Defined at:
 11228 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\USART\uwrite.c"
 11229 ;; Parameters:    Size  Location     Type
 11230 ;;  data            1    wreg     unsigned char 
 11231 ;; Auto vars:     Size  Location     Type
 11232 ;;  data            1   15[COMRAM] unsigned char 
 11233 ;; Return value:  Size  Location     Type
 11234 ;;		None               void
 11235 ;; Registers used:
 11236 ;;		wreg
 11237 ;; Tracked objects:
 11238 ;;		On entry : 0/0
 11239 ;;		On exit  : 0/0
 11240 ;;		Unchanged: 0/0
 11241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11243 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11245 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11246 ;;Total ram usage:        1 bytes
 11247 ;; Hardware stack levels used:    1
 11248 ;; Hardware stack levels required when called:    2
 11249 ;; This function calls:
 11250 ;;		Nothing
 11251 ;; This function is called by:
 11252 ;;		_Salto_Enter
 11253 ;;		_putsUSART
 11254 ;; This function uses a non-reentrant model
 11255 ;;
 11256                           
 11257                           	psect	text53
 11258  002E96                     __ptext53:
 11259                           	opt stack 0
 11260  002E96                     _WriteUSART:
 11261                           	opt stack 25
 11262                           
 11263                           ;incstack = 0
 11264                           ;WriteUSART@data stored from wreg
 11265  002E96  6E10               	movwf	WriteUSART@data,c
 11266  002E98  ACAC               	btfss	4012,6,c	;volatile
 11267  002E9A  D003               	goto	l4955
 11268  002E9C  90AC               	bcf	4012,0,c	;volatile
 11269  002E9E  B24C               	btfsc	_USART_Status,1,c
 11270  002EA0  80AC               	bsf	4012,0,c	;volatile
 11271  002EA2                     l4955:
 11272  002EA2  C010  FFAD         	movff	WriteUSART@data,4013	;volatile
 11273  002EA6  0012               	return		;funcret
 11274  002EA8                     __end_of_WriteUSART:
 11275                           	opt stack 0
 11276                           tblptru	equ	0xFF8
 11277                           tblptrh	equ	0xFF7
 11278                           tblptrl	equ	0xFF6
 11279                           tablat	equ	0xFF5
 11280                           prodh	equ	0xFF4
 11281                           prodl	equ	0xFF3
 11282                           intcon	equ	0xFF2
 11283                           intcon2	equ	0xFF1
 11284                           indf0	equ	0xFEF
 11285                           postinc0	equ	0xFEE
 11286                           fsr0h	equ	0xFEA
 11287                           fsr0l	equ	0xFE9
 11288                           wreg	equ	0xFE8
 11289                           indf1	equ	0xFE7
 11290                           postdec1	equ	0xFE5
 11291                           fsr1h	equ	0xFE2
 11292                           fsr1l	equ	0xFE1
 11293                           indf2	equ	0xFDF
 11294                           postinc2	equ	0xFDE
 11295                           postdec2	equ	0xFDD
 11296                           fsr2h	equ	0xFDA
 11297                           fsr2l	equ	0xFD9
 11298                           status	equ	0xFD8
 11299                           
 11300 ;; *************** function _OpenUSART *****************
 11301 ;; Defined at:
 11302 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\USART\uopen.c"
 11303 ;; Parameters:    Size  Location     Type
 11304 ;;  config          1    wreg     unsigned char 
 11305 ;;  spbrg           2   15[COMRAM] unsigned int 
 11306 ;; Auto vars:     Size  Location     Type
 11307 ;;  config          1   17[COMRAM] unsigned char 
 11308 ;; Return value:  Size  Location     Type
 11309 ;;		None               void
 11310 ;; Registers used:
 11311 ;;		wreg, status,2
 11312 ;; Tracked objects:
 11313 ;;		On entry : 0/0
 11314 ;;		On exit  : 0/0
 11315 ;;		Unchanged: 0/0
 11316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11317 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11318 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11320 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11321 ;;Total ram usage:        3 bytes
 11322 ;; Hardware stack levels used:    1
 11323 ;; Hardware stack levels required when called:    2
 11324 ;; This function calls:
 11325 ;;		Nothing
 11326 ;; This function is called by:
 11327 ;;		_InitUSART
 11328 ;; This function uses a non-reentrant model
 11329 ;;
 11330                           
 11331                           	psect	text54
 11332  002A26                     __ptext54:
 11333                           	opt stack 0
 11334  002A26                     _OpenUSART:
 11335                           	opt stack 26
 11336                           
 11337                           ;incstack = 0
 11338                           ;OpenUSART@config stored from wreg
 11339  002A26  6E12               	movwf	OpenUSART@config,c
 11340  002A28  0E00               	movlw	0
 11341  002A2A  6EAC               	movwf	4012,c	;volatile
 11342  002A2C  0E00               	movlw	0
 11343  002A2E  6EAB               	movwf	4011,c	;volatile
 11344  002A30  B012               	btfsc	OpenUSART@config,0,c
 11345  002A32  88AC               	bsf	4012,4,c	;volatile
 11346  002A34  A212               	btfss	OpenUSART@config,1,c
 11347  002A36  D002               	goto	l3563
 11348  002A38  8CAC               	bsf	4012,6,c	;volatile
 11349  002A3A  8CAB               	bsf	4011,6,c	;volatile
 11350  002A3C                     l3563:
 11351  002A3C  B412               	btfsc	OpenUSART@config,2,c
 11352  002A3E  8EAC               	bsf	4012,7,c	;volatile
 11353  002A40  A612               	btfss	OpenUSART@config,3,c
 11354  002A42  D002               	goto	l668
 11355  002A44  88AB               	bsf	4011,4,c	;volatile
 11356  002A46  D001               	goto	l3571
 11357  002A48                     l668:
 11358  002A48  8AAB               	bsf	4011,5,c	;volatile
 11359  002A4A                     l3571:
 11360  002A4A  B812               	btfsc	OpenUSART@config,4,c
 11361  002A4C  84AC               	bsf	4012,2,c	;volatile
 11362  002A4E  989E               	bcf	3998,4,c	;volatile
 11363  002A50  BA12               	btfsc	OpenUSART@config,5,c
 11364  002A52  86AB               	bsf	4011,3,c	;volatile
 11365  002A54  AC12               	btfss	OpenUSART@config,6,c
 11366  002A56  D002               	goto	l672
 11367  002A58  8A9D               	bsf	3997,5,c	;volatile
 11368  002A5A  D001               	goto	l673
 11369  002A5C                     l672:
 11370  002A5C  9A9D               	bcf	3997,5,c	;volatile
 11371  002A5E                     l673:
 11372  002A5E  9A9E               	bcf	3998,5,c	;volatile
 11373  002A60  AE12               	btfss	OpenUSART@config,7,c
 11374  002A62  D002               	goto	l674
 11375  002A64  889D               	bsf	3997,4,c	;volatile
 11376  002A66  D001               	goto	l675
 11377  002A68                     l674:
 11378  002A68  989D               	bcf	3997,4,c	;volatile
 11379  002A6A                     l675:
 11380  002A6A  C010  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 11381  002A6E  5011               	movf	OpenUSART@spbrg+1,w,c
 11382  002A70  6EB0               	movwf	4016,c	;volatile
 11383  002A72  8AAC               	bsf	4012,5,c	;volatile
 11384  002A74  8EAB               	bsf	4011,7,c	;volatile
 11385  002A76  9C94               	bcf	3988,6,c	;volatile
 11386  002A78  8E94               	bsf	3988,7,c	;volatile
 11387  002A7A  A8AC               	btfss	4012,4,c	;volatile
 11388  002A7C  0012               	return	
 11389  002A7E  BEAC               	btfsc	4012,7,c	;volatile
 11390  002A80  0012               	return	
 11391  002A82  8C94               	bsf	3988,6,c	;volatile
 11392  002A84  0012               	return	
 11393  002A86                     __end_of_OpenUSART:
 11394                           	opt stack 0
 11395                           tblptru	equ	0xFF8
 11396                           tblptrh	equ	0xFF7
 11397                           tblptrl	equ	0xFF6
 11398                           tablat	equ	0xFF5
 11399                           prodh	equ	0xFF4
 11400                           prodl	equ	0xFF3
 11401                           intcon	equ	0xFF2
 11402                           intcon2	equ	0xFF1
 11403                           indf0	equ	0xFEF
 11404                           postinc0	equ	0xFEE
 11405                           fsr0h	equ	0xFEA
 11406                           fsr0l	equ	0xFE9
 11407                           wreg	equ	0xFE8
 11408                           indf1	equ	0xFE7
 11409                           postdec1	equ	0xFE5
 11410                           fsr1h	equ	0xFE2
 11411                           fsr1l	equ	0xFE1
 11412                           indf2	equ	0xFDF
 11413                           postinc2	equ	0xFDE
 11414                           postdec2	equ	0xFDD
 11415                           fsr2h	equ	0xFDA
 11416                           fsr2l	equ	0xFD9
 11417                           status	equ	0xFD8
 11418                           
 11419 ;; *************** function _IntServe *****************
 11420 ;; Defined at:
 11421 ;;		line 434 in file "../TFG_PIC18_Auto.c"
 11422 ;; Parameters:    Size  Location     Type
 11423 ;;		None
 11424 ;; Auto vars:     Size  Location     Type
 11425 ;;		None
 11426 ;; Return value:  Size  Location     Type
 11427 ;;		None               void
 11428 ;; Registers used:
 11429 ;;		wreg, status,2, status,0, cstack
 11430 ;; Tracked objects:
 11431 ;;		On entry : 0/0
 11432 ;;		On exit  : 0/0
 11433 ;;		Unchanged: 0/0
 11434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11437 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11438 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11439 ;;Total ram usage:       14 bytes
 11440 ;; Hardware stack levels used:    1
 11441 ;; Hardware stack levels required when called:    1
 11442 ;; This function calls:
 11443 ;;		_ReadUSART
 11444 ;; This function is called by:
 11445 ;;		Interrupt level 2
 11446 ;; This function uses a non-reentrant model
 11447 ;;
 11448                           
 11449                           	psect	intcode
 11450  000008                     __pintcode:
 11451                           	opt stack 0
 11452  000008                     _IntServe:
 11453                           	opt stack 24
 11454                           
 11455                           ;incstack = 0
 11456  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11457  00000A  CFFA F002          	movff	pclath,??_IntServe
 11458  00000E  CFFB F003          	movff	pclatu,??_IntServe+1
 11459  000012  CFE9 F004          	movff	fsr0l,??_IntServe+2
 11460  000016  CFEA F005          	movff	fsr0h,??_IntServe+3
 11461  00001A  CFE1 F006          	movff	fsr1l,??_IntServe+4
 11462  00001E  CFE2 F007          	movff	fsr1h,??_IntServe+5
 11463  000022  CFD9 F008          	movff	fsr2l,??_IntServe+6
 11464  000026  CFDA F009          	movff	fsr2h,??_IntServe+7
 11465  00002A  CFF3 F00A          	movff	prodl,??_IntServe+8
 11466  00002E  CFF4 F00B          	movff	prodh,??_IntServe+9
 11467  000032  CFF6 F00C          	movff	tblptrl,??_IntServe+10
 11468  000036  CFF7 F00D          	movff	tblptrh,??_IntServe+11
 11469  00003A  CFF8 F00E          	movff	tblptru,??_IntServe+12
 11470  00003E  CFF5 F00F          	movff	tablat,??_IntServe+13
 11471                           
 11472                           ;TFG_PIC18_Auto.c: 436: GIE = 0;
 11473  000042  9EF2               	bcf	intcon,7,c	;volatile
 11474                           
 11475                           ;TFG_PIC18_Auto.c: 438: if (RCIF == 1) {
 11476  000044  AA9E               	btfss	3998,5,c	;volatile
 11477  000046  D009               	goto	i2l4907
 11478                           
 11479                           ;TFG_PIC18_Auto.c: 439: CharRX = ReadUSART();
 11480  000048  ECD4  F016         	call	_ReadUSART	;wreg free
 11481  00004C  6E4B               	movwf	_CharRX,c
 11482                           
 11483                           ;TFG_PIC18_Auto.c: 441: SerialInterrupt_flag=1;
 11484  00004E  0E00               	movlw	0
 11485  000050  0100               	movlb	0	; () banked
 11486  000052  6FC8               	movwf	(_SerialInterrupt_flag+1)& (0+255),b
 11487  000054  0E01               	movlw	1
 11488  000056  6FC7               	movwf	_SerialInterrupt_flag& (0+255),b
 11489                           
 11490                           ; BSR set to: 0
 11491                           ;TFG_PIC18_Auto.c: 447: RCIF = 0;
 11492  000058  9A9E               	bcf	3998,5,c	;volatile
 11493  00005A                     i2l4907:
 11494                           
 11495                           ;TFG_PIC18_Auto.c: 448: }
 11496                           ;TFG_PIC18_Auto.c: 450: if (INT0IF == 1) {
 11497  00005A  A2F2               	btfss	intcon,1,c	;volatile
 11498  00005C  D005               	goto	i2l4913
 11499                           
 11500                           ;TFG_PIC18_Auto.c: 452: Trigger = 1;
 11501  00005E  0E00               	movlw	0
 11502  000060  6E44               	movwf	_Trigger+1,c
 11503  000062  0E01               	movlw	1
 11504  000064  6E43               	movwf	_Trigger,c
 11505                           
 11506                           ;TFG_PIC18_Auto.c: 453: INT0IF = 0;
 11507  000066  92F2               	bcf	intcon,1,c	;volatile
 11508  000068                     i2l4913:
 11509                           
 11510                           ;TFG_PIC18_Auto.c: 454: }
 11511                           ;TFG_PIC18_Auto.c: 455: if (TMR3IF == 1) {
 11512  000068  A2A1               	btfss	4001,1,c	;volatile
 11513  00006A  D035               	goto	i2l4931
 11514                           
 11515                           ;TFG_PIC18_Auto.c: 456: TMR3H = 0xF8;
 11516  00006C  0EF8               	movlw	248
 11517  00006E  6EB3               	movwf	4019,c	;volatile
 11518                           
 11519                           ;TFG_PIC18_Auto.c: 457: TMR3L = 0x46;
 11520  000070  0E46               	movlw	70
 11521  000072  6EB2               	movwf	4018,c	;volatile
 11522                           
 11523                           ;TFG_PIC18_Auto.c: 458: if (postscaler < postscalermax) {
 11524  000074  0100               	movlb	0	; () banked
 11525  000076  51F1               	movf	_postscalermax& (0+255),w,b
 11526  000078  0100               	movlb	0	; () banked
 11527  00007A  5DD5               	subwf	_postscaler& (0+255),w,b
 11528  00007C  0100               	movlb	0	; () banked
 11529  00007E  51F2               	movf	(_postscalermax+1)& (0+255),w,b
 11530  000080  0100               	movlb	0	; () banked
 11531  000082  59D6               	subwfb	(_postscaler+1)& (0+255),w,b
 11532  000084  B0D8               	btfsc	status,0,c
 11533  000086  D004               	goto	i2l4921
 11534                           
 11535                           ; BSR set to: 0
 11536                           ;TFG_PIC18_Auto.c: 459: postscaler++;
 11537  000088  0100               	movlb	0	; () banked
 11538  00008A  4BD5               	infsnz	_postscaler& (0+255),f,b
 11539  00008C  2BD6               	incf	(_postscaler+1)& (0+255),f,b
 11540                           
 11541                           ;TFG_PIC18_Auto.c: 460: } else {
 11542  00008E  D00A               	goto	i2l4923
 11543  000090                     i2l4921:
 11544                           
 11545                           ; BSR set to: 0
 11546                           ;TFG_PIC18_Auto.c: 461: postscaler = 0;
 11547  000090  0E00               	movlw	0
 11548  000092  0100               	movlb	0	; () banked
 11549  000094  6FD6               	movwf	(_postscaler+1)& (0+255),b
 11550  000096  0E00               	movlw	0
 11551  000098  6FD5               	movwf	_postscaler& (0+255),b
 11552                           
 11553                           ;TFG_PIC18_Auto.c: 462: postscalerflag = 1;
 11554  00009A  0E00               	movlw	0
 11555  00009C  0100               	movlb	0	; () banked
 11556  00009E  6FDA               	movwf	(_postscalerflag+1)& (0+255),b
 11557  0000A0  0E01               	movlw	1
 11558  0000A2  6FD9               	movwf	_postscalerflag& (0+255),b
 11559  0000A4                     i2l4923:
 11560                           
 11561                           ; BSR set to: 0
 11562                           ;TFG_PIC18_Auto.c: 463: }
 11563                           ;TFG_PIC18_Auto.c: 464: if (postscaler30s < postscaler30smax) {
 11564  0000A4  0100               	movlb	0	; () banked
 11565  0000A6  51EF               	movf	_postscaler30smax& (0+255),w,b
 11566  0000A8  0100               	movlb	0	; () banked
 11567  0000AA  5DD7               	subwf	_postscaler30s& (0+255),w,b
 11568  0000AC  0100               	movlb	0	; () banked
 11569  0000AE  51F0               	movf	(_postscaler30smax+1)& (0+255),w,b
 11570  0000B0  0100               	movlb	0	; () banked
 11571  0000B2  59D8               	subwfb	(_postscaler30s+1)& (0+255),w,b
 11572  0000B4  B0D8               	btfsc	status,0,c
 11573  0000B6  D004               	goto	i2l4927
 11574                           
 11575                           ; BSR set to: 0
 11576                           ;TFG_PIC18_Auto.c: 465: postscaler30s++;
 11577  0000B8  0100               	movlb	0	; () banked
 11578  0000BA  4BD7               	infsnz	_postscaler30s& (0+255),f,b
 11579  0000BC  2BD8               	incf	(_postscaler30s+1)& (0+255),f,b
 11580                           
 11581                           ;TFG_PIC18_Auto.c: 466: } else {
 11582  0000BE  D00A               	goto	i2l4929
 11583  0000C0                     i2l4927:
 11584                           
 11585                           ; BSR set to: 0
 11586                           ;TFG_PIC18_Auto.c: 468: postscaler30s=0;
 11587  0000C0  0E00               	movlw	0
 11588  0000C2  0100               	movlb	0	; () banked
 11589  0000C4  6FD8               	movwf	(_postscaler30s+1)& (0+255),b
 11590  0000C6  0E00               	movlw	0
 11591  0000C8  6FD7               	movwf	_postscaler30s& (0+255),b
 11592                           
 11593                           ;TFG_PIC18_Auto.c: 469: postscalerflag30s=1;
 11594  0000CA  0E00               	movlw	0
 11595  0000CC  0100               	movlb	0	; () banked
 11596  0000CE  6FDC               	movwf	(_postscalerflag30s+1)& (0+255),b
 11597  0000D0  0E01               	movlw	1
 11598  0000D2  6FDB               	movwf	_postscalerflag30s& (0+255),b
 11599  0000D4                     i2l4929:
 11600                           
 11601                           ; BSR set to: 0
 11602                           ;TFG_PIC18_Auto.c: 470: }
 11603                           ;TFG_PIC18_Auto.c: 472: TMR3IF = 0;
 11604  0000D4  92A1               	bcf	4001,1,c	;volatile
 11605  0000D6                     i2l4931:
 11606                           
 11607                           ;TFG_PIC18_Auto.c: 475: }
 11608                           ;TFG_PIC18_Auto.c: 476: if (TMR2IF == 1) {
 11609  0000D6  A29E               	btfss	3998,1,c	;volatile
 11610  0000D8  D00B               	goto	i2l4943
 11611                           
 11612                           ;TFG_PIC18_Auto.c: 478: if (present_state == 'I') {
 11613  0000DA  0E49               	movlw	73
 11614  0000DC  184F               	xorwf	_present_state,w,c
 11615  0000DE  A4D8               	btfss	status,2,c
 11616  0000E0  D006               	goto	i2l4941
 11617                           
 11618                           ;TFG_PIC18_Auto.c: 479: TOUT = 1;
 11619  0000E2  0E00               	movlw	0
 11620  0000E4  6E42               	movwf	_TOUT+1,c
 11621  0000E6  0E01               	movlw	1
 11622  0000E8  6E41               	movwf	_TOUT,c
 11623                           
 11624                           ;TFG_PIC18_Auto.c: 480: TMR2ON = 0;
 11625  0000EA  94CA               	bcf	4042,2,c	;volatile
 11626                           
 11627                           ;TFG_PIC18_Auto.c: 481: TMR2IF = 0;
 11628  0000EC  929E               	bcf	3998,1,c	;volatile
 11629  0000EE                     i2l4941:
 11630                           
 11631                           ;TFG_PIC18_Auto.c: 482: }
 11632                           ;TFG_PIC18_Auto.c: 484: TMR2IF = 0;
 11633  0000EE  929E               	bcf	3998,1,c	;volatile
 11634  0000F0                     i2l4943:
 11635                           
 11636                           ;TFG_PIC18_Auto.c: 485: }
 11637                           ;TFG_PIC18_Auto.c: 486: GIE = 1;
 11638  0000F0  8EF2               	bsf	intcon,7,c	;volatile
 11639  0000F2  C00F  FFF5         	movff	??_IntServe+13,tablat
 11640  0000F6  C00E  FFF8         	movff	??_IntServe+12,tblptru
 11641  0000FA  C00D  FFF7         	movff	??_IntServe+11,tblptrh
 11642  0000FE  C00C  FFF6         	movff	??_IntServe+10,tblptrl
 11643  000102  C00B  FFF4         	movff	??_IntServe+9,prodh
 11644  000106  C00A  FFF3         	movff	??_IntServe+8,prodl
 11645  00010A  C009  FFDA         	movff	??_IntServe+7,fsr2h
 11646  00010E  C008  FFD9         	movff	??_IntServe+6,fsr2l
 11647  000112  C007  FFE2         	movff	??_IntServe+5,fsr1h
 11648  000116  C006  FFE1         	movff	??_IntServe+4,fsr1l
 11649  00011A  C005  FFEA         	movff	??_IntServe+3,fsr0h
 11650  00011E  C004  FFE9         	movff	??_IntServe+2,fsr0l
 11651  000122  C003  FFFB         	movff	??_IntServe+1,pclatu
 11652  000126  C002  FFFA         	movff	??_IntServe,pclath
 11653  00012A  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11654  00012C  0011               	retfie		f
 11655  00012E                     __end_of_IntServe:
 11656                           	opt stack 0
 11657                           pclatu	equ	0xFFB
 11658                           pclath	equ	0xFFA
 11659                           tblptru	equ	0xFF8
 11660                           tblptrh	equ	0xFF7
 11661                           tblptrl	equ	0xFF6
 11662                           tablat	equ	0xFF5
 11663                           prodh	equ	0xFF4
 11664                           prodl	equ	0xFF3
 11665                           intcon	equ	0xFF2
 11666                           intcon2	equ	0xFF1
 11667                           indf0	equ	0xFEF
 11668                           postinc0	equ	0xFEE
 11669                           fsr0h	equ	0xFEA
 11670                           fsr0l	equ	0xFE9
 11671                           wreg	equ	0xFE8
 11672                           indf1	equ	0xFE7
 11673                           postdec1	equ	0xFE5
 11674                           fsr1h	equ	0xFE2
 11675                           fsr1l	equ	0xFE1
 11676                           indf2	equ	0xFDF
 11677                           postinc2	equ	0xFDE
 11678                           postdec2	equ	0xFDD
 11679                           fsr2h	equ	0xFDA
 11680                           fsr2l	equ	0xFD9
 11681                           status	equ	0xFD8
 11682                           
 11683 ;; *************** function _ReadUSART *****************
 11684 ;; Defined at:
 11685 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\USART\uread.c"
 11686 ;; Parameters:    Size  Location     Type
 11687 ;;		None
 11688 ;; Auto vars:     Size  Location     Type
 11689 ;;  data            1    0[COMRAM] unsigned char 
 11690 ;; Return value:  Size  Location     Type
 11691 ;;                  1    wreg      unsigned char 
 11692 ;; Registers used:
 11693 ;;		wreg, status,2, status,0
 11694 ;; Tracked objects:
 11695 ;;		On entry : 0/0
 11696 ;;		On exit  : 0/0
 11697 ;;		Unchanged: 0/0
 11698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11700 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11702 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11703 ;;Total ram usage:        1 bytes
 11704 ;; Hardware stack levels used:    1
 11705 ;; This function calls:
 11706 ;;		Nothing
 11707 ;; This function is called by:
 11708 ;;		_IntServe
 11709 ;; This function uses a non-reentrant model
 11710 ;;
 11711                           
 11712                           	psect	text56
 11713  002DA8                     __ptext56:
 11714                           	opt stack 0
 11715  002DA8                     _ReadUSART:
 11716                           	opt stack 24
 11717                           
 11718                           ;incstack = 0
 11719  002DA8  0EF2               	movlw	242
 11720  002DAA  164C               	andwf	_USART_Status,f,c
 11721  002DAC  ACAB               	btfss	4011,6,c	;volatile
 11722  002DAE  D003               	goto	i2l698
 11723  002DB0  904C               	bcf	_USART_Status,0,c
 11724  002DB2  B0AB               	btfsc	4011,0,c	;volatile
 11725  002DB4  804C               	bsf	_USART_Status,0,c
 11726  002DB6                     i2l698:
 11727  002DB6  B4AB               	btfsc	4011,2,c	;volatile
 11728  002DB8  844C               	bsf	_USART_Status,2,c
 11729  002DBA  B2AB               	btfsc	4011,1,c	;volatile
 11730  002DBC  864C               	bsf	_USART_Status,3,c
 11731  002DBE  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 11732  002DC2  5001               	movf	ReadUSART@data,w,c
 11733  002DC4  0012               	return	
 11734  002DC6                     __end_of_ReadUSART:
 11735                           	opt stack 0
 11736                           pclatu	equ	0xFFB
 11737                           pclath	equ	0xFFA
 11738                           tblptru	equ	0xFF8
 11739                           tblptrh	equ	0xFF7
 11740                           tblptrl	equ	0xFF6
 11741                           tablat	equ	0xFF5
 11742                           prodh	equ	0xFF4
 11743                           prodl	equ	0xFF3
 11744                           intcon	equ	0xFF2
 11745                           intcon2	equ	0xFF1
 11746                           indf0	equ	0xFEF
 11747                           postinc0	equ	0xFEE
 11748                           fsr0h	equ	0xFEA
 11749                           fsr0l	equ	0xFE9
 11750                           wreg	equ	0xFE8
 11751                           indf1	equ	0xFE7
 11752                           postdec1	equ	0xFE5
 11753                           fsr1h	equ	0xFE2
 11754                           fsr1l	equ	0xFE1
 11755                           indf2	equ	0xFDF
 11756                           postinc2	equ	0xFDE
 11757                           postdec2	equ	0xFDD
 11758                           fsr2h	equ	0xFDA
 11759                           fsr2l	equ	0xFD9
 11760                           status	equ	0xFD8
 11761                           pclatu	equ	0xFFB
 11762                           pclath	equ	0xFFA
 11763                           tblptru	equ	0xFF8
 11764                           tblptrh	equ	0xFF7
 11765                           tblptrl	equ	0xFF6
 11766                           tablat	equ	0xFF5
 11767                           prodh	equ	0xFF4
 11768                           prodl	equ	0xFF3
 11769                           intcon	equ	0xFF2
 11770                           intcon2	equ	0xFF1
 11771                           indf0	equ	0xFEF
 11772                           postinc0	equ	0xFEE
 11773                           fsr0h	equ	0xFEA
 11774                           fsr0l	equ	0xFE9
 11775                           wreg	equ	0xFE8
 11776                           indf1	equ	0xFE7
 11777                           postdec1	equ	0xFE5
 11778                           fsr1h	equ	0xFE2
 11779                           fsr1l	equ	0xFE1
 11780                           indf2	equ	0xFDF
 11781                           postinc2	equ	0xFDE
 11782                           postdec2	equ	0xFDD
 11783                           fsr2h	equ	0xFDA
 11784                           fsr2l	equ	0xFD9
 11785                           status	equ	0xFD8
 11786                           
 11787                           	psect	rparam
 11788  0000                     pclatu	equ	0xFFB
 11789                           pclath	equ	0xFFA
 11790                           tblptru	equ	0xFF8
 11791                           tblptrh	equ	0xFF7
 11792                           tblptrl	equ	0xFF6
 11793                           tablat	equ	0xFF5
 11794                           prodh	equ	0xFF4
 11795                           prodl	equ	0xFF3
 11796                           intcon	equ	0xFF2
 11797                           intcon2	equ	0xFF1
 11798                           indf0	equ	0xFEF
 11799                           postinc0	equ	0xFEE
 11800                           fsr0h	equ	0xFEA
 11801                           fsr0l	equ	0xFE9
 11802                           wreg	equ	0xFE8
 11803                           indf1	equ	0xFE7
 11804                           postdec1	equ	0xFE5
 11805                           fsr1h	equ	0xFE2
 11806                           fsr1l	equ	0xFE1
 11807                           indf2	equ	0xFDF
 11808                           postinc2	equ	0xFDE
 11809                           postdec2	equ	0xFDD
 11810                           fsr2h	equ	0xFDA
 11811                           fsr2l	equ	0xFD9
 11812                           status	equ	0xFD8
 11813                           
 11814                           	psect	temp
 11815  000050                     btemp:
 11816                           	opt stack 0
 11817  000050                     	ds	1
 11818  0000                     int$flags	set	btemp
 11819                           pclatu	equ	0xFFB
 11820                           pclath	equ	0xFFA
 11821                           tblptru	equ	0xFF8
 11822                           tblptrh	equ	0xFF7
 11823                           tblptrl	equ	0xFF6
 11824                           tablat	equ	0xFF5
 11825                           prodh	equ	0xFF4
 11826                           prodl	equ	0xFF3
 11827                           intcon	equ	0xFF2
 11828                           intcon2	equ	0xFF1
 11829                           indf0	equ	0xFEF
 11830                           postinc0	equ	0xFEE
 11831                           fsr0h	equ	0xFEA
 11832                           fsr0l	equ	0xFE9
 11833                           wreg	equ	0xFE8
 11834                           indf1	equ	0xFE7
 11835                           postdec1	equ	0xFE5
 11836                           fsr1h	equ	0xFE2
 11837                           fsr1l	equ	0xFE1
 11838                           indf2	equ	0xFDF
 11839                           postinc2	equ	0xFDE
 11840                           postdec2	equ	0xFDD
 11841                           fsr2h	equ	0xFDA
 11842                           fsr2l	equ	0xFD9
 11843                           status	equ	0xFD8


Data Sizes:
    Strings     370
    Constant    145
    Data        66
    BSS         80
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      79
    BANK0           160     68     159
    BANK1           256     12      52
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 36
		 -> STR_15(CODE[35]), STR_14(CODE[13]), STR_13(CODE[13]), STR_12(CODE[9]), 
		 -> STR_10(CODE[12]), CharTX2(BANK1[12]), STR_8(CODE[36]), STR_3(CODE[19]), 
		 -> CharTX(BANK0[12]), STR_1(CODE[22]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_11(CODE[28]), STR_9(CODE[31]), STR_7(CODE[31]), STR_6(CODE[33]), 
		 -> STR_5(CODE[34]), STR_4(CODE[34]), STR_2(CODE[33]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 12
		 -> CharTX2(BANK1[12]), CharTX(BANK0[12]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    SendStringUSART@text	PTR unsigned char  size(2) Largest target is 36
		 -> STR_15(CODE[35]), STR_14(CODE[13]), STR_13(CODE[13]), STR_12(CODE[9]), 
		 -> STR_10(CODE[12]), CharTX2(BANK1[12]), STR_8(CODE[36]), STR_3(CODE[19]), 
		 -> CharTX(BANK0[12]), STR_1(CODE[22]), 


Critical Paths under _main in COMRAM

    _output_logic->_ReadByte_I2C
    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    ___ftsub->___ftadd
    _log->___ftmul
    _eval_poly->___ftmul
    ___wmul->___awdiv
    ___awtoft->___ftpack
    _ReadByte_I2C->___ftmul
    ___lbtoft->___ftpack
    ___ftneg->___ftmul
    ___ftmul->___ftadd
    ___ftadd->___ftdiv
    _WriteI2C->_IdleI2C
    _Open_I2C1->_OpenI2C
    _GetDataSensorDHT22->___ftdiv
    ___lwtoft->___ftpack
    ___ftdiv->___lbtoft
    _InitUSART->_SendStringUSART
    _SendStringUSART->_putsUSART
    _putsUSART->_WriteUSART
    _Salto_Enter->_WriteUSART

Critical Paths under _IntServe in COMRAM

    _IntServe->_ReadUSART

Critical Paths under _main in BANK0

    _output_logic->_sprintf
    _sprintf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    _log->_eval_poly
    _eval_poly->___ftmul
    _ReadByte_I2C->___ftneg
    ___ftneg->___ftmul

Critical Paths under _IntServe in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_output_logic

Critical Paths under _IntServe in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _IntServe in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _IntServe in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _IntServe in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _IntServe in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _IntServe in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _IntServe in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _IntServe in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _IntServe in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _IntServe in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _IntServe in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _IntServe in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _IntServe in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _IntServe in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _IntServe in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  150686
                        _init_system
                       _output_logic
                        _state_logic
 ---------------------------------------------------------------------------------
 (1) _state_logic                                          1     1      0       8
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _output_logic                                        12    12      0  149007
                                              0 BANK1     12    12      0
                           _CloseI2C
                 _GetDataSensorDHT22
                       _GetSampleADC
                            _InitADC
                   _InitializeTimer3
                          _Open_I2C1
                       _ReadByte_I2C
                   _SelectChannelADC
                    _SendStringUSART
                            _StopADC
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lwtoft
                                _log
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             43    36      7   64959
                                             28 BANK0     40    33      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   14561
                                              6 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   14282
                                              6 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftadd (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1819
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             21 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             15 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             15 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2823
                                             23 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             28 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     703
                                             15 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     602
                                             13 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6195
                                             54 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     814
                                             15 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   32823
                                             18 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                           ___lwtoft (ARG)
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     476
                                             15 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   16376
                                              6 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3158
                                             29 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2854
                                             23 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _StopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SelectChannelADC                                     3     1      2     262
                                             15 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _ReadByte_I2C                                        15    12      3   20335
                                             63 COMRAM     1     1      0
                                              9 BANK0     14    11      3
                            _IdleI2C
                            _ReadI2C
                 _ResetVariables_I2C
                           _WaitFlag
                         _WaitForACK
                           _WriteI2C
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2675
                                             23 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     219
                                              6 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    6902
                                             54 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5831
                                             42 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) _WriteI2C                                             1     1      0      31
                                             16 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (3) _WaitForACK                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _WaitFlag                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ResetVariables_I2C                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Open_I2C1                                            0     0      0     139
                            _IdleI2C
                            _OpenI2C
 ---------------------------------------------------------------------------------
 (3) _OpenI2C                                              2     1      1     139
                                             15 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _IdleI2C                                              1     1      0       0
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitializeTimer3                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetSampleADC                                         2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _GetDataSensorDHT22                                   2     2      0    8432
                                             42 COMRAM     2     2      0
                    _SendStringUSART
                            ___ftdiv
                           ___lwtoft
                     _check_response
                          _read_byte
                       _start_signal
 ---------------------------------------------------------------------------------
 (3) _start_signal                                         1     1      0       0
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _read_byte                                            7     5      2      37
                                             15 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _check_response                                       2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2906
                                             23 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4102
                                             27 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2644
                                             15 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _CloseI2C                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_system                                          0     0      0    1671
                          _InitUSART
 ---------------------------------------------------------------------------------
 (2) _InitUSART                                            0     0      0    1671
                          _OpenUSART
                    _SendStringUSART
 ---------------------------------------------------------------------------------
 (2) _SendStringUSART                                      2     0      2    1387
                                             20 COMRAM     2     0      2
                        _Salto_Enter
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2     170
                                             16 COMRAM     4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _Salto_Enter                                          0     0      0      31
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (4) _WriteUSART                                           1     1      0      31
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     284
                                             15 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _IntServe                                            14    14      0      23
                                              1 COMRAM    14    14      0
                          _ReadUSART
 ---------------------------------------------------------------------------------
 (7) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_system
     _InitUSART
       _OpenUSART
       _SendStringUSART
         _Salto_Enter
           _WriteUSART
         _putsUSART
           _WriteUSART
   _output_logic
     _CloseI2C
     _GetDataSensorDHT22
       _SendStringUSART
         _Salto_Enter
           _WriteUSART
         _putsUSART
           _WriteUSART
       ___ftdiv
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
       _check_response
       _read_byte
       _start_signal
     _GetSampleADC
     _InitADC
     _InitializeTimer3
     _Open_I2C1
       _IdleI2C
       _OpenI2C
     _ReadByte_I2C
       _IdleI2C
       _ReadI2C
       _ResetVariables_I2C
       _WaitFlag
       _WaitForACK
       _WriteI2C
         _IdleI2C
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftdiv
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
     _SelectChannelADC
     _SendStringUSART
       _Salto_Enter
         _WriteUSART
       _putsUSART
         _WriteUSART
     _StopADC
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftdiv
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___lwtoft
       ___ftpack
     _log
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _eval_poly (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _frexp (ARG)
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _state_logic

 _IntServe (ROOT)
   _ReadUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      C      34       7       20.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     44      9F       5       99.4%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      4F       1       84.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     122      32        0.0%
DATA                 0      0     122       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Feb 05 21:31:09 2016

      __size_of_start_signal 0020                            _i 0047             ?_SendStringUSART 0015  
                _SSPSTATbits 000FC7                           l70 179A                           l73 17C6  
                         l67 174C                           l76 17E2                           l93 2EB4  
                         l79 17F0                           _GO 007E11                           l99 2EBC  
               ___awdiv@sign 001B                           _Vo 00E9                           _rh 00DD  
        ___wmul@multiplicand 0020                  _state_logic 1ADE                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
               ___ftadd@exp1 0036                 ___ftadd@exp2 0035                 ___ftadd@sign 0034  
                        l311 0DAA                          l501 2AF0                          l432 2E46  
                        l520 2816                          l426 2E30                          l514 2B30  
                        l362 2E1A                          l435 2E50                          l509 2B12  
                        l525 2828                          l622 0744                          l519 286E  
                        l529 2834                          l672 2A5C                          l752 2DD8  
                        l673 2A5E                          l753 2DDA                          l674 2A68  
                        l675 2A6A                          l668 2A48                          l685 29C6  
                        l777 2B5C                          l786 2B7C                          _GIE 007F97  
               __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000                          _Vdd 00E6  
                        _log 1D76                 ___awmod@sign 0015  __size_of_GetDataSensorDHT22 0134  
                        wreg 000FE8                 __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0025  
              _postscaler30s 00D7                 ___ftdiv@sign 002A                         l1000 222C  
                       l1032 25B2                         l1104 2104                         l1070 1A50  
                       l1055 1976                         l1129 2C5E                         l1090 2412  
                       l1059 19A0                         l1079 1A6C                         l1097 2076  
                       l1098 209E                         l1179 27E6                         l1189 29B4  
                       l5023 1984                         l5111 22D8                         l5121 230A  
                       l5201 293E                         l5051 1A00                         l5115 22EE  
                       l5301 2B1E                         l5053 1A0A                         l5045 19DE  
                       l5029 19AE                         l5125 2320                         l5141 2706  
                       l5205 2948                         l6101 0AAC                         l6021 0748  
                       l5071 1A88                         l5063 1A3E                         l5055 1A14  
                       l6103 0AB2                         l6015 0712                         l6007 06EA  
                       l5081 1AB8                         l5065 1A48                         l5057 1A1C  
                       l5153 272C                         l5209 2956                         l6033 07CA  
                       l6017 0726                         l6009 06F8                         l6105 0AC8  
                       l6201 0B20                         l3571 2A4A                         l3563 2A3C  
                       l5323 2822                         l5091 226A                         l6123 1DC8  
                       l5155 2734                         l5147 2716                         l6051 08D8  
                       l6043 08B0                         l6107 0AE6                         l5333 2864  
                       l6141 1ED6                         l6117 1D9A                         l5421 203C  
                       l5173 276C                         l5165 2754                         l5157 2738  
                       l5405 2D82                         l6045 08BE                         l6029 0778  
                       l6053 08E6                         l6301 0F30                         l6221 0B64  
                       l4701 1B50                         l5511 21F2                         l5415 2010  
                       l6071 0956                         l6063 092A                         l6303 0F36  
                       l4711 1B78                         l4703 1B56                         l6161 1F7A  
                       l5249 2B68                         l5097 2296                         l5521 221A  
                       l5169 275E                         l5193 291E                         l5185 2904  
                       l6241 0BE8                         l4721 1BA0                         l4713 1B7E  
                       l5531 2386                         l5523 2226                         l5515 2202  
                       l5451 20CA                         l5195 2926                         l5355 16D8  
                       l5347 1616                         l6091 09F4                         l6083 099C  
                       l6315 0FA2                         l6235 0BCA                         l4731 1BC8  
                       l4723 1BA6                         l4707 1B6C                         l5605 265E  
                       l5461 20F2                         l5197 292A                         l5189 2910  
                       l6069 0950                         l6333 1024                         l6317 0FB0  
                       l4717 1B94                         l4709 1B72                         l4733 1BCE  
                       l5703 2A8C                         l5471 2134                         l5463 20FE  
                       l5455 20DA                         l5375 12A2                         l6087 09C4  
                       l6343 104A                         l6319 0FBE                         l6271 0DF4  
                       l6263 0DAC                         l4727 1BBC                         l4719 1B9A  
                       l5537 23AE                         l5297 2B0E                         l5289 2AFC  
                       l5641 1D12                         l5705 2A98                         l5393 14A6  
                       l5369 11F8                         l6097 0A22                         l6281 0E12  
                       l6345 1052                         l4729 1BC2                         l4681 1B00  
                       l5651 1D48                         l5619 1C6C                         l5491 2194  
                       l5387 13FC                         l5379 12C8                         l6291 0EB0  
                       l6195 0AFC                         l4691 1B28                         l4683 1B06  
                       l4675 1AE4                         l5557 23EC                         l5733 2488  
                       l5637 1CFE                         l5477 2152                         l4693 1B2E  
                       ?_log 0072                         l5735 250A                         l5719 268A  
                       l5575 2B9E                         l5655 1D64                         l5647 1D2E  
                       l5671 27A4                         l5911 02C4                         l5903 0278  
                       l6295 0EE4                         l4687 1B1C                         l4679 1AFA  
                       l4961 2534                         l5649 1D3E                         l5681 27D8  
                       l5673 27A8                         l5921 030A                         l5905 02AA  
                       l6297 0F1A                         l4697 1B44                         l4689 1B22  
                       _ADFM 007E07                         l4955 2EA2                         l5819 18B4  
                       l5587 2C18                         l5595 2602                         l5691 297E  
                       l5499 21C4                         l6299 0F26                         l4699 1B4A  
                       l4973 2580                         l4965 2542                         l5669 2798  
                       l5693 2982                         l6485 2C98                         l4975 259E  
                       l4967 254C                         l5599 2632                         l5951 045C  
                       l5871 0194                         l5863 0162                         l4977 25A8  
                       l4969 256A                         l5697 29A6                         l5689 2972  
                       l5961 04EC                         l5953 048C                         l5945 0420  
                       l5937 03B8                         l5881 01F6                         l5857 0142  
                       l4995 2E84                         l5955 04A2                         l5883 01FC  
                       l5875 01D0                         l5981 05DC                         l5965 0512  
                       l5949 0446                         l5877 01E6                         l5975 0570  
                       l5895 0246                         l5993 0622                         l5897 0260  
                       l5889 0226                         l5979 05D6                         _ADON 007E10  
                       l5997 064E                         l5999 0656                         STR_1 FFB3  
                       STR_2 FF38                         STR_3 FFC9                         STR_4 FED3  
                       STR_5 FEF5                         STR_6 FF17                         STR_7 FF59  
                       STR_8 FE8C                         STR_9 FF78                         _DONE 007E11  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       u6000 1C92                         u6005 1C88                         u5161 224E  
                       _PEIE 007F96                         u6140 26B2                         u5181 227A  
                       _RBIE 007F93                         u5610 286E                         u6330 0350  
                       u4900 29EC                         u5604 2858                         u6148 26B4  
                       _RCIF 007CF5                         u5605 2852                         u4910 2A1E  
                       u5711 1FF4                         u6335 0344                         _RBIP 007F88  
                       u4907 29E2                         u5731 2020                         u4917 2A14  
                       u4951 1942                         u4961 1956                         u6490 073C  
                       u5871 236E                         u5891 2396                         u6907 1F14  
                       u6917 2D56                         u5981 1C48                         u6927 2D66  
                       u6887 177A                         u6897 178A                         _TMR2 000FCC  
              _postscalermax 00F1                         _TOUT 0041               _check_response 2AE2  
    ReadByte_I2C@Temperature 0071                         _main 2C94                 ___ftpack@arg 0010  
               ___ftpack@exp 0013                         _sign 00DF                         _temp 0049  
                       fsr0h 000FEA        __size_of_output_logic 05C2                         fsr1h 000FE2  
                       indf0 000FEF                         fsr0l 000FE9                         fsr2h 000FDA  
                       indf1 000FE7                         fsr1l 000FE1                         indf2 000FDF  
                       fsr2l 000FD9                 _start_signal 2D4C                         btemp 0050  
                       log@x 0072                         pclat 000FFA                         prodh 000FF4  
                       prodl 000FF3                         start 012E                __CFG_IESO$OFF 000000  
            __end_of_IdleI2C 2E96                 _sprintf$2545 0089                __CFG_MCLRE$ON 000000  
               ___ftmul@cntr 0064                 ___param_bank 000010                 ___ftmul@sign 0065  
            __end_of_InitADC 2EC8              __end_of_ReadI2C 2DE2                ?_ReadByte_I2C 0069  
            __end_of_OpenI2C 2DA8         __end_of_GetSampleADC 2E30                 ___fttol@exp1 007B  
                      ??_log 0040                 ___fttol@lval 0077             state_logic@error 0010  
            __end_of_StopADC 2ECC                        ?_main 0001              __end_of___awdiv 2776  
                      _ADRES 000FC3              __end_of___ftadd 1ADE                        STR_10 FFE9  
                      STR_11 FF97                        STR_12 FFF5                        STR_13 FFDC  
                      STR_14 FFDC                        STR_15 FEB0              __end_of___awmod 2960  
            __end_of___ftdiv 2444              __end_of___ftneg 2C6C              __end_of___lldiv 27F8  
            __end_of___ftmul 235E              ___awdiv@divisor 0018              __end_of___llmod 29C6  
            __end_of___ftsub 2BC8              __end_of___fttol 1D76                        _T2CON 000FCA  
                      _T3CON 000FB1               __CFG_DEBUG$OFF 000000                        i2l698 2DB6  
            ___awdiv@counter 001A                        _RCREG 000FAE                        _RCSTA 000FAB  
             _postscalerflag 00D9                        _TMR3H 000FB3                        _TMR3L 000FB2  
                      _SPBRG 000FAF                        _PORTA 000F80                        _PORTB 000F81  
                      _PORTC 000F82                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TXREG 000FAD                        _TXSTA 000FAC  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000                 ___lltoft@exp 0020  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000                 ?_init_system 0001  
                      _check 0045               __CFG_EBTRB$OFF 000000                ___awtoft@sign 001B  
               _output_logic 0AF4              __end_of_dpowers FE23                        _frexp 2662  
                      _errno 00D3                        _scale 10B6              __end_of_isdigit 2D8A  
     __end_of_check_response 2B3C                ___ftpack@sign 0014               __CFG_BOREN$OFF 000000  
                      tablat 000FF5                        status 000FD8              __end_of_sprintf 0AF4  
           __end_of_CloseI2C 2ED0               WriteUSART@data 0010              __initialization 2878  
             ??_ReadByte_I2C 0040                  log@exponent 0075                 __end_of_main 2CBC  
           __end_of_IntServe 012E    __size_of_InitializeTimer3 0022                       ??_main 0041  
              ___fttol@sign1 0076                __activetblptr 000002                ??_Salto_Enter 0011  
           __end_of_WaitFlag 2EBC         __size_of__tdiv_to_l_ 0132    ReadByte_I2C@ReadAddressIC 0074  
                     ?_frexp 0010             ___llmod@dividend 001D                       ?_scale 0066  
            ?_check_response 0010             ___awdiv@dividend 0016             __end_of_WriteI2C 2B88  
           __end_of___awtoft 2C3C             __end_of___ftpack 25D2             __end_of___lbtoft 2D06  
           __end_of___lltoft 2AE2                       _INT0IF 007F91                  OpenI2C@slew 0010  
             __CFG_WDTEN$OFF 000000           __size_of_InitUSART 001C                       i2l4921 0090  
                     i2l4913 0068                       i2l4923 00A4                       i2l4931 00D6  
                     i2l4907 005A                       i2l4941 00EE                       i2l4943 00F0  
                     i2l4927 00C0                       i2l4929 00D4             __end_of___lwtoft 2D2A  
                  ??_IdleI2C 0010           __size_of_ReadUSART 001E                       _OSCCON 000FD3  
                     _TMR2IE 007CE9                       _TMR2IF 007CF1                       _TMR3IE 007D01  
                     _TMR3IF 007D09                       _SPBRGH 000FB0                       _TMR2ON 007E52  
                     _SSPADD 000FC8                       _SSPBUF 000FC9                    ??_InitADC 0010  
                  ??_ReadI2C 0010                       _CharRX 004B                       _CharTX 00F3  
                 _WaitForACK 2EBC                    ??_OpenI2C 0011               __CFG_XINST$OFF 000000  
           __end_of__powers_ FE71         _SerialInterrupt_flag 00C7           __size_of_Open_I2C1 0014  
         __size_of_OpenUSART 0060                    ??_StopADC 0010                       ___ftge 25D2  
                     ___wmul 2CBC                   _Value_temp 00E1                    ??___awdiv 001A  
                  ??___ftadd 0031               __CFG_STVREN$ON 000000                    ??___awmod 0014  
                  ??___ftdiv 0022                    ??___ftneg 0040                    ??___lldiv 0018  
                  ??___ftmul 003D                    ??___llmod 0025                    ??___ftsub 003D  
                  ??___fttol 0071                       _fround 14CC                       clear_0 287E  
                     clear_1 288A             ___awdiv@quotient 001C              ___awmod@divisor 0012  
            ___awmod@counter 0014        ___ftmul@f3_as_product 0061                 __pdataCOMRAM 004F  
                  ??_isdigit 0010                 __mediumconst FDFA                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                    ??_sprintf 0083  
        __end_of_Salto_Enter 2E5C             __end_oflog@coeff FE8C                   __accesstop 0060  
    __end_of__initialization 28E2            _ReadByte_I2C$2538 006E    __size_of_SelectChannelADC 0014  
            __CFG_PBADEN$OFF 000000                   ___ftadd@f1 002B                   ___ftadd@f2 002E  
                 ___ftge@ff1 0010                   ___ftge@ff2 0013                 eval_poly@res 006F  
              ___rparam_used 000001                   ___ftdiv@f1 001C                   ___ftdiv@f2 001F  
                 ___ftdiv@f3 0026        __size_of_GetSampleADC 0018                   ___ftneg@f1 0066  
                 ___awtoft@c 0018                   ___lbtoft@c 001B                   ___ftmul@f1 0037  
                 ___ftmul@f2 003A                   ___ftsub@f1 0037                   ___ftsub@f2 003A  
                 ___fttol@f1 006D                   _WriteUSART 2E96               __pcstackCOMRAM 0001  
               __pidataBANK0 2DFE                 __pidataBANK1 2C6C  __size_of_ResetVariables_I2C 000C  
                 ___lltoft@c 0018                __end_of_frexp 26F2                __end_of_scale 14CC  
               ?_state_logic 0001            __end_of_InitUSART 2DFE            __end_of_ReadUSART 2DC6  
                 ___lwtoft@c 0018                   __div_to_l_ 2116            _output_logic$2540 012E  
          _output_logic$2541 0131            _output_logic$2539 012B                ReadUSART@data 0001  
                  ?_CloseI2C 0001            __end_of_Open_I2C1 2E84            __end_of_OpenUSART 2A86  
       __end_of_ReadByte_I2C 1932              __div_to_l_@exp1 001B              __div_to_l_@cntr 001A  
                    ??_frexp 0015                      ??_scale 0040              __div_to_l_@quot 0016  
               _GetSampleADC 2E18                   __pbssBANK0 00A4         __size_of_init_system 003C  
         __size_of_eval_poly 00E0                    ?_IntServe 0001                  ?_WaitForACK 0001  
              __div_to_l_@f1 0010                __div_to_l_@f2 0013           __size_of_read_byte 0080  
           _postscaler30smax 00EF                    ?_WaitFlag 0001                      ?___ftge 0010  
                    ?___wmul 001E                putsUSART@data 0011                      _I2C_Hum 00A4  
                    ?_fround 0066                      _I2C_Tem 00A8             _InitializeTimer3 2D2A  
                    _I2C_dev 00BF                    ?_WriteI2C 0001                    ?___awtoft 0018  
                  ?___ftpack 0010                    ?___lbtoft 0018                    ?___lltoft 0018  
 __end_of_GetDataSensorDHT22 1FE4                    ?___lwtoft 0018                  _Salto_Enter 2E46  
   __size_of_SendStringUSART 0016                   ??_CloseI2C 0010           __size_of_putsUSART 0060  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                      _SSPSTAT 000FC7  
                    _CharTX2 011C                      _IdleI2C 2E84                   ??_IntServe 0002  
                    _T_Byte1 00C9                      _T_Byte2 00CB                      _InitADC 2EC2  
                    _ReadI2C 2DC6                      _OpenI2C 2D8A            __end_of__npowers_ FE4A  
                    __Hparam 0000                   _scale$2544 0069                   ??_WaitFlag 0010  
                    __Lparam 0000                  ?_WriteUSART 0001                      _StopADC 2EC8  
             _I2C_HumFormula 00AC                      _Trigger 0043              __size_of___ftge 0090  
                    ___awdiv 26F2                      ___ftadd 1932                      ___awmod 28F0  
                    ___ftdiv 235E                      ___ftneg 2C3C                      ___lldiv 2776  
            __size_of___wmul 0026                      ___ftmul 223E                      ___llmod 2960  
                    ___ftsub 2B88                      ___fttol 1C32                      __pcinit 2878  
                 ??_WriteI2C 0011                   ??___awtoft 001B                   ??___ftpack 0015  
                 ??___lbtoft 001B            __end_of_eval_poly 2524              __size_of_fround 024E  
                    __ramtop 1000                   ??___lltoft 001C                      __ptext0 2C94  
                    __ptext1 1ADE                      __ptext2 0AF4                      __ptext3 0132  
                    __ptext4 10B6                      __ptext5 2D6C                      __ptext6 14CC  
                    __ptext7 28F0                      __ptext8 26F2                      __ptext9 1FE4  
                 ??___lwtoft 001B                  ?__div_to_l_ 0010                      _dpowers FDFB  
                  _T2CONbits 000FCA             ??_check_response 0012                 __size_of_log 013A  
                    _isdigit 2D6C                    _T3CONbits 000FB1          __size_of_WaitForACK 0006  
           ___awmod@dividend 0010            __end_of_read_byte 2878               _I2C_TemFormula 00AF  
                    _sprintf 0132         end_of_initialization 28E2             _SelectChannelADC 2E5C  
              __Lmediumconst FDFA              ___lldiv@divisor 0014              ___lldiv@counter 001C  
                  _RCSTAbits 000FAB                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE            __end_of_putsUSART 2A26  
               read_byte@num 0015               __tdiv_to_l_@f1 0010               __tdiv_to_l_@f2 0013  
              ??__tdiv_to_l_ 0016                    _PORTBbits 000F81          SendStringUSART@text 0015  
       __size_of_state_logic 0154        __size_of_ReadByte_I2C 0218                    _TRISBbits 000F93  
                  _TRISCbits 000F94                   _postscaler 00D5          __size_of_WriteUSART 0012  
          ??_SendStringUSART 0017                  ___ftdiv@exp 0029                    _TXSTAbits 000FAC  
        __size_of__div_to_l_ 0128                  ___ftmul@exp 0060                 _ReadByte_I2C 171A  
             __end_of___ftge 2662               __end_of___wmul 2CE2                __pidataCOMRAM 2ED0  
             __end_of_fround 171A                    _InitUSART 2DE2          start_initialization 2878  
                  _ReadUSART 2DA8                   eval_poly@d 0069                   eval_poly@n 006B  
                 eval_poly@x 0066          __end_of__tdiv_to_l_ 2116                  __end_of_log 1EB0  
                _dataI2C_Hum 004D                  _dataI2C_Tem 004E             WriteI2C@data_out 0011  
          __size_of_CloseI2C 0004     __end_of_InitializeTimer3 2D4C                    _Open_I2C1 2E70  
                 frexp@value 0010                    _OpenUSART 2A26                ?_start_signal 0001  
                ADC@Value_AD 00BB              ___llmod@divisor 0021                 ??_WaitForACK 0010  
            ___llmod@counter 0025            __size_of_IntServe 0126                    _Value_AN0 00CF  
                  _Value_AN1 00E4   __end_of_ResetVariables_I2C 2EB4                    _Value_AN9 00D1  
                  _Value_pot 00B2                     ??___ftge 0016                     ??___wmul 0022  
            _Value_tempdht22 00B8            __size_of_WaitFlag 0008                  __pdataBANK0 00E6  
                __pdataBANK1 0100                     ??_fround 0040                sprintf@tmpval 0096  
                 fround@prec 006F            __size_of_WriteI2C 004C            __size_of___awtoft 0038  
               ?_Salto_Enter 0001            __size_of___ftpack 00AE            __size_of___lbtoft 0024  
                 ?_InitUSART 0001            __size_of___lltoft 005C                  __pbssCOMRAM 0041  
                 ?_ReadUSART 0001            __size_of___lwtoft 0024           __end_of_WaitForACK 2EC2  
              __pcstackBANK0 0060                __pcstackBANK1 0128                ??_init_system 0017  
              ?_output_logic 0001                 _isdigit$2134 0011                _Value_rhdht22 00B5  
         _GetDataSensorDHT22 1EB0                     ?_IdleI2C 0001               ??_start_signal 0010  
                 ?_Open_I2C1 0001                   ?_OpenUSART 0010                  sprintf@flag 0092  
                sprintf@fval 009E                  sprintf@prec 00A1                     ?_InitADC 0001  
                   ?_ReadI2C 0001                     ?_OpenI2C 0010          ?_GetDataSensorDHT22 0001  
          __CFG_CCP2MX$PORTC 000000                 ??_WriteUSART 0010                    __pintcode 0008  
                   ?_StopADC 0001                __pmediumconst FDFA                     ?___awdiv 0016  
                   ?___ftadd 002B                     ?___awmod 0010                     ?___ftdiv 001C  
                   ?___ftneg 0066                     ?___lldiv 0010                     ?___ftmul 0037  
                   ?___llmod 001D                     ?___ftsub 0037                    __npowers_ FE23  
                   ?___fttol 006D                  __tdiv_to_l_ 1FE4     __end_of_SelectChannelADC 2E70  
               ??__div_to_l_ 0016                     ?_isdigit 0001         ??_GetDataSensorDHT22 002B  
                  _eval_poly 2444                     _I2C_manu 00C1               ??_output_logic 0128  
                   ?_sprintf 007C               __size_of_frexp 0090               __size_of_scale 0416  
                  _read_byte 27F8           __end_of_WriteUSART 2EA8              ReadByte_I2C@tmp 006C  
        __end_of_init_system 2C04               ___wmul@product 0022                     _PIE1bits 000F9D  
                   _PIR1bits 000F9E           __end_of__div_to_l_ 223E            _postscalerflag30s 00DB  
                   _RH_Byte1 00C3                     _RH_Byte2 00C5                   _ADCON0bits 000FC2  
                  _putsUSART 29C6        ReadByte_I2C@LowerByte 0075            ___wmul@multiplier 001E  
            _SendStringUSART 2E30                     _CheckSum 00BD                  ??_InitUSART 0017  
ReadByte_I2C@RegisterAddress 0069                   ?_eval_poly 0066                  ??_ReadUSART 0001  
                   _CloseI2C 2ECC                  _INTCON2bits 000FF1                   ?_read_byte 0010  
                  copy_data0 28A4                    copy_data1 28C4             OpenI2C@sync_mode 0011  
                ??_Open_I2C1 0012                  ??_OpenUSART 0012                     _IntServe 0008  
      ReadByte_I2C@UpperByte 0076             __size_of_IdleI2C 0012              OpenUSART@config 0012  
                  frexp@eptr 0013             __size_of_InitADC 0006             __size_of_ReadI2C 001C  
                   __Hrparam 0000                     _WaitFlag 2EB4             __size_of_OpenI2C 001E  
                   _Value_AD 00CD                     __Lrparam 0000             __size_of_StopADC 0004  
           __size_of___awdiv 0084             __size_of___ftadd 01AC                ??_state_logic 0010  
           __size_of___awmod 0070             __size_of___ftdiv 00E6             __size_of___ftneg 0030  
           __size_of___lldiv 0082             __size_of___ftmul 0120             __size_of___llmod 0066  
           __size_of___ftsub 0040             __size_of___fttol 0144                     _WriteI2C 2B3C  
                   ___awtoft 2C04                     ___ftpack 2524                     ___lbtoft 2CE2  
                _fround$2542 006C                  _fround$2543 0069                     ___lltoft 2A86  
                 ?_putsUSART 0011         __end_of_start_signal 2D6C                     ___lwtoft 2D06  
                 sprintf@len 008E                   sprintf@exp 0094                   sprintf@val 009A  
           __size_of_isdigit 001E         __size_of_Salto_Enter 0016                     __ptext10 2116  
                   __ptext11 2A86                     __ptext20 2CBC                     __ptext12 2960  
                   __ptext21 2C04                     __ptext13 2776                     __ptext30 2EBC  
                   __ptext22 2EC8                     __ptext14 1C32                     __ptext31 2EB4  
                   __ptext23 2E5C                     __ptext15 2B88                     __ptext40 1EB0  
                   __ptext32 2EA8                     __ptext24 171A                     __ptext16 25D2  
                   __ptext41 2D4C                     __ptext33 2DC6                     __ptext25 2CE2  
                   __ptext17 1D76                     __ptext50 2E30                     __ptext42 27F8  
                   __ptext34 2E70                     __ptext26 2C3C                     __ptext18 2662  
                   __ptext51 29C6                     __ptext43 2AE2                     __ptext35 2D8A  
                   __ptext27 223E                     __ptext19 2444                     __ptext52 2E46  
                   __ptext44 2D06                     __ptext36 2E84                     __ptext28 1932  
                   __ptext53 2E96                     __ptext45 235E                     __ptext37 2D2A  
                   __ptext29 2B3C                     __ptext54 2A26                     __ptext46 2524  
                   __ptext38 2EC2                     __ptext47 2ECC                     __ptext39 2E18  
                   __ptext56 2DA8                     __ptext48 2BC8                     __ptext49 2DE2  
                _init_system 2BC8                     __powers_ FE4A                ?_GetSampleADC 0010  
           __size_of_sprintf 09C2      __size_of_check_response 005A            ?_InitializeTimer3 0001  
              __size_of_main 0028                     _message1 0100                     _message2 010E  
         ??_InitializeTimer3 0010         __end_of_output_logic 10B6                     int$flags 0050  
    __end_of_SendStringUSART 2E46                _present_state 004F                     log@coeff FE71  
               _sensibilidad 00EC           _ResetVariables_I2C 2EA8                   _INTCONbits 000FF2  
                ??_eval_poly 006D          __end_of_state_logic 1C32               OpenUSART@spbrg 0010  
                   isdigit@c 0012               ??_GetSampleADC 0012                     scale@scl 006C  
        ?_ResetVariables_I2C 0001                  ??_read_byte 0012                     intlevel2 0000  
                  sprintf@ap 0090                    sprintf@cp 008C             __tdiv_to_l_@exp1 001E  
           __tdiv_to_l_@cntr 001D                    sprintf@sp 007C             __tdiv_to_l_@quot 0019  
           ___lldiv@dividend 0010         ??_ResetVariables_I2C 0010                 ?__tdiv_to_l_ 0010  
                ??_putsUSART 0013      SelectChannelADC@channel 0010            ?_SelectChannelADC 0010  
                   sprintf@c 00A3                     sprintf@f 007E             ___lldiv@quotient 0018  
         ??_SelectChannelADC 0012            output_logic@error 012A                  _SSPCON1bits 000FC6  
                _SSPCON2bits 000FC5            __CFG_FOSC$INTIO67 000000                 _USART_Status 004C  
